file C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS

file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\Gen4-uLCD-35DCT-CLB.fnc

000001  000001  #platform "Gen4-uLCD-35DCT-CLB"
000002  000001  #platform "Gen4-uLCD-35DCT-CLB"
000003  000008  */
000004  000009      #constant Gen4_ULCD_35DCT_CLB_DIABLO16_GFX
000005  000009      #constant Gen4_ULCD_35DCT_CLB_DIABLO16_GFX
000006  000010        
000007  000011      #IFNOT EXISTS DIABLO16_GFX2_FUNCTIONS
file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\Diablo16_Functions.fnc

000008  000012          #inherit "Diablo16_Functions.fnc"          // inherit the generic functions
000009  000012          #inherit "Diablo16_Functions.fnc"          // inherit the generic functions
000010  000001        
000011  000002  // Common inheritance for Diablo16 platforms
000012  000003        
000013  000004  //#constant ULCD_32PT_DIABLO16_GFX
000014  000005        
000015  000006        
000016  000007  // define the compiler dummy preambles
000017  000008  #constant LOCAL $//
000018  000008  #constant LOCAL $//
000019  000009  #constant EXTERN $ /**/
000020  000009  #constant EXTERN $ /**/
000021  000010        
000022  000011  #CONST
000023  000020  #END
000024  000021        
000025  000022  #CONST
000026  000038  #END
000027  000039        
000028  000040        
000029  000041        
000030  000042        
000031  000047  */
000032  000048        
000033  000049        
000034  000050  //------------------------------------------------------------------//
000035  000051  //     EVE  miscellaneous functions                                 //
000036  000052  //------------------------------------------------------------------//
000037  000053        
000038  000054  func to("device"), 0;                // output device redirection
000039  000055  // Syntax: to(outstream);
000040  000056  // Usage : to(APPEND); putstr("TWO ");
000041  000057  // Notes : outstream: A variable or constant specifying destination for putch, putstr, putnum and print functions.
000042  000058  //     :
000043  000059  //     : to() sends the printed output to destinations other than the screen. Normally, print just
000044  000060  //     : sends its output to the display in TEXT mode which is the default, however, the output from
000045  000061  //     : print can be sent to COM0, and MDA (media) 'streams'. The to(...) function can also stream
000046  000062  //     : to a memory array . Note that once the to(...) function has taken effect, the stream reverts
000047  000063  //     : back to the default stream which is TEXT as soon as putch, putstr, putnum or print has
000048  000064  //     : completed its action. The APPEND argument is used to send the printed output to the same
000049  000065  //     : place as the previous redirection. This is most useful for building string arrays, or adding
000050  000066  //     : sequential data to a media stream.
000051  000067  //     :
000052  000068  //     : Predefined Name Constant    putch(), putstr(), putnum(), print() redirection
000053  000069  //     : APPEND         0x0000      Output is directed to the same stream that was previously assigned. Output is
000054  000070  //     :                            appended to user memory if previous redirection was to an array.
000055  000071  //     : COM0           0xFF04      Output is redirected to the COM (serial) port.
000056  000072  //     : TEXT           0xFF08      Output is directed to the screen (default).
000057  000073  //     : MDA            0xFF10      Output is directed to the SD or FLASH media.
000058  000074  //     : I2C1           0xF820      Output is directed to the I2C1 port.
000059  000075  //     : memory pointer             Output is redirect to the memory pointer argument, eg to(myarray); print("HELLO");
000060  000076        
000061  000077  //------------------------------------------------------------------//
000062  000078  // to(..) redirection constants            //
000063  000079  //------------------------------------------------------------------//
000064  000080  #CONST
000065  000093  #END
000066  000094        
000067  000095        
000068  000096  func putch("char"), 0;                // write single char to current output device
000069  000097  // Syntax    : putch("char");
000070  000098  // Usage     : putch("A");
000071  000099  // Notes     : prints single characters to the current output stream, usually the
000072  000100  //           : display unless redirected with the ‘to’ redirection function.
000073  000101  //         : The arguments can be a variable, array element, expression or constant.
000074  000102        
000075  000103        
000076  000104  func putchXY("xpos", "ypos", "char"), 0;
000077  000105  // Syntax  : putchXY(x, y, '0x41'),
000078  000106  // Usage   : putchXY(100, 100, "HELLO");
000079  000107  // Notes   : Print a single character at position x, y.
000080  000108  //         : Char may be a constant or variable.
000081  000109  // Returns : nothing.
000082  000110        
000083  000111  func putstrXY("xpos", "ypos", "string"), 0;
000084  000112  // Syntax  : putstrXY(x, y, "string"),
000085  000113  // Usage   : putstrXY(100, 100, "HELLO");
000086  000114  // Notes   : Print a string at position x, y
000087  000115  //         : "String" may be a string constant, or pointer to a word aligned string.
000088  000116  // Returns : nothing.
000089  000117        
000090  000118        
000091  000119  func putstrCentred("xc", "yc", "string"), 0;
000092  000120  // Syntax  : putstrCentred(x, y, "string"),
000093  000121  // Usage   : putstrCentred(100, 100, "HELLO");
000094  000122  // Notes   : Print a string centred at position x, y
000095  000123  //         : "String" may be a string constant, or pointer to a word aligned string.
000096  000124  // Returns : nothing.
000097  000125        
000098  000126        
000099  000127  func pause("milliseconds"), 0;            // blocking delay
000100  000128  // Syntax: pause(milliseconds);
000101  000129  // Usage : pause(1000);                //pause for 1 second
000102  000130  // Notes : Pause for a number of milli second.Maximum delay could be 65535 milli seconds
000103  000131        
000104  000132        
000105  000133  func putnum("arg1","arg2"), 1;            // print number to current output device
000106  000134  // Syntax: putnum(format, value);
000107  000135  // Usage : var := putnum(HEX, val);
000108  000136  // Notes : prints a 16bit number in various formats to the current output stream, usually the display.
000109  000137  //     : Format: A constant that specifies the number format
000110  000138  //     : Value : The number to be printed
000111  000139  //     : (      DECIMAL   )    (   UNSIGNED DECIMAL )    (    HEX         )     (    BINARY          )
000112  000140  //     : DEC     DECZ     DECZB     UDEC     UDECZ     UDECZB     HEX     HEXZ     HEXZB     BIN     BINZ     BINZB
000113  000141  //     : DEC1 DEC1Z     DEC1ZB     UDEC1     UDEC1Z     UDEC1ZB HEX1     HEX1Z     HEX1ZB     BIN1     BIN1Z     BIN1ZB
000114  000142  //     : DEC2 DEC2Z     DEC2ZB     UDEC2     UDEC2Z     UDEC2ZB HEX2     HEX2Z     HEX1ZB     BIN2     BIN2Z     BIN2ZB
000115  000143  //     : DEC3 DEC3Z     DEC3ZB     UDEC3     UDEC3Z     UDEC3ZB HEX3     HEX3Z     HEX1ZB     BIN3     BIN3Z     BIN3ZB
000116  000144  //     : DEC4 DEC4Z     DEC4ZB     UDEC4     UDEC4Z     UDEC4ZB HEX4     HEX4Z     HEX1ZB     BIN4     BIN4Z     BIN4ZB
000117  000145  //     : DEC5 DEC5Z     DEC5ZB     UDEC5     UDEC5Z     UDEC5ZB             BIN5     BIN5Z     BIN5ZB
000118  000146  //     :                                     BIN6     BIN6Z     BIN6ZB
000119  000147  //     :                                     BIN7     BIN7Z     BIN7ZB
000120  000148  //     :                                     BIN8     BIN8Z     BIN8ZB
000121  000149  //     :                                     BIN9     BIN9Z     BIN9ZB
000122  000150  //     :                                     BIN10     BIN10Z     BIN10ZB
000123  000151  //     :                                     BIN11     BIN11Z     BIN11ZB
000124  000152  //     :                                     BIN12     BIN12Z     BIN12ZB
000125  000153  //     :                                     BIN13     BIN13Z     BIN13ZB
000126  000154  //     :                                     BIN14     BIN14Z     BIN14ZB
000127  000155  //     :                                     BIN15     BIN15Z     BIN15ZB
000128  000156  //     :                                     BIN16     BIN16Z     BIN16ZB
000129  000157  //     : field: Returns the the default width of the numeric field (digit count), usually ignored.
000130  000158  //     : bit 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0
000131  000159  //     : | | | | \___ ___/ \__ __/ \_____ _____/
000132  000160  //     : | | | | V V V
000133  000161  //     : | | | | | | |
000134  000162  //     : | | | | | |
000135  000163  //     : | | | | (nb 0 = 16) | |____BASE (usually 2,10 or 16)
000136  000164  //     : | | | | digit count |
000137  000165  //     : | | | | |___reserved (not used on GOLDELOX)
000138  000166  //     : | | | |
000139  000167  //     : | | | |
000140  000168  //     : | | | |
000141  000169  //     : | | | |
000142  000170  //     : | | | |
000143  000171  //     : | | | |______ 1 = leading zeros included
000144  000172  //     : | | | 0 = leading zeros suppressed
000145  000173  //     : | | |
000146  000174  //     : | | |
000147  000175  //     : | | |_______ 1 = leading zero blanking
000148  000176  //     : | |
000149  000177  //     : | |_____ sign bit (0 = signed, 1 = unsigned)
000150  000178  //     : |
000151  000179  //     : |______ 1 = space before unsigned number
000152  000180        
000153  000181        
000154  000182  func __translate("arg1","arg2","arg3","arg4"), 1; // list translator (*** internal compiler use only, not usable)
000155  000183        
000156  000184        
000157  000185  func putstr("string"), 1;                         // print var (word) aligned string to current output device
000158  000186  // Syntax: putstr(pointer);
000159  000187  // Usage : putstr("HELLO\n");
000160  000188  // Notes : putstr prints a string to the current output stream, usually the display. The argument can be
000161  000189  //       : a string constant, a word aligned pointer to a string, a pointer to an array, or a pointer to
000162  000190  //       : a data statement. Note that string constants and data statement pointers are byte aligned.
000163  000191  //       : The output of putstr can be redirected to the communications port, the media, or memory
000164  000192  //       : using the to(...); function.
000165  000193  //       : A string constant is automatically terminated with a zero.
000166  000194  //       : A string in a data statement is not automatically terminated with a zero.
000167  000195  //       : All variables in 4DGL are 16bit, if an array is used for holding 8 bit characters, each array
000168  000196  //       : element packs 1 or 2 characters.
000169  000197        
000170  000198        
000171  000199  func strlen("varAddress"), 1;                   // return length of a var (word) aligned string in character units
000172  000200  // Syntax: strlen("varAddress);
000173  000201  // Usage : strlen("HELLO\n");
000174  000202  // Notes : gives the length of a string that is packed into regular var array
000175  000203  //       : Use str_Length(ptr)  for string pointer mode
000176  000204        
000177  000205        
000178  000206  func charwidth("char"), 1;
000179  000207  // Syntax  : charwidth(char);
000180  000208  // Usage   : wid := charwidth('W');
000181  000209  // Notes   : calculates width of a character in pixel units.
000182  000210  //         : 'char' may be a constant or variable.
000183  000211  // Returns : Width of character in pixel units.
000184  000212        
000185  000213        
000186  000214  func charheight("char"), 1;
000187  000215  // Syntax  : charheight(char);
000188  000216  // Usage   : ht := charheight('0x41');
000189  000217  // Notes   : Calculates height of a character in pixel units.
000190  000218  //         : 'char' may be a constant or variable.
000191  000219  // Returns : Height of character in pixel units.
000192  000220        
000193  000221        
000194  000222  func strwidth("pointer"), 1;
000195  000223  // Syntax  : strwidth(ptr);
000196  000224  // Usage   : x := strwidth("HELLO");
000197  000225  // Notes   : returns width of a string in pixel units.
000198  000226  //         : 'pointer' may be a constant or pointer to word aligned variable
000199  000227  // Returns : Width of string in pixel units, can be multi line.
000200  000228        
000201  000229        
000202  000230  func strheight(), 1;
000203  000231  // Syntax  : strheight();
000204  000232  // Usage   : h := strheight();
000205  000233  // Notes   : calculates height of a string in pixel units (after a call to strwidth );
000206  000234  //         : pointer may be a constant or pointer to word aligned variable
000207  000235  // Returns : Height of string in pixel units, can be multi line.
000208  000236        
000209  000237        
000210  000238  func unicode_page("charbeg","charend","charoffset"), 1;
000211  000239  // Syntax: unicode_page("charbeg","charend","charoffset");
000212  000240  // Usage : eg:  F_Traditional_0x20_0xFF
000213  000241  // Notes : After selecting a unicode image control with txt_FontID,
000214  000242  //       : this function is called to set the required font within the
000215  000243  //       : unicode set. The file "Unicode.inc" contains wrappers for
000216  000244  //       : this function, and it is not normally called directly.
000217  000245  //       : Returns count of characters in the set.
000218  000246  //       : Refer to "Unicode.inc" for further information.
000219  000247        
000220  000248        
000221  000249  //------------------------------------------------------------------//
000222  000250  //          Text Related Functions                                  //
000223  000251  //------------------------------------------------------------------//
000224  000252        
000225  000253  func txt_MoveCursor("line", "column"), 0;
000226  000254  // Syntax: txt_SetCursor(line, column);
000227  000255  // Usage : txt_SetCursor(arg1, arg2);
000228  000256  // Notes : Moves the text Cursor to a new screen position set by
000229  000257  //       : line,column parameters.
000230  000258        
000231  000259  func txt_Set("function", "value"), 0;
000232  000260  // Syntax: txt_Set(function, value);
000233  000261  // Usage : txt_Set(arg1, arg2);
000234  000262  // Returns : Original value before the change
000235  000263  // Notes : Sets various text related parameters used by other functions
000236  000264  //       : This allows the features to be set programatically with a
000237  000265  //       : single function call.It is strongly recommended to use the
000238  000266  //       : pre-defined constants rather than the mode numbers.
000239  000267  //       : NB:- It is often required to be able to set text
000240  000268  //       : functions with a single function call for graphics engine
000241  000269  //       : related functions, however, there is a complete set of single parameter
000242  000270  //       : shortcut functions that have exactly the same function as
000243  000271  //       : each of the txt_Set modes and saves 1 parameter / uses less memory
000244  000272  //       :
000245  000273  //       : txt_Set(TEXT_COLOUR, colour);        // function 0, TEXT_COLOUR, default colour = LIME
000246  000274  //       : txt_Set(TEXT_HIGHLIGHT, colour);     // function 1, TEXT_HIGHLIGHT)
000247  000275  //       : txt_Set(FONT_ID, fontNumer);         // function 2, FONT_ID)
000248  000276  //       : txt_Set(TEXT_WIDTH, multiplier);     // function 3, TEXT_WIDTH)
000249  000277  //       : txt_Set(TEXT_HEIGHT, multiplier);    // function 4, TEXT_HEIGHT)
000250  000278  //       : txt_Set(TEXT_XGAP, pixels);          // function 5, TEXT_XGAP)
000251  000279  //       : txt_Set(TEXT_YGAP, pixels);          // function 6, TEXT_YGAP)
000252  000280  //       : txt_Set(TEXT_PRINTDELAY, msecs);     // function 7, TEXT_PRINTDELAY)
000253  000281  //       : txt_Set(TEXT_OPACITY, value);        // function 8, TEXT_OPACITY)
000254  000282  //       : txt_Set(TEXT_BOLD, boldness);        // function 9, TEXT_BOLD)
000255  000283  //       : txt_Set(TEXT_ITALIC, slope);         // function 10, TEXT_ITALIC)
000256  000284  //       : txt_Set(TEXT_INVERSE, onoff);        // function 11, TEXT_INVERSE)
000257  000285  //       : txt_Set(TEXT_UNDERLINED, onoff);     // function 12, TEXT_UNDERLINED)
000258  000286  //       : txt_Set(TEXT_ATTRIBUTES, combine);   // function 13, TEXT_ATTRIBUTES)
000259  000287  //       : txt_Set(TEXT_WRAP, column);          // function 14, TEXT_WRAP)
000260  000288  //       : txt_Set(TEXT_ANGLE , degrees);       // function 15, TEXT_ANGLE)
000261  000289  //       :
000262  000290  //       : txt_Set(TEXT_COLOUR, colour);
000263  000291  //       : mode = TEXT_COLOUR (function 0)
000264  000292  //       : txt_Set(TEXT_COLOUR, value);
000265  000293  //       : value = 0 to 0xFFFF, Black to White
000266  000294  //       : Sets the Text colour for the display
000267  000295  //       : Default = LIME.
000268  000296  //       :
000269  000297  //       : mode = TEXT_HIGHLIGHT (function 1)
000270  000298  //       : txt_Set(TEXT_HIGHLIGHT, value);
000271  000299  //       : value = 0 to 0xFFFF, Black to White
000272  000300  //       : Sets the Text background colour for the display. Effective
000273  000301  //       : when text mode is Opaque.
000274  000302  //       : Default = BLACK.
000275  000303  //       :
000276  000304  //       : mode = FONT_ID (function 2)
000277  000305  //       : txt_Set(FONT_ID, value);
000278  000306  //       : value = FONT1 to FONT11 for internal fonts
000279  000307  //       : else this value is the name of a font included
000280  000308  //       : in a users program in a data statement.
000281  000309  //       : Default = FONT SIZE 3.
000282  000310  //       :
000283  000311  //       : mode = TEXT_WIDTH  (function 3)
000284  000312  //       : txt_Set(TEXT_WIDTH, value);
000285  000313  //       : value = 1 to 16
000286  000314  //       : Sets the Text Width multiplier
000287  000315  //       : text will be printed magnified horizontally
000288  000316  //       : by this factor, Default = 1.
000289  000317  //       :
000290  000318  //       : mode = TEXT_HEIGHT  (function 4)
000291  000319  //       : txt_Set(TEXT_HEIGHT, value);
000292  000320  //       : value = 1 to 16
000293  000321  //       : Sets the Text Height multiplier
000294  000322  //       : text will be printed magnified vertically
000295  000323  //       : by this factor, Default = 1.
000296  000324  //       :
000297  000325  //       : mode = TEXT_XGAP  (function 5)
000298  000326  //       : txt_Set(TEXT_XGAP, value);
000299  000327  //       : value = 1 to 32
000300  000328  //       : Sets the horizontal gap between characters
000301  000329  //       : The gap is in pixel units, Default = 0
000302  000330  //       :
000303  000331  //       : mode = TEXT_YGAP  (function 6)
000304  000332  //       : txt_Set(TEXT_YGAP, value);
000305  000333  //       : value = 1 to 32
000306  000334  //       : Sets the vertical gap below characters
000307  000335  //       : The gap is in pixel units, Default = 0
000308  000336  //       :
000309  000337  //       : mode = TEXT_PRINTDELAY  (function 7) DEPRECATED
000310  000338  //       : txt_Set(TEXT_PRINTDELAY, value);
000311  000339  //       : value = 0 to 255
000312  000340  //       : Sets the delay time (in ms) during character
000313  000341  //       : printing to give a 'teletype' like effect.
000314  000342  //       : Often used to attract attention to a string
000315  000343  //       : being printed which can often be missed if
000316  000344  //       : just suddenly appearing or changing.
000317  000345  //       : Default = 0 ms.
000318  000346  //       :
000319  000347  //       : mode = TEXT_OPACITY (function 8)
000320  000348  //       : txt_Set(TEXT_OPACITY, value);
000321  000349  //       : value = TRANSPARENT (0) = Text Trasparent
000322  000350  //       : value = OPAQUE (1) = Text Opaque
000323  000351  //       : Sets the Opacity/Transparency of the text
000324  000352  //       : Default = 0 or TRANSPARENT
000325  000353  //       :
000326  000354  //       : mode = TEXT_BOLD (function 9)
000327  000355  //       : txt_Set(TEXT_BOLD, value);
000328  000356  //       : value = dont care
000329  000357  //       : Sets Bold Text mode for the next string or char
000330  000358  //       : The feature automatically resets after printing
000331  000359  //       : using putstr or print has completed
000332  000360  //       :
000333  000361  //       : mode = TEXT_ITALIC (function10)
000334  000362  //       : txt_Set(TEXT_ITALIC, value);
000335  000363  //       : value = dont care
000336  000364  //       : Sets Italic Text mode for the next string or char
000337  000365  //       : The feature automatically resets after printing
000338  000366  //       : using putstr or print has completed
000339  000367        
000340  000368  //       : mode = TEXT_INVERSE (function 11)
000341  000369  //       : txt_Set(TEXT_INVERSE, value);
000342  000370  //       : value = dont care
000343  000371  //       : Sets Inverse Text mode for the next string or char
000344  000372  //       : The feature automatically resets after printing
000345  000373  //       : using putstr or print has completed
000346  000374  //       :
000347  000375  //       : mode = TEXT_UNDERLINED (function 12)
000348  000376  //       : txt_Set(TEXT_UNDERLINED, value);
000349  000377  //       : value = dont care
000350  000378  //       : Sets Underlined Text mode for the next string or char
000351  000379  //       : The feature automatically resets after printing
000352  000380  //       : using putstr or print has completed
000353  000381  //       :
000354  000382  //       : mode = TEXT_ATTRIBUTES (function 13)
000355  000383  //       : txt_Set(TEXT_ATTRIBUTES, value);
000356  000384  //       : value = bits are defined as:
000357  000385  //       :  BOLD        16          // TEXT_ATTRIBUTES bold text (auto reset)
000358  000386  //       :  ITALIC      32          // TEXT_ATTRIBUTES italic text (auto reset)
000359  000387  //       :  INVERSE     64          // TEXT_ATTRIBUTES inverse text (auto reset)
000360  000388  //       :  UNDERLINED  128         // TEXT_ATTRIBUTES underlined text (auto reset)
000361  000389  //       : Allows a combination of text attributes to be defined together
000362  000390  //       : by 'or'ing the bits together.
000363  000391  //       : Example: txt_Set(TEXT_ATTRIBUTES, BOLD | INVERSE); // bold + inverse
000364  000392  //       : The feature automatically resets after printing
000365  000393  //       : using putstr or print has completed.
000366  000394  //       : Bits 0-3 and 8-15 are reserved for future attributes.
000367  000395  //       :
000368  000396  //       : mode = TEXT_WRAP (function 14)
000369  000397  //       : txt_Set(TEXT_WRAP , value);
000370  000398  //       : Sets the position where text wrap will occur
000371  000399  //       : The feature automatically resets when screen
000372  000400  //       : mode is changed. If the value is set to 0,
000373  000401  //       : text wrap is turned off.
000374  000402  //       : of the current screen. Default value is 0
000375  000403  // Notes : The value is in pixel units.
000376  000404  //       :
000377  000405  //       : mode = TEXT_ANGLE (function 15)
000378  000406  //       : txt_Set(TEXT_ANGLE , value);
000379  000407  //       : Sets the angle of plotted fonts
000380  000408  // Notes : The angle is in degrees.
000381  000409  //       :
000382  000410        
000383  000411  //------------------------------------------------------------------------------
000384  000412  //txt_Set() related constants
000385  000413  //------------------------------------------------------------------------------
000386  000414  #CONST
000387  000433  #END
000388  000434        
000389  000435  //------------------------------------------------------------------------------
000390  000436  //txt_Set() related arguments
000391  000437  //------------------------------------------------------------------------------
000392  000438  #CONST
000393  000464  #END
000394  000465        
000395  000466        
000396  000467  //=====================================================//
000397  000468  // Single parameter short-cuts                         //
000398  000469  // for the txt_Set functions                           //
000399  000470  // These functions return the existing value before    //
000400  000471  // the change is made.                                 //
000401  000472  //=====================================================//
000402  000473  func txt_FGcolour("colour"), 1;             // 0  text foreground colour
000403  000474  func txt_BGcolour("colour"), 1;             // 1  text background colour
000404  000475  func txt_FontID("id"), 1;                   // 2  text font ID (0 = system font)
000405  000476  func txt_Width("multiplier"), 1;            // 3  text width multiplier
000406  000477  func txt_Height("multiplier"), 1;           // 4  text height multiplier
000407  000478  func txt_Xgap("pixelcount"), 1;             // 5  text gap between characters
000408  000479  func txt_Ygap("pixelcount"), 1;             // 6  text gap between lines
000409  000480  func txt_Delay("millisecs"), 1;             // 7  text printing delay factor
000410  000481  func txt_Opacity("mode"), 1;                // 8  text OPAQUE or TRANSPARENT
000411  000482  func txt_Bold("mode"), 1;                   // 9  text bold ON/OFF
000412  000483  func txt_Italic("mode"), 1;                 // 10 text italic ON/OFF
000413  000484  func txt_Inverse("mode"), 1;                // 11 text inverse ON/OFF
000414  000485  func txt_Underline("mode"), 1;              // 12 text underline ON/OFF
000415  000486  func txt_Attributes("value"), 1;            // 13 text combined bold|italic|inverse|underline
000416  000487  func txt_Wrap("value"), 1;                  // 14 text set text wrap position
000417  000488  func txt_Angle("value"), 1;                 // 15 text set angle of plotted font
000418  000489        
000419  000490        
000420  000491        
000421  000492  //------------------------------------------------------------------//
000422  000493  // Memory Access Functions                                          //
000423  000494  //------------------------------------------------------------------//
000424  000495                                                  //
000425  000496  func peekW("address"), 1;                       // read a word from system memory
000426  000497  func pokeW("address", "wordvalue"), 0;          // write a word to system memory
000427  000498  // refer to address map of internal variables   //
000428  000499        
000429  000500        
000430  000501  //------------------------------------------------------------------//
000431  000502  //        CTYPE Function Prototypes
000432  000503  //------------------------------------------------------------------//
000433  000504        
000434  000505  func isdigit("char"), 1;    //Returns a 1 if the character is an ascii digit else returns a 0
000435  000506  // Syntax: isdigit("char");
000436  000507  // Usage : Var := isdigit(ch);
000437  000508  // Notes : char specifies the ascii character for the test
000438  000509  //     : 0 : char is not an ascii digit.
000439  000510  //     : 1 : char is an ascii digit..
000440  000511  //     : Valid range is "0123456789"
000441  000512        
000442  000513  func isxdigit("char"), 1;    //Returns a 1 if the character is an ascii hexadecimal digit else returns a 0
000443  000514  // Syntax: isxdigit("char");
000444  000515  // Usage : Var := isxdigit(ch);
000445  000516  // Notes : char specifies the ascii character for the test
000446  000517  //     : 0 : char is not an ascii hexadecimal digit.
000447  000518  //     : 1 : char is an ascii hexadecimal digit..
000448  000519  //     : Valid range is "0123456789ABCDEF"
000449  000520        
000450  000521  func isupper("char"), 1;    //Returns a 1 if the character is an ascii upper case letter else returns a 0
000451  000522  // Syntax: isupper("char");
000452  000523  // Usage : Var := isupper(ch);
000453  000524  // Notes : char specifies the ascii character for the test
000454  000525  //     : 0 : char is not an ascii upper-case letter.
000455  000526  //     : 1 : char is an ascii upper-case letter.
000456  000527  //     : Valid range is "ABCD....WXYZ"
000457  000528        
000458  000529  func islower("char"), 1;    //Returns a 1 if the character is an ascii lower case letter else returns a 0
000459  000530  // Syntax: islower("char");
000460  000531  // Usage : Var := islower(ch);
000461  000532  // Notes : char specifies the ascii character for the test
000462  000533  //     : 0 : char is not an ascii lower-case letter.
000463  000534  //     : 1 : char is an ascii lower-case letter.
000464  000535  //     : Valid range is "abcd....wxyz"
000465  000536        
000466  000537  func isalpha("char"), 1;    //Returns a 1 if the character is an ascii lower or upper case letter else returns a 0
000467  000538  // Syntax: isalpha("char");
000468  000539  // Usage : Var := isalpha(ch);
000469  000540  // Notes : char specifies the ascii character for the test
000470  000541  //     : 0 : char is not an ascii lower or upper case letter.
000471  000542  //     : 1 : char is an ascii lower or upper case letter.
000472  000543  //     : Valid range is "ABCD...XYZ", "abcd....wxyz"
000473  000544        
000474  000545  func isalnum("char"), 1;    //Returns a 1 if the character is an ascii alpha numeric else returns a 0
000475  000546  // Syntax: isalnum("char");
000476  000547  // Usage : Var := isalnum(ch);
000477  000548  // Notes : char specifies the ascii character for the test
000478  000549  //     : 0 : char is not an ascii alphanumeric character.
000479  000550  //     : 1 : char is an ascii alphanumeric character.
000480  000551  //     : Valid range is "ABCD...XYZ", "abcd....wxyz", "0123456789"
000481  000552        
000482  000553  func isprint("char"), 1;    //Returns a 1 if the character is a printible ascii char else returns a 0
000483  000554  // Syntax: isprint("char");
000484  000555  // Usage : Var := isprint(ch);
000485  000556  // Notes : char specifies the ascii character for the test
000486  000557  //     : 0 : char is not a printable ascii character.
000487  000558  //     : 1 : char is a printable ascii character.
000488  000559  //     : Valid range is "0x20...0x7F"
000489  000560        
000490  000561  func isspace("char"), 1;    //Returns a 1 if the character is any one of the space type chars else returns a 0
000491  000562  // Syntax: isspace("char");
000492  000563  // Usage : Var := isspace(ch);
000493  000564  // Notes : char specifies the ascii character for the test
000494  000565  //     : 0 : char is not a space type character.
000495  000566  //     : 1 : char is a space type character.
000496  000567  //     : Valid range is space, formfeed, newline, carriage return, tab, vertical tab
000497  000568        
000498  000569  //unformatted
000499  000570  func iswhite("char"), 1;    //
000500  000571  // Syntax: iswhite("char");
000501  000572  // Usage : Var := iswhite(ch);
000502  000573  // Notes : char specifies the ascii character for the test
000503  000574  //     : 0 : char is not a space or tab character.
000504  000575  //     : 1 : char is not a space or tab character.
000505  000576  //     : Valid range is space or tab
000506  000577        
000507  000578  func toupper("char"), 1; //if character is lower case it returns the upper case equivalent else returns the passed char
000508  000579  // Syntax: toupper("char");
000509  000580  // Usage : Var := toupper(ch);
000510  000581  // Notes : char specifies the ascii character for the test
000511  000582  //     : "ABCD....XYZ" : if character is a lower case letter.
000512  000583  //     : char : if character is not a lower case letter.
000513  000584  //     : Valid range is "abcd....wxyz"
000514  000585        
000515  000586  func tolower("char"), 1; //if character is upper case it returns the lower case equivalent else returns the passed char
000516  000587  // Syntax: tolower("char");
000517  000588  // Usage : Var := tolower(ch);
000518  000589  // Notes : char specifies the ascii character for the test
000519  000590  //     : "abcd....xyz" : if character is an upper case letter.
000520  000591  //     : char : if character is not an upper case letter.
000521  000592  //     : Valid range is "ABCD....WXYZ"
000522  000593        
000523  000594  func LObyte("var"), 1;        //Returns the lower byte (lower 8 bits) of a 16 bit variable.
000524  000595  // Syntax: LObyte(var);
000525  000596  // Usage : myVar := LObyte(myvar2);
000526  000597  // Notes : var specifies the user variable
000527  000598  //     : Returns the lower byte (lower 8 bits) of a 16 bit variable
000528  000599        
000529  000600  func HIbyte("var"), 1;        //Returns the High byte (upper 8 bits) of a 16 bit variable.
000530  000601  // Syntax: HIbyte(var);
000531  000602  // Usage : myVar := HIbyte(myvar2);
000532  000603  // Notes : var specifies the user variable
000533  000604  //     : Returns the high byte (upper 8 bits) of a 16 bit variable
000534  000605        
000535  000606        
000536  000607  func ByteSwap("var"), 1;    //Returns the swapped upper and lower bytes of a 16 bit variable.
000537  000608  // Syntax: ByteSwap(var);
000538  000609  // Usage : myVar := ByteSwap(myvar2);
000539  000610  // Notes : var specifies the user variable
000540  000611  //     : Returns the endian swapped value of a 16 bit variable
000541  000612        
000542  000613        
000543  000614  func NybleSwap("var"), 1;    //Returns the swapped lower bytes nybles, upper byte retained.
000544  000615  // Syntax: NybleSwap(var);
000545  000616  // Usage : myVar := NybleSwap(myvar2);
000546  000617  // Notes : var specifies the user variable
000547  000618  //     : Returns the 16 bit variable with swapped lower nybles
000548  000619        
000549  000620  func putnumXY("xpos", "ypos", "arg1","arg2"), 1;            // print number at the specified position
000550  000621  // Syntax: putnumXY(x, y, format, value);
000551  000622  // Usage : var := putnumXY(100, 100, HEX, val);
000552  000623  // Notes : prints a 16bit number in various formats at the specified XY coordinates.
000553  000624  //     : Format: A constant that specifies the number format
000554  000625  //     : Value : The number to be printed
000555  000626        
000556  000627  func txt_FontBank("flashbank", "address"), 1;               // use a font located in another bank
000557  000628  // Syntax: txt_FontBank(bank, offset);
000558  000629  // Usage : txt_FontBank(FLASHBANK_2, arg2);
000559  000630  // Returns : Current font before the change, or 0 if invalid or bank is protected
000560  000631  // Notes : Sets the current font to a font held in another bank
000561  000632        
000562  000633  //------------------------------------------------------------------//
000563  000634  // 16bit signed Math Functions                                      //
000564  000635  //------------------------------------------------------------------//
000565  000636                                                  //
000566  000637  func ABS("value"), 1;                           // return a positive number
000567  000638  // Syntax: ABS(value);
000568  000639  // Usage : var := ABS(arg);
000569  000640  // Notes : Returns the absolute value of an argument
000570  000641        
000571  000642  func MIN("value1", "value2"), 1;                // return the smaller of 2 numbers
000572  000643  // Syntax: MIN(value1, value2);
000573  000644  // Usage : var := MIN(arg1, arg2);
000574  000645  // Notes : Returns the minimum of 2 arguments
000575  000646        
000576  000647  func MAX("value1", "value2"), 1;                // return the larger of 2 numbers
000577  000648  // Syntax: MAX(value1, value2);
000578  000649  // Usage : var := MAX(arg1, arg2);
000579  000650  // Notes : Returns the maximum of 2 arguments
000580  000651        
000581  000652  func SWAP("&var", "&var"), 0;                   // swap 2 variables, arguments must point to variables
000582  000653  // Syntax: SWAP(&var1, &var2);
000583  000654  // Usage : SWAP(&var1, &var2);
000584  000655  // Notes : Swaps the contents of 2 variables or memory locations
000585  000656        
000586  000657  func SIN("angle"), 1;                           // return SIN of angle
000587  000658  // Syntax: SIN(angle);
000588  000659  // Usage : var := SIN(arg);
000589  000660  // Notes : Returns the sine in radians of an argument in degrees
000590  000661  //       : the returned value range is from 127 to -127. The real
000591  000662  //       : cosine values vary from 1.0 to -1.0 so appropriate
000592  000663  //       : scaling must be done in user code.
000593  000664        
000594  000665  func COS("angle"), 1;                           // return COS of angle
000595  000666  // Syntax: COS(angle);
000596  000667  // Usage : var := COS(arg);
000597  000668  // Notes : Returns the cosine in radians of an argument in degrees
000598  000669  //       : the returned value range is from 127 to -127. The real
000599  000670  //       : cosine values vary from 1.0 to -1.0 so appropriate
000600  000671  //       : scaling must be done in user code.
000601  000672        
000602  000673  func RAND(), 1;                                 // return a pseudo random number
000603  000674  // Syntax: RAND();
000604  000675  // Usage : var := RAND();
000605  000676  // Notes : Returns a random number between 0 and 0xFFFF.
000606  000677  //       : The random number generator must first be seeded
000607  000678  //       : by using the SEED(number) function.
000608  000679        
000609  000680  func RANDVAL("low", "high"), 1;                 // return a ranged pseudo random number
000610  000681  // Syntax: RANDVAL("low", "high");
000611  000682  // Usage : var := RANDVAL(low, high);
000612  000683  // Notes : Returns a random number between low and high limits
000613  000684  //       : such that low <= N < high
000614  000685  //       : The random number generator may first be seeded
000615  000686  //       : by using the SEED(number) function.
000616  000687  //       : RANDVAL is the equivalent of aggregate functions:-
000617  000688  //       :     myvar = ABS( (RAND()%(high-low)+low) );
000618  000689  //       : Note that the lower limit is inclusive, but the upper limit is exclusive.
000619  000690        
000620  000691  func SEED("number"), 0;                         // re-seed the pseudo random number generator
000621  000692  // Syntax: SEED(number);
000622  000693  // Usage : SEED(arg);
000623  000694  // Notes : Seeds the random number generator.
000624  000695        
000625  000696  func SQRT("number"), 1;                         // return square root of a number
000626  000697  // Syntax: SQRT(number);
000627  000698  // Usage : SQRT(arg);
000628  000699  // Notes : Returns the integer square root of a number.
000629  000700        
000630  000701  func OVF(), 1;                                  // returns upper 16bits of 32bit results
000631  000702  // Syntax: OVF();
000632  000703  // Usage : loWord := 0x2710 * 0x2710;           // (10000 * 10000 in hex format)
000633  000704  //       : hiWord := OVF();
000634  000705  // Notes : This function returns the high order 16 bits from certain math and shift functions..
000635  000706        
000636  000707  func CY(), 1;
000637  000708  // Syntax: CY();
000638  000709  // Usage : myvar := 0xFFF8 + 9;                 // result = 1
000639  000710  //       : print(myvar," "CY(),"\n");           // carry = 1
000640  000711  // Notes : This function returns the carry status of an
000641  000712  // unsigned overflow from any 16 or 32bit additions or sutractions.
000642  000713        
000643  000714  func EVE_SP(), 1;
000644  000715  // Syntax: EVE_SP();
000645  000716  // Usage : eg:  print(EVE_SP());
000646  000717  // Notes : Used for debugging to assess the current stack level,
000647  000718  //       : mainly for checking stack leaks, see example EVE_SP.4dg
000648  000719        
000649  000720  func EVE_SSIZE(), 1;
000650  000721  // Syntax: EVE_SSIZE();
000651  000722  // Usage : eg:  print(EVE_SSIZE());
000652  000723  // Notes : Used to get the stack size,
000653  000724  //       : mainly for debugging purposes, EVE_SP.4dg
000654  000725        
000655  000726        
000656  000727  //------------------------------------------------------------------//
000657  000728  //
000658  000729  //------------------------------------------------------------------//
000659  000730  func mem_ArrayOp1("memarray", "count", "op", "value"), 0;                     // single array functions
000660  000731        
000661  000732        
000662  000733  // single word array operations
000663  000734  #CONST
000664  000755  #END
000665  000756        
000666  000757        
000667  000758  func mem_ArrayOp2("memarray1", "memarray2", "count", "op", "value"), 0;         // dual array functions
000668  000759        
000669  000760  // dual word array operations
000670  000761  #CONST
000671  000773  #END
000672  000774        
000673  000775        
000674  000776  func __reserved3(), 0; // do not remove
000675  000777  func __reserved4(), 0; // do not remove
000676  000778        
000677  000779        
000678  000780  //------------------------------------------------------------------//
000679  000781  // unsigned long (32 bit) operations                                //
000680  000782  //------------------------------------------------------------------//
000681  000783        
000682  000784  func uadd_3232("res32", "val1", "val2"), 1;
000683  000785  // Syntax   : cmp_3232(res32, varA, varB);
000684  000786  // Input    : DWORD res32 points to optional result (or zero for compare)
000685  000787  //          : DWORD val1 points to 32bit augend
000686  000788  //          : DWORD val2 points to 32bit addend
000687  000789  // Usage    : var res32[2];
000688  000790  //          : res := cmp_3232(res32, val1, val2);
000689  000791  // Notes    : performs an unsigned addition of 2 x 32bit values
000690  000792  //          : placing the 32bit result in a 2 word array.
000691  000793  // Returns  : returns 1 on 32bit unsigned overflow (carry).
000692  000794  //          ; carry flag is also set on 32bit unsigned overflow
000693  000795  //          ; and can be read with the CY() function.
000694  000796        
000695  000797        
000696  000798  func usub_3232("res32", "val1", "val2"), 1;
000697  000799  // Syntax   : cmp_3232(res32, varA, varB);
000698  000800  // Input    : DWORD res32 points to optional result (or zero for compare)
000699  000801  //          : DWORD val1 points to first 32bit minuend
000700  000802  //          : DWORD val2 points to 32bit subtrahend
000701  000803  // Usage    : var res32[2];
000702  000804  //          : res := cmp_3232(res32, val1, val2);
000703  000805  // Notes    : performs an unsigned subtraction of 2 x 32bit values
000704  000806  //          : placing the 32bit result in a 2 word array.
000705  000807  // Returns  : returns 1 on 32bit unsigned overflow (borrow).
000706  000808  //          ; carry flag is also set on 32bit unsigned underflow
000707  000809  //          ; and can be read with the CY() function.
000708  000810        
000709  000811        
000710  000812  func umul_1616("&res32", "val1", "val2"), 1;
000711  000813  // Syntax   : umul_1616(&res32, varA, varB);
000712  000814  // Input    : DWORD result   points to 32bit result register.
000713  000815  //          : VAR   val1  16bit register or constant
000714  000816  //          : VAR   val2  16bit register or constant
000715  000817  // Usage    : var res32[2];
000716  000818  //          : umul_1616(&res32, myvar, 50000);
000717  000819  // Notes    : performs an unsigned multiply of 2 x 16bit values
000718  000820  //          : placing the 32bit result in a 2 word array.
000719  000821  // Returns  : the pointer to the 32bit result.
000720  000822  //          : carry and overflow are not affected.
000721  000823        
000722  000824        
000723  000825  func udiv_3232("res32", "val1", "val2"), 1;
000724  000826  // Syntax   : udiv_1616(res32, varA, varB);
000725  000827  // Input    : DWORD *result   points to 32bit result register.
000726  000828  //          : DWORD   val1  pointer to 32bit value (dividend)
000727  000829  //          : DWORD   val2  pointer to 32bit value (divisor)
000728  000830  // Usage    : var res32[2];
000729  000831  //          : umul_1616(res32, myvar, 50000);
000730  000832  // Notes    : performs an unsigned division of 2 x 32bit values
000731  000833  //          : placing the 32bit result in a 2 word array.
000732  000834  // Returns  : the pointer to the 32bit result.
000733  000835  //          : carry and overflow are not affected.
000734  000836        
000735  000837        
000736  000838  func ucmp_3232("val1", "val2"), 1;
000737  000839  // Syntax   : cmp_3232(varA, varB);
000738  000840  // Input    : DWORD val1 points to 32bit minuend
000739  000841  //          : DWORD val2 points to 32bit sutrahend
000740  000842  // Usage    : res := cmp_3232(val1, val2);
000741  000843  // Notes    : performs an unsigned comparison of 2 x 32bit values.
000742  000844  //          : The result of the subtraction is returned.
000743  000845  // Returns  : 0  if equal
000744  000846  //          : 1  if val1 > val2
000745  000847  //          : -1 if val1 < val2
000746  000848  //          : This function does not affect the carry flag.
000747  000849        
000748  000850  func __reserved5(), 0; // do not remove
000749  000851  func __reserved6(), 0; // do not remove
000750  000852        
000751  000853  //------------------------------------------------------------------//
000752  000854  // Floating point operations                                        //
000753  000855  // Note that source arguments may be a pointer to a float variable, //
000754  000856  // or a numeric text string.                                        //
000755  000857  // A string argument is converted at run-time by calling            //
000756  000858  // flt_Val for a string argument.                                   //
000757  000859  // Note that a float variable is a 2 word array, eg var myfloat[2]; //
000758  000860  //------------------------------------------------------------------//
000759  000861  func flt_VAL("fresult", "numstring"), 1;
000760  000862  // Syntax   : flt_VAL(float1, mystring);
000761  000863  // Input    : FLOAT  fresult  points to float result register
000762  000864  //          : numstring       a string constant or string variable
000763  000865  //          : that is holds valid floating point number.
000764  000866  // Usage    : var float1[2];
000765  000867  //          : flt_VAL(float1, "1.0594631");
000766  000868  // Notes    : The string argument can be a string constant, a pointer
000767  000869  //          : to a string variable, or a pointer to a data statement.
000768  000870  //          : The string may be a float, or a hex or binary integer value (no decimal point allowed).
000769  000871  //          : For hex or binary, the number is preceeded with 0x or 0b
000770  000872  // Returns  : the pointer to the float result.
000771  000873  //          : carry and overflow are not affected.
000772  000874        
000773  000875        
000774  000876  func flt_ITOF("fresult", "var16"), 1;
000775  000877  // Syntax   : flt_ITOF(resf, intval);
000776  000878  // Input    : FLOAT  fresult  points to float result register
000777  000879  //          : var16           a 16bit signed integer variable or string constant
000778  000880  // Usage    : var float1[2];
000779  000881  //          : var myvar := 30000;
000780  000882  //          : flt_VAL(float1, myvar);
000781  000883  // Notes    : Converts a 16bit signed integer value to a signed floating point number.
000782  000884  // Returns  : the pointer to the float result.
000783  000885        
000784  000886        
000785  000887  func flt_UITOF("fresult", "uvar16"), 1;
000786  000888  // Syntax   : flt_ITOF(resf, intval);
000787  000889  // Input    : FLOAT  fresult  points to float result register
000788  000890  //          : var16           a 16bit integer variable or constant (treated as unsigned)
000789  000891  // Usage    : var float1[2];
000790  000892  //          : var myuvar := 30000;
000791  000893  //          : flt_UITOF(float1, myuvar);
000792  000894  // Notes    : Converts a 16bit unsigned integer value to a positive floating point number.
000793  000895  // Returns  : the pointer to the float result.
000794  000896        
000795  000897  func flt_LTOF("fresult", "var32"), 1;
000796  000898  // Syntax   : flt_LTOF(resf, var32);
000797  000899  // Input    : FLOAT  fresult  points to float result register
000798  000900  //          : var32           points to a 32bit (long) signed variable or string constant
000799  000901  // Usage    : var float1[2];
000800  000902  //          : var mylong[2];
000801  000903  //          : flt_VAL(float1, mylong);
000802  000904  // Notes    : Converts a 32bit signed integer value to a signed floating point number.
000803  000905  // Returns  : the pointer to the float result.
000804  000906        
000805  000907        
000806  000908  func flt_ULTOF("fresult", "uvar32"), 1;
000807  000909  // Syntax   : flt_ITOF(resf, uvar32);
000808  000910  // Input    : FLOAT  fresult  points to float result register
000809  000911  //          : var32           points to a 32bit (unsigned long) unsigned variable or string constant
000810  000912  // Usage    : var float1[2];
000811  000913  //          : var myulong[2];
000812  000914  //          : flt_VAL(float1, myulong);
000813  000915  // Notes    : Converts a 32bit unsigned integer value to a positive floating point number.
000814  000916  // Returns  : the pointer to the float result.
000815  000917        
000816  000918        
000817  000919  func flt_PRINT("fvalue", "formatstring"), 1;
000818  000920  // Syntax   : flt_PRINT(resf, formatstr);
000819  000921  // Input    : FLOAT  fresult  points to float result register
000820  000922  //          : formatstring    zero, null string, of valid format string
000821  000923  // Usage    : var float1[2];
000822  000924  //          : flt_PRINT(float1, "");
000823  000925  // Notes    : The string argument can be a string constant, a pointer
000824  000926  //          : to a string variable, or a pointer to a data statement.
000825  000927  //          : If it is zero or an empty string, the number is
000826  000928  //          : automatically formatted for the best presentation.
000827  000929  //          : The format string is similar to the C language, but only
000828  000930  //          : a single '%' may be used to print a single variable.
000829  000931  // Returns  : zero if success.
000830  000932        
000831  000933        
000832  000934  func flt_ABS("result", "floatval"), 1;
000833  000935  // Syntax   : flt_ABS(&result, &fval);
000834  000936  // Input    : FLOAT  result   points to float result register
000835  000937  //          : numstring       a string that is a valid number
000836  000938  // Usage    : var float1[2];
000837  000939  //          : flt_VAL(float1, float1); // convert float1 to its ABS value
000838  000940  // Returns  : the pointer to the float result.
000839  000941  //          : carry and overflow are not affected.
000840  000942        
000841  000943        
000842  000944  func flt_ACOS("result", "floatval"), 1;
000843  000945  // Syntax   : flt_ACOS(result, fval);
000844  000946  // Input    : FLOAT  result (in radians) points to float result register
000845  000947  //          : FLOAT  floatval points to the float value to get arccos of
000846  000948  // Usage    : var float1[2];
000847  000949  //          : flt_ACOS(result, float1); // get the arccos of float1
000848  000950  // Notes    : the result is in radians.
000849  000951  // Returns  : the pointer to the float result.
000850  000952  //          : carry and overflow are not affected.
000851  000953        
000852  000954        
000853  000955  func flt_ASIN("result", "floatval"), 1;
000854  000956  // Syntax   : flt_ASIN(result, fval);
000855  000957  // Input    : FLOAT  result (in radians) points to float result register
000856  000958  //          : FLOAT  floatval points to the float value to get arcsin of
000857  000959  // Usage    : var float1[2];
000858  000960  //          : flt_ASIN(result, float1); // get the Arcsin of float1
000859  000961  // Notes    : the result is in radians.
000860  000962  // Returns  : the pointer to the float result.
000861  000963  //          : carry and overflow are not affected.
000862  000964        
000863  000965        
000864  000966  func flt_ATAN("result", "floatval"), 1;
000865  000967  // Syntax   : flt_ATAN(result, fval);
000866  000968  // Input    : FLOAT  result (in radians) points to float result register
000867  000969  //          : FLOAT  floatval points to the float value to get arctan of
000868  000970  // Usage    : var float1[2];
000869  000971  //          : flt_ATAN(result, float1); // get the Arctan of float1
000870  000972  // Notes    : the result is in radians.
000871  000973  // Returns  : the pointer to the float result.
000872  000974  //          : carry and overflow are not affected.
000873  000975        
000874  000976        
000875  000977  func flt_COS("result", "floatval"), 1;
000876  000978  // Syntax   : flt_COS(result, fval);
000877  000979  // Input    : FLOAT  result   points to float result register
000878  000980  //          : FLOAT  floatval (in radians) points to the float value to get Cos of
000879  000981  // Usage    : var float1[2];
000880  000982  //          : flt_COS(result, float1); // get the Cosine of float1
000881  000983  // Notes    : the result is in radians.
000882  000984  // Returns  : the pointer to the float result.
000883  000985  //          : carry and overflow are not affected.
000884  000986        
000885  000987        
000886  000988  func flt_EXP("result", "floatval"), 1;
000887  000989  // Syntax   : flt_EXP(result, fval);
000888  000990  // Input    : FLOAT  result   points to float result register
000889  000991  //          : FLOAT  floatval points to the float value to get Exponent of
000890  000992  // Usage    : var float1[2];
000891  000993  //          : flt_EXP(result, float1); // get the Exponent of float1
000892  000994  // Returns  : the pointer to the float result.
000893  000995  //          : carry and overflow are not affected.
000894  000996        
000895  000997        
000896  000998  func flt_CEIL("result", "floatval"), 1;
000897  000999  // Syntax   : flt_CEIL(result, floatval);
000898  001000  // Input    : FLOAT  floatval points to the float value to integerize up
000899  001001  // Usage    : var float1[2];
000900  001002  //          : n := flt_INT(float1, float1); // round value up to the integer value
000901  001003  // Notes    : Removes fractional part, rounding up correctly.
000902  001004  // Returns  : the pointer to the float result.
000903  001005  //          : carry and overflow are not affected.
000904  001006        
000905  001007        
000906  001008  func flt_FLOOR("result", "floatval"), 1;
000907  001009  // Syntax   : flt_FLOOR(result, floatval);
000908  001010  // Input    : FLOAT  floatval points to the float value to integerize down
000909  001011  // Usage    : var float1[2];
000910  001012  //          : n := flt_INT(float1, float1); // round value down to the integer value
000911  001013  // Notes    : Removes fractional part, rounding down correctly.
000912  001014  // Returns  : the pointer to the float result.
000913  001015  //          : carry and overflow are not affected.
000914  001016        
000915  001017        
000916  001018  func flt_SIN("result", "floatval"), 1;
000917  001019  // Syntax   : flt_SIN(result, fval);
000918  001020  // Input    : FLOAT  result   points to float result register
000919  001021  //          : FLOAT  floatval (in radians) points to the float value to get Sine of
000920  001022  // Usage    : var float1[2];
000921  001023  //          : flt_SIN(result, float1); // get the Sin of float1
000922  001024  // Notes    : the result is in radians.
000923  001025  // Returns  : the pointer to the float result.
000924  001026  //          : carry and overflow are not affected.
000925  001027        
000926  001028        
000927  001029  func flt_LOG("result", "floatval"), 1;
000928  001030  // Syntax   : flt_LOG(&result, &fval);
000929  001031  // Input    : FLOAT  result   points to float result register
000930  001032  //          : FLOAT  floatval points to the float value to get Log of
000931  001033  // Usage    : var float1[2];
000932  001034  //          : flt_LOG(result, float1); // get the natural Log of float1
000933  001035  // Returns  : the pointer to the float result.
000934  001036  //          : carry and overflow are not affected.
000935  001037        
000936  001038        
000937  001039  func flt_SQR("result", "floatval"), 1;
000938  001040  // Syntax   : flt_SQR(result, fval);
000939  001041  // Input    : FLOAT  result   points to float result register
000940  001042  //          : FLOAT  floatval points to the float value to get Log of
000941  001043  // Usage    : var float1[2];
000942  001044  //          : flt_SQR(result, float1); // get the square root of float1
000943  001045  // Returns  : the pointer to the float result, or zero if number was negative.
000944  001046  //          : carry and overflow are not affected.
000945  001047        
000946  001048        
000947  001049  func flt_TAN("result", "floatval"), 1;
000948  001050  // Syntax   : flt_TAN(result, fval);
000949  001051  // Input    : FLOAT  result   points to float result register
000950  001052  //          : FLOAT  floatval (in radians) points to the float value to get Tangent of
000951  001053  // Usage    : var float1[2];
000952  001054  //          : flt_TAN(result, float1); // get the Tangent of float1
000953  001055  // Returns  : the pointer to the float result.
000954  001056  //          : carry and overflow are not affected.
000955  001057        
000956  001058        
000957  001059  func flt_POW("result", "floatx", "floaty"), 1;
000958  001060  // Syntax   : flt_POW(result, fval1, fval2);
000959  001061  // Input    : FLOAT  result   points to float result register
000960  001062  //          : FLOAT  floatx   points to the float value to raise
000961  001063  //          : FLOAT  floaty   points to the float value for power
000962  001064  // Usage    : flt_POW(result, floatx, floaty); // raise x to power y
000963  001065  // Returns  : the pointer to the float result, or zero if error occurs.
000964  001066  //          : carry and overflow are not affected.
000965  001067        
000966  001068        
000967  001069  func flt_ADD("result", "floatA", "floatB"), 1;
000968  001070  // Syntax   : flt_ADD(result, floatA, floatB);
000969  001071  // Input    : FLOAT  result   points to float result register
000970  001072  //          : FLOAT  floatval points to the float value A
000971  001073  //          : FLOAT  floatval points to the float value B
000972  001074  // Usage    : flt_ADD(result, floatx, floaty); // add B to A
000973  001075  // Returns  : the pointer to the float result, or zero if error occurs.
000974  001076  //          : carry and overflow are not affected.
000975  001077        
000976  001078        
000977  001079  func flt_SUB("&result", "&floatA", "&floatB"), 1;
000978  001080  // Syntax   : flt_SUB(result, floatA, floatB);
000979  001081  // Input    : FLOAT  result   points to float result register
000980  001082  //          : FLOAT  floatval points to the float value A
000981  001083  //          : FLOAT  floatval points to the float value B
000982  001084  // Usage    : flt_SUB(&result, &floatx, &floaty); // subtract B from A
000983  001085  // Returns  : the pointer to the float result, or zero if error occurs.
000984  001086  //          : carry and overflow are not affected.
000985  001087        
000986  001088        
000987  001089  func flt_MUL("result", "floatA", "floatB"), 1;
000988  001090  // Syntax   : flt_MUL(result, floatA, floatB);
000989  001091  // Input    : FLOAT  result   points to float result register
000990  001092  //          : FLOAT  floatval points to the float value A
000991  001093  //          : FLOAT  floatval points to the float value B
000992  001094  // Usage    : flt_MUL(result, floatA, floatB); // multiply A by B
000993  001095  // Returns  : the pointer to the float result, or zero if error occurs.
000994  001096  //          : carry and overflow are not affected.
000995  001097        
000996  001098        
000997  001099  func flt_DIV("result", "floatA", "floatB"), 1;
000998  001100  // Syntax   : flt_DIV(result, floatA, floatB);
000999  001101  // Input    : FLOAT  result   points to float result register
001000  001102  //          : FLOAT  floatval points to the float value A
001001  001103  //          : FLOAT  floatval points to the float value B
001002  001104  // Usage    : flt_DIV(result, floatA, floatB); // divide A by B
001003  001105  // Returns  : the pointer to the float result, or zero if error occurs.
001004  001106  //          : carry and overflow are not affected.
001005  001107        
001006  001108        
001007  001109  //------------------------------------------------------------------//
001008  001110  // The following float functions all return integer values.
001009  001111  //------------------------------------------------------------------//
001010  001112  func flt_EQ("floatA", "floatB"), 1;
001011  001113  // Syntax   : flt_EQ(floatA, floatB);
001012  001114  // Input    : FLOAT  floatval points to the float value A
001013  001115  //          : FLOAT  floatval points to the float value B
001014  001116  // Usage    : if (flt_EQ(floatA, floatB)) // compare A to B, true if A == B
001015  001117  // Returns  : True if numbers are equal, false otherwise.
001016  001118        
001017  001119        
001018  001120  func flt_NE("floatA", "floatB"), 1;
001019  001121  // Syntax   : flt_NE(floatA, floatB);
001020  001122  // Input    : FLOAT  floatval points to the float value A
001021  001123  //          : FLOAT  floatval points to the float value B
001022  001124  // Usage    : if (flt_NE(floatA, floatB)) // compare A to B, true if A != B
001023  001125  // Returns  : True if numbers are not equal, false otherwise.
001024  001126        
001025  001127        
001026  001128        
001027  001129  func flt_GT("floatA", "floatB"), 1;
001028  001130  // Syntax   : flt_GT(floatA, floatB);
001029  001131  // Input    : FLOAT  floatval points to the float value A
001030  001132  //          : FLOAT  floatval points to the float value B
001031  001133  // Usage    : if (flt_GT(floatA, floatB)) // compare A to B, true if A > B
001032  001134  // Returns  : True if A > B, false otherwise.
001033  001135        
001034  001136        
001035  001137  func flt_GE("floatA", "floatB"), 1;
001036  001138  // Syntax   : flt_GE(floatA, floatB);
001037  001139  // Input    : FLOAT  floatval points to the float value A
001038  001140  //          : FLOAT  floatval points to the float value B
001039  001141  // Usage    : if (flt_GE(floatA, floatB)) // compare A to B, true if A >= B
001040  001142  // Returns  : True if A >= B, false otherwise.
001041  001143        
001042  001144        
001043  001145  func flt_LT("floatA", "floatB"), 1;
001044  001146  // Syntax   : flt_LT(floatA, floatB);
001045  001147  // Input    : FLOAT  floatval points to the float value A
001046  001148  //          : FLOAT  floatval points to the float value B
001047  001149  // Usage    : if (flt_LT(floatA, floatB)) // compare A to B, true if A < B
001048  001150  // Returns  : True if A < B, false otherwise.
001049  001151        
001050  001152        
001051  001153  func flt_LE("floatA", "floatB"), 1;
001052  001154  // Syntax   : flt_LE(floatA, floatB);
001053  001155  // Input    : FLOAT  floatval points to the float value A
001054  001156  //          : FLOAT  floatval points to the float value B
001055  001157  // Usage    : if (flt_LE(floatA, floatB )) // compare A to B, true if A <= B
001056  001158  // Returns  : True if A <= B, false otherwise.
001057  001159        
001058  001160        
001059  001161  func flt_SGN("floatval"), 1;
001060  001162  // Syntax   : flt_SGN(fval);
001061  001163  // Input    : FLOAT  floatval   points to the float value examine sign
001062  001164  // Usage    : var float1[2];
001063  001165  //          : n := flt_SGN(float1); // return -1 if float number negative
001064  001166  // Notes    : returns 0 if sign is positive or zero.
001065  001167  // Returns  : returns 16bit integer -1 if float sign is negative, or zero if positive.
001066  001168  //          : carry and overflow are not affected.
001067  001169        
001068  001170        
001069  001171  func flt_FTOI("floatvar"), 1;
001070  001172  // Syntax   : flt_FTOI(myfloat);
001071  001173  // Input    : FLOAT  fresult  points to float result register
001072  001174  // Usage    : var float1[2];
001073  001175  //          : myvar := flt_VAL(&float1, myvar);
001074  001176  // Notes    : Converts a floating point number to a 16bit integer.
001075  001177  //          : The floating point number is rounded up or down accordingly.
001076  001178  // Returns  : the integer value of the float.
001077  001179        
001078  001180  func flt_PRINTxy("xpos", "ypos", "fvalue", "formatstring"), 1;
001079  001181  // Syntax   : flt_PRINT(x, y, resf, formatstr);
001080  001182  // Input    : FLOAT  fresult  points to float result register
001081  001183  //          : formatstring    zero, null string, of valid format string
001082  001184  // Usage    : var float1[2];
001083  001185  //          : flt_PRINT(float1, "");
001084  001186  // Notes    : The string argument can be a string constant, a pointer
001085  001187  //          : to a string variable, or a pointer to a data statement.
001086  001188  //          : If it is zero or an empty string, the number is
001087  001189  //          : automatically formatted for the best presentation.
001088  001190  //          : The format string is similar to the C language, but only
001089  001191  //          : a single '%' may be used to print a single variable.
001090  001192  // Returns  : zero if success.
001091  001193        
001092  001194  func __reserved9(), 0; // do not remove
001093  001195  func __reserved10(), 0; // do not remove
001094  001196        
001095  001197  //------------------------------------------------------------------//
001096  001198  //------------------------------------------------------------------//
001097  001199  //------------------------------------------------------------------//
001098  001200  //------------------------------------------------------------------//
001099  001201  //------------------------------------------------------------------//
001100  001202  func pin_Set("mode", "pin"), 1;            // set pin to required mode
001101  001203  // Syntax: pin_Set(mode, pin);
001102  001204  // Usage : pin_Set(PIN_OUT,);
001103  001205  // Notes : Sets the selected pin to the desired mode. Refer to the manual
001104  001206  //       : for pin function compatitblilites.
001105  001207  //       : returns true if the pin number and mode is legal (usually ignored)
001106  001208  //       :    available pin modes
001107  001209  //       :    PIN_INP                 0        // pin is input, no pullup or pulldown
001108  001210  //       :    PIN_INP_HI              1        // pin is input with pullup to Vcc
001109  001211  //       :    PIN_INP_LO              2        // pin is input with pulldown to Gnd
001110  001212  //       :    PIN_OUT                 3        // pin is output
001111  001213  //       :    PIN_OUT_OD              4        // pin is output with open drain
001112  001214  //       :    PIN_AN                  5        // pin is analogue (PA0 to PA3 only)
001113  001215  //       :    PIN_ANAVG               6        // pin is analogue (PA0 to PA3 only), averaged - 16 samples
001114  001216  //       :
001115  001217        
001116  001218  func pin_HI("pin"), 1;                    // set pin to logic '1'
001117  001219  // Syntax: pin_HI(pin);
001118  001220  // Usage : pin_HI(PA4);        // make PA4 HI level
001119  001221  // Notes : Outputs a logic "High" to the pin latch
001120  001222  //       : The pin is automatically made an output.
001121  001223  //       : pullup, pulldown, and change notification will be disable for the selected pin.
001122  001224  //       : returns true if the pin number is legal (usually ignored)
001123  001225  //       :
001124  001226        
001125  001227  func pin_LO("pin"), 1;                    // set pin to logic '0'
001126  001228  // Syntax: pin_LO(pin);
001127  001229  // Usage : pin_LO(PA3);
001128  001230  // Notes : Outputs a logic "Low" to the pin latch
001129  001231  //       : The pin is automatically made an output.
001130  001232  //       : pullup, pulldown, and change notification will be disable for the selected pins.
001131  001233  //       : returns true if the pin number is legal (usually ignored)
001132  001234  //       :
001133  001235        
001134  001236  func pin_Val("pin", "value"), 0;                    // set pin to to state of variable
001135  001237  // Syntax: pin_Var(pin, value);
001136  001238  // Usage : pin_Var(IO3, myvar);
001137  001239  // Notes : Outputs a logic state on a pin depending on the value of bit 0 of a variable
001138  001240  //       : The pin is automatically made an output.
001139  001241  //       : pullup, pulldown, and change notification will be disable for the selected pins.
001140  001242  //       : returns true if the pin number is legal (usually ignored)
001141  001243        
001142  001244  func pin_Read("pin"), 1;                // read pin, logic or analogue
001143  001245  // Syntax: pin_Read(PA0);
001144  001246  // Usage : arg1 := pin_Read(arg2);
001145  001247  // Notes : Read a pin in various ways. If the pin is
001146  001248  //       : set to an input, read the state of the input pin.
001147  001249  //       : If set to an output, read the state of the output latch.
001148  001250  //       : If set to analogue, read the 12 bit analogue value.
001149  001251        
001150  001252  func bus_Read(), 1;
001151  001253  // Syntax: bus_Read();
001152  001254  // Usage : arg1 := pin_ReadBus();
001153  001255  // Notes : Read the 16 bit port regardless of pin configurations.
001154  001256  //       : If a pin is configured as input or analogue, the pin is read directly as
001155  001257  //       : if it were a digital input. If a pin is configured as an output, the pin
001156  001258  //       : is also read directly, giving the output latch state.
001157  001259  //       : Bit 0 coresponds to PA0 through to bit15 which coresponds to PA15
001158  001260  //       : (Refer to 'port bit position masks')
001159  001261  //Returns: Returns the 16 bit value of the bus.
001160  001262        
001161  001263  func bus_SetPins("value"), 0;
001162  001264  // Syntax: bus_SetPins(value);
001163  001265  // Usage : arg1 := bus_SetPins(15); // set PA0 to PA3 to output bits, making them HI
001164  001266  // Notes : Any '1' bits in "value" set the coresponding port pin to an output
001165  001267  //       : and forces its state to a '1'. The state of its previous open drain
001166  001268  //       : configuration is not altered. Any zero bits in "value" will not affect the pin.
001167  001269  //       : pullup, pulldown, and change notification will be disable for the selected pins.
001168  001270  //       : Bit 0 coresponds to PA0 through to bit13 which coresponds to PA13
001169  001271        
001170  001272  func bus_ClearPins("value"), 0;
001171  001273  // Syntax: bus_ClearPins(value);
001172  001274  // Usage : bus_ClearPins(0x03F0); // set PA0 to PA5 to output bits, making them LO
001173  001275  // Notes : Any '1' bits in "value" set the coresponding port pin to an output
001174  001276  //       : and forces its state to a '0. The state of its previous open drain
001175  001277  //       : configuration is not altered. Any zero bits in "value" will not affect the pin.
001176  001278  //       : pullup, pulldown, and change notification will be disable for the selected pins.
001177  001279  //       : Bit 0 coresponds to PA0 through to bit13 which coresponds to PA13
001178  001280        
001179  001281  func bus_SetChangeInterrupt("function", "portmask"), 1;
001180  001282  // Syntax: bus_SetChangeInterrupt(value);
001181  001283  // Usage : bus_SetChangeInterrupt(scanKeypad, 0x00F0); // set PA4 to PA7 to interrupt on change
001182  001284  // Notes : Any '1' bits in "portmask" marks that pin to generate an interrupt on change.
001183  001285  //       : A level change on that pin will cause "function" to be executed. If "function" is
001184  001286  //       : zero, the display may be put into sleep mode, and any change will cause a wakeup reset.
001185  001287  //       : Wakeup will always re-start code running in FLASHBANK_0
001186  001288  //       : Bit 0 coresponds to PA0 through to bit15 which coresponds to PA15
001187  001289  //       : (Refer to 'port bit position masks')
001188  001290  //       : Once armed, "function" will only be executed once, it is necessary to
001189  001291  //       : re-arm for any further events.
001190  001292  //Returns: Return the current state of the pins that are selected in "portmask"
001191  001293  //       : This can be saved and later used in "function" to see which pin(s) actually changed.
001192  001294        
001193  001295  func bus_Write8("var"), 0;
001194  001296  // Syntax: bus_Write8(var);
001195  001297  // Usage : bus_Write8(arg1);
001196  001298  // Notes : The lower 8 bits of arg1 are placed on the BUS, then, after
001197  001299  //       : a settling delay of approx 50nsec, the BUS_WR(PA2) pin is strobed
001198  001300  //       : LO for approx 50nsec then set back HI.
001199  001301  //       : The upper 8 bits of arg1 are ignored.
001200  001302  //       : NB:- the BUS_WR(PA2) pin must be preset to the desired output state
001201  001303  //       : as must the bus pins to ensure BUS write integrity.
001202  001304  //       :
001203  001305  //       : BUS_0 is PA4
001204  001306  //       : BUS_1 is PA5
001205  001307  //       : BUS_2 is PA6
001206  001308  //       : BUS_3 is PA7
001207  001309  //       : BUS_4 is PA8
001208  001310  //       : BUS_5 is PA9
001209  001311  //       : BUS_6 is PA10
001210  001312  //       : BUS_7 is PA11
001211  001313        
001212  001314  func bus_Read8(), 1;
001213  001315  // Syntax: bus_Read();
001214  001316  // Usage : arg1 := bus_Read8();
001215  001317  // Notes : The BUS_RD(PA3) pin set to LO, then, after a settling delay
001216  001318  //       : of approx 50nsec, the BUS is read into the lower 8 bits of arg
001217  001319  //       : (the upper 8 bits being set to 0)
001218  001320  //       : the BUS_RD(PA3) pin is then set back to a HI level.
001219  001321  //       : NB:- the BUS_RD(PA3) pin must be preset to the desired output state
001220  001322  //       : as must the bus pins to ensure BUS read integrity.
001221  001323  //       :
001222  001324  //       : BUS_0 is PA4
001223  001325  //       : BUS_1 is PA5
001224  001326  //       : BUS_2 is PA6
001225  001327  //       : BUS_3 is PA7
001226  001328  //       : BUS_4 is PA8
001227  001329  //       : BUS_5 is PA9
001228  001330  //       : BUS_6 is PA10
001229  001331  //       : BUS_7 is PA11
001230  001332        
001231  001333  func __reserved13(), 0; // do not remove
001232  001334  func __reserved14(), 0; // do not remove
001233  001335  //------------------------------------------------------------------//
001234  001336  // Pin related constants                                            //
001235  001337  //------------------------------------------------------------------//
001236  001338        
001237  001339  // pin_Set(...) pin modes
001238  001340  #CONST
001239  001348  #END
001240  001349        
001241  001350        
001242  001351  // pin name             constant    connector H1 I/O Pin referencesnumbers
001243  001352  #CONST
001244  001372  #END
001245  001373        
001246  001374  // bit position masks
001247  001375  #CONST
001248  001392  #END
001249  001393        
001250  001394        
001251  001395        
001252  001396  //------------------------------------------------------------------//
001253  001397  //   Graphics Functions
001254  001398  //------------------------------------------------------------------//
001255  001399  func gfx_Set("mode", "value"), 0;            // set various graphics functions
001256  001400  // Syntax: gfx_Set(mode, value);
001257  001401  // Usage : gfx_Set(arg1, arg2);
001258  001402  // Notes : Sets various graphics parameters used by other functions
001259  001403  //       : This allows the features to be set programatically with a
001260  001404  //       : single function call.It is strongly recommended to use the
001261  001405  //       : pre-defined constants rather than the mode numbers.
001262  001406  //       : NB:- Although it is often required to be able to set graphics
001263  001407  //       : functions with a single function call for graphics engine
001264  001408  //       : related functions, there is a complete set of single parameter
001265  001409  //       : shortcut functions that have exactly the same function as
001266  001410  //       : each of the gfx_Set modes and saves 1 parameter / uses less memory
001267  001411  //       :
001268  001412  //       : mode = PEN_SIZE (mode 16)
001269  001413  //       : gfx_Set(PEN_SIZE, value);
001270  001414  //       : value = SOLID (value 0) rectangle and circle objects are solid
001271  001415  //       : value = OUTLINE (value 1) rectangle and circle objects are outlines
001272  001416  //       : Sets the mode of the Pen used by most graphics objects
001273  001417  //       :
001274  001418  //       : mode = BACKGROUND_COLOUR (mode 17)
001275  001419  //       : gfx_Set(BACKGROUND_COLOUR, value);
001276  001420  //       : value = 0 to 0xFFFF, Black to White
001277  001421  //       : Sets the Background colour of the screen
001278  001422  //       :
001279  001423  //       : mode = OBJECT_COLOUR (mode 18)
001280  001424  //       : gfx_Set(OBJECT_COLOUR, value);
001281  001425  //       : value = 0 to 0xFFFF, Black to White
001282  001426  //       : Sets the Object colour used in various functions
001283  001427  //       : LineTo(,,); LineRel(,,); BoxTo(,,); Dot(); etc.
001284  001428  //       :
001285  001429  //       : mode = CLIPPING (mode 19)
001286  001430  //       : gfx_Set(CLIPPING, value);
001287  001431  //       : value = OFF (value 0) Clipping disabled
001288  001432  //       : value = ON (value 1) Clipping enabled
001289  001433  //       : Enables/Disables the Clipping feature
001290  001434  //       :
001291  001435  //       : mode = TRANSPARENT_COLOUR (mode 20) : Image or Animation Transparency Colour.
001292  001436  //       : gfx_Set(TRANSPARENT_COLOUR, value);
001293  001437  //       : value = 0 to 0xFFFF Black to White
001294  001438  //       : Sets Bitmap, Image or Animation Transparency Colour.
001295  001439  //       : NB not implemented
001296  001440  //       :
001297  001441  //       : mode = TRANSPARENCY (mode 21) : Bitmap/Image/Animation Transparency
001298  001442  //       : gfx_Set(5, value);
001299  001443  //       : value = OFF (value 0) Transparency disabled
001300  001444  //       : value = ON (value 1) Transparency enabled
001301  001445  //       : Enables/Disables the Transparency feature
001302  001446  //       : NB not implemented
001303  001447  //       :
001304  001448  //       : mode = FRAME_DELAY (mode 22) : Inter-Frame Delay
001305  001449  //       : gfx_Set(FRAME_DELAY, value);
001306  001450  //       : value = 0 to 65535 ms
001307  001451  //       : Sets the Video/Animation clip inter-frame delay. This setting will
001308  001452  //       : over-ride the embedded frame delay of the clip. After the event,
001309  001453  //       : the setting will auto disable and if further inter-frame delays need
001310  001454  //       : overriding the setting must be re-issued.
001311  001455  //       :
001312  001456  //       : mode = SCREEN_MODE (mode 23) : Set required screen behaviour
001313  001457  //       : gfx_Set(SCREEN_MODE, value);
001314  001458  //       : value = LANDSCAPE   (value 0)
001315  001459  //       : value = LANDSCAPE_R (value 1)
001316  001460  //       : value = PORTRAIT    (value 2)
001317  001461  //       : value = PORTRAIT_R  (value 3)
001318  001462  //       :
001319  001463  //       : mode = OUTLINE_COLOUR (mode 24) : Outline Colour
001320  001464  //       : gfx_Set(OUTLINE_COLOUR, value);
001321  001465  //       : value = 1 to 0xFFFF, if 0, featre is OFF
001322  001466  //       : Sets the filled Rectangle or Circle objects outline colour
001323  001467  //       : If outline colour, is 0, OUTLINE_COLOUR feature is disabled
001324  001468  //       : gfx_Set(OUTLINE_COLOUR, OFF); may be used for this
001325  001469  //       :
001326  001470  //       : Only supports variable contrast for uOLED Modules
001327  001471  //       : mode = CONTRAST (mode 25) : Contrast
001328  001472  //       : gfx_Set(CONTRAST, value);
001329  001473  //       : value = 0 to 9, 0=off, 1=lowest, 8=highest contrast
001330  001474  //       : when contrast=0, display is placed in low power mode.
001331  001475  //       : This function should be called with contrast=0 when
001332  001476  //       : powering down the module.
001333  001477  //       :
001334  001478  //       : mode = LINE_PATTERN (mode 26) : Line Pattern
001335  001479  //       : gfx_Set(LINE_PATTERN, value);
001336  001480  //       : gfx_Set(LINE_PATTERN, 0b1111000011110000); // draw dotted line
001337  001481  //       : gfx_Set(LINE_PATTERN, OFF); // line patterning OFF
001338  001482  //       : a value of 0 turns the feature off
001339  001483  //       :
001340  001484  //       : mode = COLOUR_MODE (mode 27) : 8/16 bit colour mode
001341  001485  //       : gfx_Set(COLOUR_MODE , COLOUR16);   // set 16bit colour mode
001342  001486  //       : gfx_Set(COLOUR_MODE , COLOUR8);   // set 8bit colour mode
001343  001487  //       : NB not implemented, default is COLOUR16
001344  001488  //       :
001345  001489  //       : mode = BEVEL_WIDTH (mode 28) : set button and slider bevel width
001346  001490  //       : gfx_Set(BEVEL_WIDTH , 5);   // set bevel lines to 5 pixels wide
001347  001491  //       : sets the button and slider objects bevel width
001348  001492  //       :
001349  001493  //       : mode = BEVEL_SHADOW (mode 29) : set bevel shadowing depth for buttons and sliders
001350  001494  //       : gfx_Set(BEVEL_SHADOW , 5);
001351  001495  //       : sets the button and slider objects darken and lighten depth for the bevel colour
001352  001496  //       :
001353  001497  //       : mode = X_ORIGIN (mode 29) : set x offset for screen
001354  001498  //       : gfx_Set(X_ORIGIN , 25);  // object are offset 25 pixels from LHS
001355  001499  //       : sets the origin of drawn objects to a position other than 0,0
001356  001500  //       :
001357  001501  //       : mode = Y_ORIGIN (mode 29) : set y offset for screen
001358  001502  //       : gfx_Set(Y_ORIGIN , 30);  // object are offset 30 pixels from TOP
001359  001503  //       : sets the origin of drawn objects to a position other than 0,0
001360  001504        
001361  001505  //------------------------------------------------------------------------------
001362  001506  //gfx_Set() related constants
001363  001507  //------------------------------------------------------------------------------
001364  001508  #CONST
001365  001525  #END
001366  001526        
001367  001527        
001368  001528  func gfx_Cls(), 0;                    // clear the screen
001369  001529  // Syntax: gfx_Cls();
001370  001530  // Usage : gfx_Cls();
001371  001531  // Notes : Clears the screen with current background colour
001372  001532        
001373  001533  func gfx_MoveTo("x", "y"), 0;                // set glb_X1 and glb_Y1 to required co-ordinate
001374  001534  // Syntax: gfx_MoveTo(x, y);
001375  001535  // Usage : gfx_MoveTo(arg1, arg2);
001376  001536  // Notes : Moves the origin to a new x,y position
001377  001537        
001378  001538  func gfx_MoveRel("x", "y"), 0;                // set glb_X1 and glb_Y1 to new relative offset
001379  001539  // Syntax: gfx_MoveRel(x, y);
001380  001540  // Usage : gfx_MoveRel(arg1, arg2);
001381  001541  // Notes : Moves the origin to a new x,y position
001382  001542  //       : relative to the current origing
001383  001543        
001384  001544  func gfx_LineTo("x1", "y1"), 0;                     // draw line from current origin to new point
001385  001545  // Syntax: gfx_LineTo(x1, y1);
001386  001546  // Usage : gfx_LineTo(arg1, arg2);
001387  001547  // Notes : Draws a Line from the origin x,y to x1,y1.
001388  001548  //       : The new origin is then set to x1, y1. Line colour needs
001389  001549  //       : to be preset with "Set Object colour" using gfx_Set(mode=2, colour);
001390  001550        
001391  001551  func gfx_LineRel("x1", "y1"), 0;                    // draw line from current origin to new relative offset
001392  001552  // Syntax: gfx_LineRel(x1, y1);
001393  001553  // Usage : gfx_LineRel(arg1, arg2);
001394  001554  // Notes : Draws a Line from the origin x,y to x1,y1.
001395  001555  //       : Unlike gfx_MoveTo() the origin is not updated with x1, y1. Line colour needs
001396  001556  //       : to be preset with "Set Object colour" using gfx_Set(OBJECT_COLOUR, colour);
001397  001557        
001398  001558  func gfx_Line("x1", "y1", "x2", "y2", "colr"), 0;   // draw line, can be patterned
001399  001559  // Syntax: gfx_Line(x1, x2, y2, colr);
001400  001560  // Usage : gfx_Line(arg1, arg2, arg3, arg4, arg5);
001401  001561  // Notes : Plots a coloured Line from x1,y1 to x2,y2 on the screen
001402  001562        
001403  001563  func gfx_Hline("y", "x1", "x2", "colr"), 1;         // draw Hline, can be patterned
001404  001564  // Syntax: gfx_Line(x1, x2, y, colr);
001405  001565  // Usage : gfx_Line(arg1, arg2, arg3, arg4);
001406  001566  // Notes : Plots a coloured Horizontal line from x1,y to x2,y on the screen
001407  001567        
001408  001568  func gfx_Vline("x", "y1", "y2", "colr"), 1;         // draw Vline, can be patterned
001409  001569  // Syntax: gfx_Line(y1, y2, x, colr);
001410  001570  // Usage : gfx_Line(arg1, arg2, arg3, arg4);
001411  001571  // Notes : Plots a coloured Vertical line from x,y1 to x,y2 on the screen
001412  001572        
001413  001573  func gfx_Rectangle("x1" ,"y1", "x2", "y2", "colr"), 0;    // draw open rectangle,line can be patterned
001414  001574  // Syntax: gfx_Rectangle(x1, y1, x2, y2, colr);
001415  001575  // Usage : gfx_Rectangle(arg1, arg2, arg3, arg4, arg5);
001416  001576  // Notes : Plots a coloured Outline Rectangle from top corner (x1,y1) to
001417  001577  //       : bottom corner (x2,y2) on the screen.
001418  001578        
001419  001579  func gfx_RectangleFilled("x1","y1","x2","y2","colr"), 0;    // draw filled rectangle
001420  001580  // Syntax: gfx_Rectangle(x1, y1, x2, y2, colour);
001421  001581  // Usage : gfx_Rectangle(arg1, arg2, arg3, arg4, arg5);
001422  001582  // Notes : Plots a coloured Solid Rectangle from top corner (x1,y1) to
001423  001583  //       : bottom corner (x2,y2) on the screen.
001424  001584        
001425  001585  func gfx_Circle("x", "y", "rad", "colr"), 0;        // draw open circle
001426  001586  // Syntax: gfx_Circle(x, y, rad, colr);
001427  001587  // Usage : gfx_Circle(arg1, arg2, arg3, arg4);
001428  001588  // Notes : Plots a coloured outline Circle on the screen at centre x,y with radius = rad
001429  001589        
001430  001590  func gfx_CircleFilled("x", "y", "rad", "colr"), 0;    // draw filled circle
001431  001591  // Syntax: gfx_Circle(x, y, rad, colr);
001432  001592  // Usage : gfx_Circle(arg1, arg2, arg3, arg4);
001433  001593  // Notes : Plots a coloured Solid Circle on the screen at centre x,y with radius = rad
001434  001594        
001435  001595  func gfx_PutPixel("x", "y", "colr"), 0;            // set point at x y
001436  001596  // Syntax: gfx_PutPixel(x, y, colr);
001437  001597  // Usage : gfx_PutPixel(arg1, arg2, arg3);
001438  001598  // Notes : Plots a coloured pixel on the screen at x,y location
001439  001599        
001440  001600  func gfx_GetPixel("x", "y"), 1;                // read colour at point x y
001441  001601  // Syntax: gfx_GetPixel(x, y);
001442  001602  // Usage : var := gfx_GetPixel(arg1, arg2);
001443  001603  // Notes : Reads and returns the colour value of a pixel at location x,y
001444  001604        
001445  001605  func gfx_Triangle("x1","y1","x2","y2","x3","y3","colr"), 0; // draw an open triangle
001446  001606  // Syntax: gfx_Triangle(x1, y1, x2, y2, x3, y3, colr);
001447  001607  // Usage : gfx_Triangle(arg1, arg2, arg3, arg4, arg5, arg6, arg7);
001448  001608  // Notes : Plots a coloured outline Triangle from between 3 vertices: x1,y1 x2,y2 x3,y3
001449  001609  //       : Vertices must be specified in an anti-clockwise fashion
001450  001610        
001451  001611  func gfx_OrbitInit("&x_orb", "&y_orb"), 0;        // set result holders for orbit command
001452  001612  // Syntax: gfx_OrbitInit(&x_orb, &y_orb);
001453  001613  // Usage : gfx_OrbitInit(&arg1, &arg2);
001454  001614  // Notes : Sets up the Orbit function parameters.
001455  001615  //       : &x_orb, &y_orb: calcualted Orbit coordiantes. These are pointers to local
001456  001616  //       : variables that get updated after calling gfx_Orbit(,,) function.
001457  001617  //       : The coordiantaes are calculated relative to the origin
001458  001618  //       : obtained by using the gfx_MoveTo(x, y) function.
001459  001619        
001460  001620  func gfx_Orbit("angle", "distance"), 0;            // calculate point at angle, distance
001461  001621  // Syntax: gfx_Orbit(angle, distance);
001462  001622  // Usage : gfx_Orbit(arg1, arg2);
001463  001623  // Notes : The Orbit function calcualtes the x, y coordinates of a distant point whose
001464  001624  //       : only known parameters are the angle and the distance from the current origin.
001465  001625        
001466  001626  func gfx_Polyline("n", "&vx", "&vy", "colr"), 0;    // draw a polyline from a table of vertices
001467  001627  // Syntax: gfx_Polyline(numbVertices, &vertices_x, &vertices_y, colour);
001468  001628  // Usage : gfx_Polyline(arg1, x[array], y[array], arg2);
001469  001629  // Notes : This function is very similar to the Ploygon function
001470  001630  //       : with the exception of the 1st and the last vertices not joined.
001471  001631        
001472  001632  func gfx_Polygon("n", "&vx", "&vy", "colr"), 0;        // draw a polygon from a table of vertices
001473  001633  // Syntax: gfx_Polygon(numbVertices, &vx, &y, colour);
001474  001634  // Usage : gfx_Polygon(arg1, x[array], y[array], arg2);
001475  001635  // Notes : Plots a coloured outline Polygon between specified vertices: x1,y1 x2,y2 .. xn,yn
001476  001636  //       : Vertices must be minimum of 3 and can be specified in any fashion
001477  001637        
001478  001638  func gfx_Dot(), 0;                    // set point at glb_X glb_Y, default colour
001479  001639  // Syntax: gfx_Dot();
001480  001640  // Usage : gfx_Dot();
001481  001641  // Notes : Places a coloured dot at the origin
001482  001642        
001483  001643        
001484  001644  func gfx_Bullet("r"), 0;                // draw circle at glb_X glb_Y, default colour
001485  001645  // Syntax: gfx_Bullet();
001486  001646  // Usage : gfx_Bullet();
001487  001647  // Notes : Places a coloured circle at the origin
001488  001648  //       : filled or unfilled state is controlled by PenSize
001489  001649        
001490  001650  func gfx_IncX(), 1;                    // increment global origin glb_X, returning new value
001491  001651  // Syntax: gfx_IncX();
001492  001652  // Usage : var := gfx_IncX();
001493  001653  // Notes : Increments the x coordinate of the origin
001494  001654        
001495  001655  func gfx_IncY(), 1;                    // increment global origin glb_Y, returning new value
001496  001656  // Syntax: gfx_IncY();
001497  001657  // Usage : var := gfx_IncY();
001498  001658  // Notes : Increments the y coordinate of the origin
001499  001659        
001500  001660  func gfx_BoxTo("x1", "y1"), 0;                // draw rectangle from current origin to x1 y1
001501  001661  // Syntax: gfx_BoxTo(x1, y1);
001502  001662  // Usage : gfx_BoxTo(arg1, arg2);
001503  001663  // Notes : Draws a Rectangle from the origin x,y to x1,y1.
001504  001664  //       : The new origin is then set to x1,y1. Rectangle colour needs
001505  001665  //       : to be preset with "Set Object colour" using gfx_Set(mode=2, colour);
001506  001666  //       : and the PenSize setting determines if Box is solid or outline.
001507  001667        
001508  001668  func gfx_ClipWindow("x1" ,"y1", "x2", "y2"), 0;         // set the cipping area
001509  001669  // Syntax: gfx_ClipWindow(x1, y1, x2, y2);
001510  001670  // Usage : gfx_ClipWindow(arg1, arg2, arg3, arg4);
001511  001671  // Notes : Specifies a clipping window region on the screen such that any objects
001512  001672  //       : and text placed onto the screen will be clipped and displayed only
001513  001673  //       : within that region. For the clipping window to take effect, "Clipping"
001514  001674  //       : must be enabled seperately using the gfx_Set(CLIPPING, ON) command.
001515  001675        
001516  001676        
001517  001677  func gfx_ChangeColour("oldcolr", "newcolr"), 0;         // change pixel colour in clipping area
001518  001678  // Syntax: gfx_ChangeColour(oldcolr, newcolr);
001519  001679  // Usage : gfx_ChangeColour(0xFF00, 0XFFFF);
001520  001680  // *Notes:
001521  001681        
001522  001682  func gfx_SetClipRegion(), 0;                            // set clipping area to the most recent extents
001523  001683  // Syntax: gfx_SetClipRegion();
001524  001684  // Usage : var := gfx_SetClipRegion();
001525  001685  // *Notes:
001526  001686        
001527  001687  func gfx_Ellipse("x", "y", "xrad", "yrad", "colour"), 0;
001528  001688  // Syntax: gfx_Ellipse(x, y, xrad, yrad, colour);
001529  001689  // Usage : gfx_Ellipse(arg1, arg2, arg3, arg4, arg5);
001530  001690  // Notes : Plots a coloured Ellipse on the screen at centre x,y
001531  001691  //       : with xradius = xrad and yradius = yrad.
001532  001692  //       : if PenSize = 0 Ellipse is Solid
001533  001693  //       : if PenSize = 1 Ellipse is Outline
001534  001694        
001535  001695        
001536  001696  func gfx_EllipseFilled("x", "y", "xrad", "yrad", "colour"), 0;
001537  001697  // Syntax: gfx_EllipseFilled(x, y, xrad, yrad, colour);
001538  001698  // Usage : gfx_EllipseFilled(arg1, arg2, arg3, arg4, arg5);
001539  001699  // Notes : Plots a coloured Ellipse on the screen at centre x,y
001540  001700  //       : with xradius = xrad and yradius = yrad.
001541  001701        
001542  001702        
001543  001703  func gfx_Button("state", "x", "y", "buttonColour", "textColour", "font", "textWidth", "textHeight", "text"), 1;
001544  001704  // Syntax: gfx_Button(mode, x, y, buttonColour, textColour, font, textWidth, textHeight, text);
001545  001705  // Usage : gfx_Button(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
001546  001706  // Notes : Draws a 3 dimensional Text Button at screen location defined by
001547  001707  //       : x,y arguments (top left corner). The size of the button depends on
001548  001708  //       : the font, width, height and length of the text.
001549  001709  //       : The button appearance will depend on the state parameter setting:
001550  001710  //       :         state = 0 : Button Pressed
001551  001711  //       :         state = 1 : Button Raised
001552  001712  //       : The button is automatically sized, determined by text.
001553  001713        
001554  001714        
001555  001715  func gfx_Button2("state", "x", "y", "Width", "Height", "buttonColour", "textColour", "text"), 0;
001556  001716  // Syntax: gfx_Button2(mode, x, y, width, height, buttoncolour, textcolour, text);
001557  001717  // Usage : gfx_Button2(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001558  001718  // Notes : Draws a 3 dimensional Text Button at screen location defined by
001559  001719  //       : x,y arguments (top left corner). The size of the button is defined by the width
001560  001720  //       : and height parameters. The text is centered within those bounds.
001561  001721  //       : The button appearance will depend on the state parameter setting:
001562  001722  //       :         state = 0 : Button Pressed
001563  001723  //       :         state = 1 : Button Raised
001564  001724  //       : The button has square corners.
001565  001725        
001566  001726  func gfx_Button3("state", "x", "y", "Width", "Height", "buttonColour", "textColour", "text"), 0;
001567  001727  // Syntax: gfx_Button3(mode, x, y, width, height, buttoncolour, textcolour, text);
001568  001728  // Usage : gfx_Button3(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001569  001729  // Notes : Draws a 3 dimensional Text Button at screen location defined by
001570  001730  //       : x,y arguments (top left corner). The size of the button is defined by the width
001571  001731  //       : and height parameters. The text is centered within those bounds.
001572  001732  //       : The button appearance will depend on the state parameter setting:
001573  001733  //       :         state = 0 : Button Pressed
001574  001734  //       :         state = 1 : Button Raised
001575  001735  //       : The button has rounded corners depending upon gfx_BevelRadius.
001576  001736        
001577  001737  func gfx_CheckBox("state", "x", "y", "Width", "Height", "boxColour", "textColour", "text"), 0;
001578  001738  // Syntax: gfx_CheckBox(state, x, y, Width, Height, boxColour, textColour, text);
001579  001739  // Usage : gfx_CheckBox(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001580  001740  // Notes : Draws a CheckBox at screen location defined by x,y arguments (top left corner).
001581  001741  //       : The size of the button is defined by the width and height parameters.
001582  001742  //       : The text is to the right of the checkbox and truncated if necessary.
001583  001743  //       : The check appearance will depend on the state parameter setting:
001584  001744  //       :         state = 0 = CHECKED    : Checkbox Checked
001585  001745  //       :         state = 1 = UNCHECKED  : CheckBox Unchecked
001586  001746        
001587  001747  func gfx_RadioButton("state", "x", "y", "Width", "Height", "boxColour", "textColour", "text"), 0;
001588  001748  // Syntax: gfx_RadioButton(state, x, y, Width, Height, boxColour, textColour, text);
001589  001749  // Usage : gfx_RadioButton(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001590  001750  // Notes : Draws a RadioButton at screen location defined by x,y arguments (top left corner).
001591  001751  //       : The size of the button is defined by the width and height parameters.
001592  001752  //       : The text is to the right of the radiobutton and truncated if necessary.
001593  001753  //       : The check appearance will depend on the state parameter setting:
001594  001754  //       :         state = 0 = CHECKED    : Radiobutton Checked
001595  001755  //       :         state = 1 = UNCHECKED  : Radiobutton Unchecked
001596  001756        
001597  001757  func gfx_Slider2("mode", "x1", "y1", "width", "height", "colour", "scale", "value"), 1;
001598  001758  // Syntax: gfx_Slider2(mode, x, y, width, height, colour, scale, value);
001599  001759  // Usage : gfx_Slider(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001600  001760  // Notes : Draws a 3 dimensional Slider Bar on the screen.
001601  001761  //       : Slider parameters are as follows:
001602  001762  //       :         mode = 0 : Slider recessed
001603  001763  //       :         mode = 1 : Slider raised
001604  001764  //       :         x1, y1 = top left corner
001605  001765  //       :         x2, y2 = bottom right corner
001606  001766  //       :         scale = n : sets the full scale range from 0 to n
001607  001767  //       :         value = m : sets the relative position of the thumb 0 <= m <= n
001608  001768  //returns: scaled value of thumb position
001609  001769        
001610  001770        
001611  001771        
001612  001772        
001613  001773  func gfx_Panel("state", "x", "y", "width", "height", "colour"), 0;
001614  001774  // Syntax: gfx_Panel(style, x, y, width, height, colour);
001615  001775  // Usage : gfx_Panel(PANEL_RAISED, x, y, w, h, GRAY);
001616  001776  // Notes : Draws a panel (groupbox) at screen location defined by
001617  001777  //       : x, y, width and height with colour "colour".
001618  001778  //       :         state = 0 : sunken
001619  001779  //       :         state = 1 : raised
001620  001780  //       :         state = 2 : hide (draw object in background colour)
001621  001781  //returns: nothing
001622  001782        
001623  001783        
001624  001784        
001625  001785  func gfx_Slider("mode", "x1", "y1", "x2", "y2", "colour", "scale", "value"), 1;
001626  001786  // Syntax: gfx_Slider(mode, x1, y1, x2, y2, colour, scale, value);
001627  001787  // Usage : gfx_Slider(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001628  001788  // Notes : Draws a 3 dimensional Slider Bar on the screen.
001629  001789  //       : Slider parameters are as follows:
001630  001790  //       :         mode = 0 : Slider recessed
001631  001791  //       :         mode = 1 : Slider raised
001632  001792  //       :         x1, y1 = top left corner
001633  001793  //       :         x2, y2 = bottom right corner
001634  001794  //       :         scale = n : sets the full scale range from 0 to n
001635  001795  //       :         value = m : sets the relative position of the thumb 0 <= m <= n
001636  001796  //returns: scaled value of thumb position
001637  001797        
001638  001798        
001639  001799        
001640  001800  func gfx_ScreenCopyPaste("xs", "ys", "xd", "yd", "width", "height"), 0;
001641  001801  // Syntax: gfx_ScreenCopyPaste(xs, ys, xd, yd, width, height);
001642  001802  // Usage : gfx_ScreenCopyPaste(arg1, arg2, arg3, arg4, arg5, arg6);
001643  001803  // Notes : Copies an area of a screen from xs,ys of size given by width and height
001644  001804  //       : and pastes it to another location determined by xd, yd.
001645  001805        
001646  001806  func gfx_RGBto565("RED", "GREEN", "BLUE"), 1;
001647  001807  // Syntax: gfx_RGBto565(red, green, blue);
001648  001808  // Usage : gfx_RGBto565(arg1, arg2, arg3);
001649  001809  // Notes : Returns the 16bit (565 format) colour value of a 24bit (R,G,B format) colour
001650  001810        
001651  001811  func gfx_332to565("COLOUR8BIT"), 1;
001652  001812  // Syntax: gfx_332to565(colour);
001653  001813  // Usage : gfx_332to565(arg);
001654  001814  // Notes : Returns the 16bit (565 format) colour value of an 8 bit (332 format) colour
001655  001815        
001656  001816  func gfx_565to332("COLOUR16BIT"), 1;
001657  001817  // Syntax: gfx_565to332(colour);
001658  001818  // Usage : clor332 := gfx_565to332(arg);
001659  001819  // Notes : Returns the 8bit (332 format) colour value of an 16 bit (565 format) colour
001660  001820        
001661  001821  func gfx_TriangleFilled("x1","y1","x2","y2","x3","y3","colr"), 0; // draw a filled triangle
001662  001822  // Syntax: gfx_TriangleFilled(x1, y1, x2, y2, x3, y3, colr);
001663  001823  // Usage : gfx_TriangleFilled(arg1, arg2, arg3, arg4, arg5, arg6, arg7);
001664  001824  // Notes : Plots a coloured Solid Triangle from between 3 vertices: x1,y1 x2,y2 x3,y3
001665  001825  //       : Vertices must be specified in an anti-clockwise fashion
001666  001826        
001667  001827        
001668  001828  func gfx_PolygonFilled("n", "&vx", "&vy", "colr"), 0;        // draw a filled polygon from a table of vertices
001669  001829  // Syntax: gfx_PolygonFilled(numbVertices, &vx, &y, colour);
001670  001830  // Usage : gfx_PolygonFilled(arg1, x[array], y[array], arg2);
001671  001831  // Notes : Plots a solid Polygon between specified vertices: x1,y1 x2,y2 .. xn,yn
001672  001832  //       : Vertices must be minimum of 3 and can be specified in any fashion
001673  001833        
001674  001834        
001675  001835  func gfx_Origin("x", "y"), 0;            // set relative screen offset for graphics objects
001676  001836  // Syntax: gfx_Offset(x, y);
001677  001837  // Usage : gfx_Offset(arg1, arg2);
001678  001838  // Notes : Set the screen offset
001679  001839        
001680  001840        
001681  001841        
001682  001842  func gfx_FillPattern("patptr", "mode"), 1;
001683  001843  // Syntax  : gfx_FillPattern(patternpointer);
001684  001844  // Usage   : gfx_FillPattern(PTN_BRICKS);
001685  001845  //         : Provides graphics fill pattern, (8 linear bytes, 1=pixel off)
001686  001846  // Notes   : "patptr" points to an 8x8 tile for rendering filled areas.
001687  001847  //         : Rendering is turned off with gfx_FillPattern(0);
001688  001848  //         : or gfx_FillPattern(OFF);
001689  001849  //         : "mode" maybe TRANSPARENT or OPAQUE (0 or 1), for OPAQUE
001690  001850  //         : mode, the current screen colour is used for the 'off'
001691  001851  //         : pixels, for transparent mode, the 'off' pixels are not drawn.
001692  001852  //         : gfx_FillPattern affects all filled object, including polygons.
001693  001853  //         : There are 32 builtin patterns, these are obtained using the
001694  001854  //         : pre-defined constants FILLPATTERN_0 to FILLPATTERN_31, or the
001695  001855  //         : names, eg PTN_BRICKS, PTN_CARGONET, PTN_CIRCUITS, etc.
001696  001856  //         : Note that the constants range from 0xFFE0 to 0xFFFF, any
001697  001857  //         : other value is assumed to be a pointer to a users 8 byte
001698  001858  //         : block pattern.
001699  001859  // Returns : returns the handle of the previous pattern.
001700  001860        
001701  001861        
001702  001862  func gfx_PieSlice("cx", "cy", "spread", "radius", "step", "startangle", "endangle", "mode", "colour"), 0;
001703  001863  // Syntax  : gfx_PieSlice(cx, cy, spread, radius, step, startangle, endangle, mode, colour);
001704  001864  // Usage   : gfx_PieSlice(120, 120, 0, 100, 8, 75, 145, 0, YELLOW);
001705  001865  // Notes   : Draws a 'pie slice' (filled arc) at "cx":"cy" with radius "radius", starting at "startangle"
001706  001866  //         : and ending at "endangle". "spread" is used to offset the centrepoint of the pieslice
001707  001867  //         : to shift a pie chart piece away from the centrepoint.
001708  001868  //         : Rendering can be obtained with gfx_FillPattern(PATTRN);
001709  001869  //         : or gfx_FillPattern(OFF); for no fill pattern.
001710  001870  //         : Step is the stepping angle increment for the fineness of the pie Slice.
001711  001871  //         : "mode" has the following effect
001712  001872  //         :   if mode = 0, no outline
001713  001873  //         :   if mode = 1, outer circumference line (using current object colour)
001714  001874  //         :   if mode = 2, outer circumference and slice lines ( (using current object colour)
001715  001875  // Returns : nothing.
001716  001876        
001717  001877        
001718  001878  func gfx_Arc("xc", "yc", "radius", "step", "startangle", "endangle", "mode"), 0;
001719  001879  // Syntax  : gfx_Arc(cx, cy, radius, step, startangle, endangle, mode);
001720  001880  // Usage   : gfx_Arc(120, 120, 0, 100, 8, 75, 145, 0);
001721  001881  // Notes   : Draws an arc at "cx":"cy" with radius "radius", starting at "startangle"
001722  001882  //         : and ending at "endangle". Colour is determined by curent object colour.
001723  001883  //         : Step is the stepping angle increment for the fineness of the arc.
001724  001884  //         : "mode" has the following effect
001725  001885  //         :   if mode = 0, outer circumference line only
001726  001886  //         :   if mode = 1, outer circumference and lines back to cy:cy
001727  001887  // Returns : nothing.
001728  001888        
001729  001889        
001730  001890  func gfx_RoundRect("x1", "y1", "x2", "y2", "rad", "color"), 0;
001731  001891  // Syntax  : gfx_RoundRect(x1, y1, x2, y2, radius, colour);
001732  001892  // Usage   : gfx_RoundRect(120, 120, 160, 160, 8, GRAY); // draw a tab like object
001733  001893  // Notes   : Draws a filled rectangle at the given co-ordinates with rounded corners
001734  001894  //         : determined by "radius".
001735  001895  //         : Bounding rectangle is x1-rad, y1-rad, x2+rad, y2+rad.
001736  001896  // Returns : nothing.
001737  001897        
001738  001898        
001739  001899  func gfx_Surround("x1", "y1", "x2", "y2", "rad1", "rad2", "color"), 0;
001740  001900  // Syntax  : gfx_Surround(x1, y1, x2, y2, radius1, radius1, colour);
001741  001901  // Usage   : gfx_Surround(120, 120, 160, 160, 8, 0, GRAY); // rounded surround frame
001742  001902  // Notes   : Draws a outline rectangle at the given co-ordinates with rounded corners
001743  001903  //         : determined by "radius1". "radius2" sets the radius of the outer rounded rectangle.
001744  001904  //         : If "radius1" is zero, the inner rectangle will have square corners.
001745  001905  //         : Bounding rectangle is x1-rad1-rad2, y1-rad1-rad2, x2+rad1+rad2, y2+rad1+rad2.
001746  001906  // Returns : nothing.
001747  001907        
001748  001908        
001749  001909  func gfx_RoundPanel("state", "x", "y", "width", "height", "radius", "bevelwidth", "colour"), 0;
001750  001910  // Syntax  : gfx_RoundPanel(style, x, y, width, height, radius, bevelwidth, colour);
001751  001911  // Usage   : gfx_RoundPanel(PANEL_RAISED, 100, 100, 30, 20, GRAY);
001752  001912  // Notes   : Draws a rounded panel at x, y, width and height may be zero allowing the function
001753  001913  //         : to be used for rounded panels, rounded buttons, circular buttons.
001754  001914  //         :         state = 0 : sunken
001755  001915  //         :         state = 1 : raised
001756  001916  //         :         state = 2 : hide (draw object in background colour)
001757  001917  //         : Bounding rectangle is x1-radius-bevelwidth, y1-radius-bevelwidth, x2+radius+bevelwidth, y2+radius+bevelwidth.
001758  001918  // Returns : nothing.
001759  001919        
001760  001920        
001761  001921  func gfx_Gradient("style", "left", "top", "right", "bottom", "color1", "color2"), 0;
001762  001922  // Syntax  : gfx_Gradient(style, x1, y1, x2, y2, colr1, colr2);
001763  001923  // Usage   : gfx_Gradient(GRAD_WAVE_VER, 100, 100, 230, 120, BLACK, WHITE);
001764  001924  // Notes   : Draws a graduated colour rectangle at the specified co-ordinate.
001765  001925  //         : "style" specifies the drawing mode
001766  001926  //         :     GRAD_DOWN         // gradient changes in the vertical direction
001767  001927  //         :     GRAD_RIGHT        // gradient change in the horizontal direction
001768  001928  //         :     GRAD_UP           // gradient changes in the vertical direction
001769  001929  //         :     GRAD_LEFT         // gradient change in the horizontal direction
001770  001930  //         :     GRAD_WAVE_VER     // gradient wave in the vertical direction
001771  001931  //         :     GRAD_WAVE_HOR     // gradient wave in the horizontal direction
001772  001932  // Returns : nothing.
001773  001933        
001774  001934        
001775  001935  func gfx_RoundGradient("style", "left", "top", "right", "bottom", "radius", "color1", "color2"), 0;
001776  001936  // Syntax  : gfx_Gradient(style, x1, y1, x2, y2, radius, colr1, colr2);
001777  001937  // Usage   : gfx_Gradient(GRAD_WAVE_VER, 100, 100, 230, 120, BLACK, WHITE);
001778  001938  // Notes   : Draws a graduated colour rounded rectangle at the specified co-ordinate.
001779  001939  //         : X1 may equal X2, and Y1 = Y2 allowing allowing the function
001780  001940  //         : to be used for rounded panels, rounded buttons, circular buttons.
001781  001941  //         : "style" specifies the drawing mode
001782  001942  //         :     GRAD_DOWN         // gradient changes in the vertical direction
001783  001943  //         :     GRAD_RIGHT        // gradient change in the horizontal direction
001784  001944  //         :     GRAD_UP           // gradient changes in the vertical direction
001785  001945  //         :     GRAD_LEFT         // gradient change in the horizontal direction
001786  001946  //         :     GRAD_WAVE_VER     // gradient wave in the vertical direction
001787  001947  //         :     GRAD_WAVE_HOR     // gradient wave in the horizontal direction
001788  001948  //         : Bounding rectangle is x1-radius, y1-radius, x2+radius, y2+radius.
001789  001949  // Returns : nothing.
001790  001950        
001791  001951        
001792  001952  func gfx_ReadBresLine("x1", "y1", "x2", "y2", "ptr"), 1;
001793  001953  // Syntax  : gfx_readBrezLine(x1, y1, x2, y2, ptr);
001794  001954  // Usage   : anArrayPtr := gfx_readBrezLine(10, 10, 50, 50, 0);  // read arbitrary line to array, let the function make the array for me
001795  001955  // Notes   : reads an arbitrary line from the display to an array.
001796  001956  //         : If "ptr" is 0, the correctly sized array is created, in which case
001797  001957  //         : it is up to the caller to eventually destroy it. Otherwise "ptr"
001798  001958  //         : is expected to point to a correctly sized array.
001799  001959  //         : NB if an array is supplied, its size must be large enough, and may
001800  001960  //         : be calculated:-
001801  001961  //         : bytecount := (MAX(ABS(x2-x1), ABS(y2-y1) + 1) * 2; // calc array size for mem_Alloc (which allocates byte storage)
001802  001962  //         : wordcount := (MAX(ABS(x2-x1), ABS(y2-y1) + 1);     // calc array size for fixed word array
001803  001963  // Returns : A pointer to the created aray, or the users array.
001804  001964  //         : In the case of ptr=0, if there is insufficient
001805  001965  //         : memory to create the array, zero is returned
001806  001966        
001807  001967        
001808  001968  func gfx_WriteBresLine("x1", "y1", "x2", "y2", "ptr"), 0;
001809  001969  // Syntax  : gfx_writeBrezLine(x1, y1, x2, y2, ptr), 0;
001810  001970  // Usage   : gfx_writeBrezLine(20, 20, 50, 50, anArrayPtr);   // write an array back to the arbitrary line
001811  001971  // Notes   : cast pixel values from array to arbitrary line "x1", "y1", "x2", "y2"
001812  001972  //         : "ptr" points to the array to be written.
001813  001973  // Returns : nothing
001814  001974        
001815  001975        
001816  001976  func gfx_ReadGRAMarea("x1", "y1", "x2", "y2", "ptr"), 1;
001817  001977  // Syntax  : gfx_ReadGRAMarea(x1, y1, x2, y2, ptr);
001818  001978  // Usage   : anArrayPtr := gfx_ReadGRAMarea(10, 10, 50, 50, 0);  // read rectangular area to array, let the function make the array for me
001819  001979  // Notes   : reads an arbitrary rectangular area from the display to an array.
001820  001980  //         : If "ptr" is 0, the correctly sized array is created, in which case
001821  001981  //         : it is up to the caller to eventually destroy it. Otherwise "ptr"
001822  001982  //         : is expected to point to a correctly sized array.
001823  001983  //         : NB if an array is supplied, its size must be large enough, and may
001824  001984  //         : be calculated:-
001825  001985  //         : bytecount := ( (ABS(x2-x1)+1) * (ABS(y2-y1) + 1)) * 2;     // calc array size for mem_Alloc (which allocates byte storage)
001826  001986  //         : wordcount := ( (ABS(x2-x1)+1) *  ABS(y2-y1);             // calc array size for fixed word array
001827  001987  // Returns : A pointer to the created aray, or the users array.
001828  001988  //         : In the case of ptr=0, if there is insufficient
001829  001989  //         : memory to create the array, zero is returned
001830  001990        
001831  001991        
001832  001992  func gfx_WriteGRAMarea("x1", "y1", "x2", "y2", "ptr"), 0;
001833  001993  // Syntax  : gfx_WriteGRAMarea(x1, y1, x2, y2, ptr), 0;
001834  001994  // Usage   : gfx_WriteGRAMarea(20, 20, 50, 50, anArrayPtr);   // write an array back to the rectangular area
001835  001995  // Notes   : "ptr" points to the array to be written.
001836  001996  // Returns : nothing
001837  001997        
001838  001998        
001839  001999  func gfx_Get("mode"), 1;
001840  002000  // Syntax: gfx_Get(mode);
001841  002001  // Usage : arg1 := gfx_Get(arg);
001842  002002  // Notes : Returns various parameters to caller
001843  002003  //       :
001844  002004  //       : mode = X_MAX (mode 0) : current orientations maximum X value
001845  002005  //       : var := gfx_Get(X_MAX);
001846  002006  //       : Returns the maximum horizontal value of the display
001847  002007  //       :
001848  002008  //       : mode = Y_MAX (mode 1) : Vcurrent orientations maximum Y value
001849  002009  //       : var := gfx_Get(Y_MAX);
001850  002010  //       : Returns the maximum vertical value of the display
001851  002011  //       :
001852  002012  //       : mode = LEFT_POS (mode 2) : Left location of last Object
001853  002013  //       : var := gfx_Get(LEFT_POS);
001854  002014  //       : Returns the left location of the last drawn object
001855  002015  //       : such as a slider or button or an image/video
001856  002016  //       :
001857  002017  //       : mode = TOP_POS (mode 3) : Top location of Object
001858  002018  //       : var := gfx_Get(TOP_POS);
001859  002019  //       : Returns the top location of the last drawn object
001860  002020  //       : such as a slider or button or an image/video
001861  002021  //       :
001862  002022  //       : mode = RIGHT_POS (mode 4) : Right location of last Object
001863  002023  //       : var := gfx_Get(RIGHT_POS);
001864  002024  //       : Returns the right location of the last drawn object
001865  002025  //       : such as a slider or button or an image/video
001866  002026  //       :
001867  002027  //       : mode = BOTTOM_POS  (mode 5) : Bottom location of Object
001868  002028  //       : var := gfx_Get(BOTTOM_POS );
001869  002029  //       : Returns the bottom location of the last drawn object
001870  002030  //       : such as a slider or button or an image/video
001871  002031  //       :
001872  002032  //       : mode = X_ORG (mode 6) : get current internal X position
001873  002033  //       : var := gfx_Get(X_ORG);
001874  002034  //       : Returns the internal X position that was set with
001875  002035  //       : gfx_MoveTo(x, y); or gfx_Set(X_ORG, pos);
001876  002036  //       :
001877  002037  //       : mode = Y_ORG (mode 7) : get current internal Y position
001878  002038  //       : var := gfx_Get(Y_ORG);
001879  002039  //       : Returns the internal X position that was set with
001880  002040  //       : gfx_MoveTo(x, y); or gfx_Set(Y_ORG, pos);
001881  002041  //       :
001882  002042        
001883  002043        
001884  002044  //------------------------------------------------------------------//
001885  002045  // Single parameter short-cuts                                      //
001886  002046  // for the gfx_Set functions                                        //
001887  002047  // These functions return the existing value before                 //
001888  002048  // the change is made.                                              //
001889  002049  //------------------------------------------------------------------//
001890  002050  func gfx_PenSize("mode"), 1;                        // 0  graphics pen size, SOLD or OUTLINE
001891  002051  func gfx_BGcolour("colour"), 1;                     // 1  graphics background colour
001892  002052  func gfx_ObjectColour("colour"), 1;                 // 2  graphics object colour
001893  002053  func gfx_Clipping("mode"), 1;                       // 3  graphics clipping ON/OFF
001894  002054  func gfx_TransparentColour("colour"), 1;            // 4  graphics image transparent mask colour
001895  002055  func gfx_Transparency("mode"), 1;                   // 5  graphics image transparent mode ON/OFF
001896  002056  func gfx_FrameDelay("milliseconds"), 1;             // 6  graphics animation frame delay
001897  002057  func gfx_ScreenMode("mode"), 1;                     // 7  graphics orientation LANDSCAPE, LANDSCAPE_R, PORTRAIT, PORTRAIT_R
001898  002058  func gfx_OutlineColour("colour"), 1;                // 8  graphics rectangle/circle outline colour
001899  002059  func gfx_Contrast("value"), 1;                      // 9  graphics hardware value 0 to 9, 0=off, 1=lowest, 8=highest (only for AMOLED devices)
001900  002060  func gfx_LinePattern("value"), 1;                   // 10 graphics line draw tesselation pattern (16 linear bits, 1=pixel off)
001901  002061  func gfx_BevelRadius("radius"), 1;                  // 11 graphics button bevel radius
001902  002062  func gfx_BevelWidth("value"), 1;                    // 12 graphics button bevel width
001903  002063  func gfx_BevelShadow("value"), 1;                   // 13 graphics button bevel shadow depth
001904  002064  func gfx_Xorigin("offset"), 1;                      // 14 graphics  X origin
001905  002065  func gfx_Yorigin("offset"), 1;                      // 15 graphics  Y origin
001906  002066        
001907  002067        
001908  002068  func gfx_PointWithinBox("x", "y", "&rectr"), 1;
001909  002069  // Syntax   : gfx_PointWithinBox(x, y, rect);
001910  002070  // Usage    : var r[4]; r[0]:=100; r[1]:=200; r[2]:=20; r[3]:=30;
001911  002071  //          : result := gfx_PointWithinBox(x, y, r); // check area at 100,200,119,229
001912  002072  // Notes    : rect is an array of 4 vars, x1, y1, width, height - using width co-ordinates
001913  002073  // returns  : Returns true if last touch co-ordinates are within the box test area.
001914  002074        
001915  002075        
001916  002076  func gfx_PointWithinRectangle("x", "y", "&recta"), 1;
001917  002077  // Syntax   : gfx_PointWithinRectangle(x, y, recta);
001918  002078  // Usage    : var r[4]; r[0]:=100; r[1]:=200; r[2]:=119; r[3]:=129;
001919  002079  //          : result := gfx_PointWithinRectangle(x, y, r); // check if point within area at 100,200,119,229
001920  002080  // Notes    : rect is an array of 4 vars, x1, y1, x2, y2 using absolute co-ordinates
001921  002081  // returns  : Returns true if x:y co-ordinates are within the rectangle test area.
001922  002082        
001923  002083        
001924  002084  func __reserved17(), 0; // do not remove
001925  002085  func __reserved18(), 0; // do not remove
001926  002086  func __reserved19(), 0; // do not remove
001927  002087  func __reserved20(), 0; // do not remove
001928  002088  func __reserved21(), 0; // do not remove
001929  002089  func __reserved22(), 0; // do not remove
001930  002090        
001931  002091        
001932  002092  // built in fill pattern constants for function gfx_FillPattern
001933  002093  #CONST
001934  002126  #END
001935  002127        
001936  002128  #CONST
001937  002161  #END
001938  002162        
001939  002163  //------------------------------------------------------------------//
001940  002164  //     gradient control constants                                   //
001941  002165  //------------------------------------------------------------------//
001942  002166  #constant GRAD_DOWN         0x20    // gradient changes in the vertical direction
001943  002166  #constant GRAD_DOWN         0x20    // gradient changes in the vertical direction
001944  002167  #constant GRAD_RIGHT        0x30    // gradient change in the horizontal direction
001945  002167  #constant GRAD_RIGHT        0x30    // gradient change in the horizontal direction
001946  002168  #constant GRAD_UP           0x40    // gradient changes in the vertical direction
001947  002168  #constant GRAD_UP           0x40    // gradient changes in the vertical direction
001948  002169  #constant GRAD_LEFT         0x50    // gradient change in the horizontal direction
001949  002169  #constant GRAD_LEFT         0x50    // gradient change in the horizontal direction
001950  002170  #constant GRAD_WAVE_VER     0x60    // gradient wave in the vertical direction
001951  002170  #constant GRAD_WAVE_VER     0x60    // gradient wave in the vertical direction
001952  002171  #constant GRAD_WAVE_HOR     0x70    // gradient wave in the horizontal direction
001953  002171  #constant GRAD_WAVE_HOR     0x70    // gradient wave in the horizontal direction
001954  002172        
001955  002173        
001956  002174        
001957  002175        
001958  002176  //------------------------------------------------------------------//
001959  002177  // uSD/FLASH Function Prototypes                                    //
001960  002178  //------------------------------------------------------------------//
001961  002179  func media_Video("x", "y"), 0;                      // display movie at position x y
001962  002180  // Syntax: media_Video(x, y);
001963  002181  // Usage : media_Video(arg1, arg2);
001964  002182  // Notes : Play a Video/Animation clip from the uSD card at screen location
001965  002183  //       : specified by x,y (top left corner). The location of the clip in the
001966  002184  //       : uSD card must be specified by media_setSector(Video_Sector_Add) function.
001967  002185        
001968  002186  func media_VideoFrame("x", "y","framenumber"), 0;   // display required frame from a movie at x y
001969  002187  // Syntax: media_VideoFrame(Frame_number);
001970  002188  // Usage : arg1 := media_VideoFrame();
001971  002189  // Notes : After a pointer to a valid video has been set with media_SetSector,
001972  002190  //       : calling this function shows each fram sequentially, returning
001973  002191  //       : the number of frames remaining. The position of the image is
001974  002192  //     : at the current origin as set with gfx_MoveTo(...);
001975  002193        
001976  002194  func media_SetAdd("HiWord", "LoWord"), 0;           // set stream byte address
001977  002195  // Syntax: media_SetAdd(AddHiWord, AddLoWord);
001978  002196  // Usage : media_SetAdd(arg1, arg2);
001979  002197  // Notes : Set uSD internal Address pointer for bytewise access
001980  002198        
001981  002199  func media_SetSector("HiWord", "LoWord"), 0;        // set stream sector address
001982  002200  // Syntax: media_SetSector(SectHiWord, SectLoWord);
001983  002201  // Usage : media_SetSector(arg1, arg2);
001984  002202  // Notes : Set uSD internal Sector pointer for sector block access
001985  002203        
001986  002204  func media_RdSector("*destination"), 1;
001987  002205  // Syntax: media_RdSector(*destination);
001988  002206  // Usage : media_RdSector(rdblock);
001989  002207  // Notes : Reads and Returns 512 bytes (256 words) into a destination
001990  002208  //       : block (eg rdblock[256]) pointed to by the internal Sector pointer.
001991  002209  //       : After the read the Sector pointer is automatically incremented by 1.
001992  002210  //       : Returns TRUE if uSD response was TRUE
001993  002211        
001994  002212  func media_WrSector("*source"), 1;
001995  002213  // Syntax: media_WrSector(*source);
001996  002214  // Usage : media_WrSector(wrblock);
001997  002215  // Notes : Writes 512 bytes (256 words) from a source memory block
001998  002216  //       : (eg wrblock[256]) into the uSD card. After the write the Sector
001999  002217  //       : pointer is automatically incremented by 1.
002000  002218  //       : Returns TRUE if uSD response was TRUE
002001  002219        
002002  002220  func media_ReadByte(), 1;                // read a byte at the current stream position
002003  002221  // Syntax: media_RdByte();
002004  002222  // Usage : var := media_RdByte();
002005  002223  // Notes : Reads and Returns a single byte of data from the
002006  002224  //       : uSD card pointed to by the internal Address pointer.
002007  002225  //       : After the read the Address pointer is automatically
002008  002226  //       : incremented by 1.
002009  002227        
002010  002228  func media_ReadWord(), 1;                // read a word at the current stream position
002011  002229  // Syntax: media_ReadWord();
002012  002230  // Usage : var := media_ReadWord();
002013  002231  // *Notes : Reads and Returns a single word of data from the
002014  002232  //       : uSD card pointed to by the internal Address pointer.
002015  002233  //       : After the read the Address pointer is automatically
002016  002234  //       : incremented by 2.
002017  002235        
002018  002236  func media_WriteByte("byte"), 1;              // write a byte to the current stream position
002019  002237  // Syntax: media_WriteByte(arg1);
002020  002238  // Usage : var := media_WriteByte(arg1);
002021  002239  // *Notes : Writes and Returns xxxxx
002022  002240  //       : After the write the Address pointer is automatically
002023  002241  //       : incremented by 1.
002024  002242        
002025  002243  func media_WriteWord("word"), 1;            // write a word to the current stream position
002026  002244  // Syntax: media_WriteWord(arg1);
002027  002245  // Usage : var := media_WriteWord(arg1);
002028  002246  // *Notes : Writes and Returns xxxxx
002029  002247  //       : After the write the Address pointer is automatically
002030  002248  //       : incremented by 2.
002031  002249        
002032  002250  func media_Image("x", "y"), 0;            // display image at position x y
002033  002251  // Syntax: media_Image(x, y);
002034  002252  // Usage : media_Image(arg1, arg2);
002035  002253  // Notes : Display an image from the uSD card at screen location
002036  002254  //       : specified by x,y (top left corner). The location of the
002037  002255  //       : Image in the uSD card must be specified by
002038  002256  //       : media_setSector(Image_Sector_Add) function.
002039  002257        
002040  002258  func media_Flush(), 1;                    // after writing to media, flush the sector and write
002041  002259  // Syntax: media_Flush();
002042  002260  // Usage : var := media_Flush();
002043  002261  // *Notes : After writing any data to a sector, media_Flush() should be called to ensure that the current sector that
002044  002262  //       : is being written is correctly stored back to the media else write operations may be unpredictable.
002045  002263        
002046  002264  func media_Init(), 1;                    // initialize uSD card
002047  002265  // Usage : media_Init();
002048  002266  // Notes : Initialise uSD CARD
002049  002267  //       : Response: 0 = No Card
002050  002268  //       :           1 = Card Initialised
002051  002269        
002052  002270  func __reserved23(), 0; // do not remove
002053  002271  func __reserved24(), 0; // do not remove
002054  002272  func __reserved25(), 0; // do not remove
002055  002273  func __reserved26(), 0; // do not remove
002056  002274        
002057  002275  //==============================================//
002058  002276  // Communications Function Prototypes           //
002059  002277  // NB Primary COM port has fixed pins,          //
002060  002278  // COM1, COM2 and COM3 must have pins assigned. //
002061  002279  //==============================================//
002062  002280  func setbaud("baudnum"), 0;            // set baud rate of COM0
002063  002281  // Syntax: setbaud(baud_number);
002064  002282  // Usage : setbaud(BAUD_128000);        //Set baud rate to 128000bps
002065  002283  // *Notes : argument specifies the baud rate using pre-defined constant.
002066  002284  //       : The pre-defined constant is a value of 0-19 , and internally
002067  002285  //       : this is used as a table pointer to get the baud rate divisor
002068  002286  //       : value for one of the 20 selected baud rates, control is then
002069  002287  //       : passed to com_SetBaud(COM0, baudlookup[baud_number]);
002070  002288  //       : The pre-defined constants equate to a value of 0-19.
002071  002289  //       : If a value other than 0-19 is used, a run time error (eror 25)
002072  002290  //       : will occur.
002073  002291        
002074  002292  // baud divisor rates for legacy setbaud(n);
002075  002293  #CONST
002076  002315  #END
002077  002316        
002078  002317        
002079  002318  func com_SetBaud("comport","baudrate/10"), 1;
002080  002319  // Syntax: com_SetBaud("comport","baudrate/10");
002081  002320  // Usage : com_SetBaud(COM1, 960);   // set COM1 to 9600 baud
002082  002321  // Notes : sets to any viable baud rate from 160 to 655350
002083  002322  // return true if baud rate was acceptable
002084  002323        
002085  002324        
002086  002325  func COM1_RX_pin("pin"), 1;        // select the hardware pin for the COM1 receive line
002087  002326  // Usage : COM1_RX_pin(PA0); // set COM1 RX to PA0 pin
002088  002327  // Notes : Selects the hardware pin for COM1 receive line.
002089  002328  //       : Note that only a single pin can be mapped to COM1 RX.
002090  002329  //       : Pins that can be mapped to COMx TX are PA0 to PA13
002091  002330  //       : Pins that can't be mapped to COMx RX are PA14 and PA15
002092  002331  //       : If the pin argument is 0 the function has no effect
002093  002332  //       : The pin is automatically set to an input.
002094  002333  //       : If the COMx RX pin is set to same pin as COMx TX pin (eg for a loopback check)
002095  002334  //       : it is necessary to configure the input pin first, eg
002096  002335  //       :     COM1_RX_pin(PA7);     // configure COM1 RX to PA7 (this disconnects anything else)
002097  002336  //       :     COM1_TX_pin(PA7));    // configure COM1 TX to PA7
002098  002337  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002099  002338        
002100  002339  func COM2_RX_pin("pin"), 1;        // select the hardware pin for the COM2 receive line
002101  002340  // Usage : COM2_RX_pin(PA0); // set COM2 RX to PA0 pin
002102  002341  // Notes : Selects the hardware pin for COM2 receive line.
002103  002342  //       : Note that only a single pin can be mapped to COM2 RX.
002104  002343  //       : Pins that can be mapped to COMx TX are PA0 to PA13
002105  002344  //       : Pins that can't be mapped to COMx RX are PA14 and PA15
002106  002345  //       : If the pin argument is 0 the function has no effect
002107  002346  //       : The pin is automatically set to an input.
002108  002347  //       : If the COMx RX pin is set to same pin as COMx TX pin (eg for a loopback check)
002109  002348  //       : it is necessary to configure the input pin first, eg
002110  002349  //       :     COM2_RX_pin(PA7);     // configure COM2 RX to PA7 (this disconnects anything else)
002111  002350  //       :     COM2_TX_pin(PA7));    // configure COM2 TX to PA7
002112  002351  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002113  002352        
002114  002353  func COM3_RX_pin("pin"), 1;        // select the hardware pin for the COM3 receive line
002115  002354  // Usage : COM3_RX_pin(PA0); // set COM3 RX to PA0 pin
002116  002355  // Notes : Selects the hardware pin for COM3 receive line.
002117  002356  //       : Note that only a single pin can be mapped to COM3 RX.
002118  002357  //       : Pins that can be mapped to COMx TX are PA0 to PA13
002119  002358  //       : Pins that can't be mapped to COMx RX are PA14 and PA15
002120  002359  //       : If the pin argument is 0 the function has no effect
002121  002360  //       : The pin is automatically set to an input.
002122  002361  //       : If the COMx RX pin is set to same pin as COMx TX pin (eg for a loopback check)
002123  002362  //       : it is necessary to configure the input pin first, eg
002124  002363  //       :     COM3_RX_pin(PA7);     // configure COM3 RX to PA7 (this disconnects anything else)
002125  002364  //       :     COM3_TX_pin(PA7));    // configure COM3 TX to PA7
002126  002365  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002127  002366        
002128  002367        
002129  002368  func COM1_TX_pin("pin"), 1;        // select the hardware pin for COM1 transmit line
002130  002369  // Syntax: COM1_TX_pin(pin);
002131  002370  // Usage : COM1_TX_pin(PA2); // set COM1 TX to PA2 pin
002132  002371  // Notes : Select the hardware pin for COMx transmit line.
002133  002372  //       : Pins that can be mapped to COMx TX are PA1, PA3 to PA9, and PA12 or PA13
002134  002373  //       : Pins that can't be mapped to COMx TX are PA0, PA2, PA10, PA11, PA14 and PA15
002135  002374  //       : If the pin argument is 0, COMx TX is disconnected from all pins.
002136  002375  //       : The pin is automatically set to an output.
002137  002376  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002138  002377        
002139  002378  func COM2_TX_pin("pin"), 1;        // select the hardware pin for COM2 transmit line
002140  002379  // Syntax: COM2_TX_pin(pin);
002141  002380  // Usage : COM2_TX_pin(PA2); // set COM2 TX to PA2 pin
002142  002381  // Notes : Select the hardware pin for COMx transmit line.
002143  002382  //       : Pins that can be mapped to COMx TX are PA1, PA3 to PA9, and PA12 or PA13
002144  002383  //       : Pins that can't be mapped to COMx TX are PA0, PA2, PA10, PA11, PA14 and PA15
002145  002384  //       : If the pin argument is 0, COMx TX is disconnected from all pins.
002146  002385  //       : The pin is automatically set to an output.
002147  002386  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002148  002387        
002149  002388  func COM3_TX_pin("pin"), 1;        // select the hardware pin for COM3 transmit line
002150  002389  // Syntax: COM3_TX_pin(pin);
002151  002390  // Usage : COM3_TX_pin(PA2); // set COM3 TX to PA2 pin
002152  002391  // Notes : Select the hardware pin for COMx transmit line.
002153  002392  //       : Pins that can be mapped to COMx TX are PA1, PA3 to PA9, and PA12 or PA13
002154  002393  //       : Pins that can't be mapped to COMx TX are PA0, PA2, PA10, PA11, PA14 and PA15
002155  002394  //       : If the pin argument is 0, COMx TX is disconnected from all pins.
002156  002395  //       : The pin is automatically set to an output.
002157  002396  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002158  002397        
002159  002398  func com_Init("buf","bufsize","qualifier"), 0;  // set up a interrupt driven ring buffer for comms
002160  002399  // Syntax: com_Init(buffer, bufsize, qualifier);
002161  002400  // Usage1: com_Init(mybuf, 20, 0);
002162  002401  // Usage2: com_Init(mybuf, 20, ':');
002163  002402  // Notes : initialize a serial capture buffer for the comms input
002164  002403  //       : The program must declare a var array as a circular buffer.
002165  002404  //       : Usage1 declares a circular buffer which will continually
002166  002405  //       : buffer characters.
002167  002406  //       : Usage2 must receive ':' before any characters will
002168  002407  //       : accumulate in the buffer.
002169  002408        
002170  002409  func com1_Init("buf","bufsize","qualifier"), 0;
002171  002410  // Syntax: com1_Init(buffer, bufsize, qualifier);
002172  002411  // Usage1: com1_Init(mybuf, 20, 0);
002173  002412  // Usage2: com1_Init(mybuf, 20, ':');
002174  002413  // Notes : initialize a serial capture buffer for the comms input
002175  002414  //       : The program must declare a var array as a circular buffer.
002176  002415  //       : Usage1 declares a circular buffer which will continually
002177  002416  //       : buffer characters.
002178  002417  //       : Usage2 must receive ':' before any characters will
002179  002418  //       : accumulate in the buffer.
002180  002419        
002181  002420  func com2_Init("buf","bufsize","qualifier"), 0;
002182  002421  // Syntax: com2_Init(buffer, bufsize, qualifier);
002183  002422  // Usage1: com2_Init(mybuf, 20, 0);
002184  002423  // Usage2: com2_Init(mybuf, 20, ':');
002185  002424  // Notes : initialize a serial capture buffer for the comms input
002186  002425  //       : The program must declare a var array as a circular buffer.
002187  002426  //       : Usage1 declares a circular buffer which will continually
002188  002427  //       : buffer characters.
002189  002428  //       : Usage2 must receive ':' before any characters will
002190  002429  //       : accumulate in the buffer.
002191  002430        
002192  002431  func com3_Init("buf","bufsize","qualifier"), 0;
002193  002432  // Syntax: com3_Init(buffer, bufsize, qualifier);
002194  002433  // Usage1: com3_Init(mybuf, 20, 0);
002195  002434  // Usage2: com3_Init(mybuf, 20, ':');
002196  002435  // Notes : initialize a serial capture buffer for the comms input
002197  002436  //       : The program must declare a var array as a circular buffer.
002198  002437  //       : Usage1 declares a circular buffer which will continually
002199  002438  //       : buffer characters.
002200  002439  //       : Usage2 must receive ':' before any characters will
002201  002440  //       : accumulate in the buffer.
002202  002441        
002203  002442        
002204  002443  func serin(), 1;                // read a byte from primary com port COM0
002205  002444  // Syntax: serin();
002206  002445  // Usage : char := serin();
002207  002446  // Notes : Receives a character from the Serial Port COM0. The transmission format is:
002208  002447  //     : No Parity, 1 Stop Bit, 8 Data Bits (N,8,1).
002209  002448  //     : The default Baud Rate for COM0 is 115,200 bits per second or 115,200 baud.
002210  002449  //     : The baud rate can be changed under program control by using the setbaud(...)
002211  002450  //     : or the com_SetBaud(...) function.
002212  002451  //     : COM0 pins cannot be mapped, and are fixed as pins 42 and 33 (host adaptor / programming)
002213  002452  //     : serin may be buffered (refer to com_Init function above)
002214  002453  //     : Returns: -1 if no character is available
002215  002454  //     : Returns: -2 if a framing error or over-run has occurred (auto cleared)
002216  002455  //     : Returns: positive value 0 to 255 for a valid character received
002217  002456        
002218  002457  func serin1(), 1;
002219  002458  // Syntax: serinx();
002220  002459  // Usage : char := serinx();
002221  002460  // Notes : Receives a character from Serial Port COMx. The transmission format is:
002222  002461  //     : No Parity, 1 Stop Bit, 8 Data Bits (N,8,1).
002223  002462  //     : The default Baud Rate for COM1, COM2 and COM3 is 9600 baud.
002224  002463  //     : The baud rate can be changed under program control by using the com_SetBaud(...) function.
002225  002464  //     : serinx may be buffered (refer to comx_Init function above)
002226  002465  //     : serin RX pins must be mapped before use, (refer to COMx_RX_pin functions above)
002227  002466  //     : Returns: -1 if no character is available
002228  002467  //     : Returns: -2 if a framing error or over-run has occurred (auto cleared)
002229  002468  //     : Returns: positive value 0 to 255 for a valid character received
002230  002469        
002231  002470  func serin2(), 1;
002232  002471  // Syntax: serinx();
002233  002472  // Usage : char := serinx();
002234  002473  // Notes : Receives a character from Serial Port COMx. The transmission format is:
002235  002474  //     : No Parity, 1 Stop Bit, 8 Data Bits (N,8,1).
002236  002475  //     : The default Baud Rate for COM1, COM2 and COM3 is 9600 baud.
002237  002476  //     : The baud rate can be changed under program control by using the com_SetBaud(...) function.
002238  002477  //     : serinx may be buffered (refer to comx_Init function above)
002239  002478  //     : serin RX pins must be mapped before use, (refer to COMx_RX_pin functions above)
002240  002479  //     : Returns: -1 if no character is available
002241  002480  //     : Returns: -2 if a framing error or over-run has occurred (auto cleared)
002242  002481  //     : Returns: positive value 0 to 255 for a valid character received
002243  002482        
002244  002483  func serin3(), 1;
002245  002484  // Syntax: serinx();
002246  002485  // Usage : char := serinx();
002247  002486  // Notes : Receives a character from Serial Port COMx. The transmission format is:
002248  002487  //     : No Parity, 1 Stop Bit, 8 Data Bits (N,8,1).
002249  002488  //     : The default Baud Rate for COM1, COM2 and COM3 is 9600 baud.
002250  002489  //     : The baud rate can be changed under program control by using the com_SetBaud(...) function.
002251  002490  //     : serinx may be buffered (refer to comx_Init function above)
002252  002491  //     : serin RX pins must be mapped before use, (refer to COMx_RX_pin functions above)
002253  002492  //     : Returns: -1 if no character is available
002254  002493  //     : Returns: -2 if a framing error or over-run has occurred (auto cleared)
002255  002494  //     : Returns: positive value 0 to 255 for a valid character received
002256  002495        
002257  002496  func serout("char"), 0;                // write a byte to COM0
002258  002497  // Syntax: serout1("char");
002259  002498  // Usage : serout1(ch);
002260  002499  // Notes : send character to COM0
002261  002500        
002262  002501  func serout1("char"), 0;
002263  002502  // Syntax: seroutx("char");
002264  002503  // Usage : serout1(ch);
002265  002504  // Notes : send character to COMx
002266  002505        
002267  002506  func serout2("char"), 0;
002268  002507  // Syntax: seroutx("char");
002269  002508  // Usage : serout1(ch);
002270  002509  // Notes : send character to COMx
002271  002510        
002272  002511  func serout3("char"), 0;
002273  002512  // Syntax: seroutx("char");
002274  002513  // Usage : serout1(ch);
002275  002514  // Notes : send character to COMx
002276  002515        
002277  002516  func com_Reset(), 0;                 // reset the comms receiver
002278  002517  // Syntax: com_Reset();
002279  002518  // Usage : com_Reset();
002280  002519  // Notes : reset comms to default polled mode
002281  002520        
002282  002521  func com1_Reset(), 0;
002283  002522  // Syntax: com_Reset();
002284  002523  // Usage : com_Reset();
002285  002524  // Notes : reset comms to default polled mode
002286  002525        
002287  002526  func com2_Reset(), 0;
002288  002527  // Syntax: com_Reset();
002289  002528  // Usage : com_Reset();
002290  002529  // Notes : reset comms to default polled mode
002291  002530        
002292  002531  func com3_Reset(), 0;
002293  002532  // Syntax: com_Reset();
002294  002533  // Usage : com_Reset();
002295  002534  // Notes : reset comms to default polled mode
002296  002535        
002297  002536  func com_Count(), 1;                // return count of characters in receive buffer
002298  002537  // Syntax: com_Count();
002299  002538  // Usage : arg := com_Count();
002300  002539  // Notes : return count of buffered characters in buffer attachment
002301  002540        
002302  002541  func com1_Count(), 1;
002303  002542  // Syntax: com_Count();
002304  002543  // Usage : arg := com_Count();
002305  002544  // Notes : return count of buffered characters in buffer attachment
002306  002545        
002307  002546  func com2_Count(), 1;
002308  002547  // Syntax: com_Count();
002309  002548  // Usage : arg := com_Count();
002310  002549  // Notes : return count of buffered characters in buffer attachment
002311  002550        
002312  002551  func com3_Count(), 1;
002313  002552  // Syntax: com_Count();
002314  002553  // Usage : arg := com_Count();
002315  002554  // Notes : return count of buffered characters in buffer attachment
002316  002555        
002317  002556  func com_Full(), 1;                // return TRUE if receiver buffer filled to capcity
002318  002557  // Syntax: com_Full();
002319  002558  // Usage : if (com_Full() ,,,, go read buffer;
002320  002559  // Notes : return true if buffer full (not necessarily an error if
002321  002560  //       : buffer is sized to a packet size)
002322  002561        
002323  002562  func com1_Full(), 1;
002324  002563  // Syntax: com_Full();
002325  002564  // Usage : if (com_Full() ,,,, go read buffer;
002326  002565  // Notes : return true if buffer full (not necessarily an error if
002327  002566  //       : buffer is sized to a packet size)
002328  002567        
002329  002568  func com2_Full(), 1;
002330  002569  // Syntax: com_Full();
002331  002570  // Usage : if (com_Full() ,,,, go read buffer;
002332  002571  // Notes : return true if buffer full (not necessarily an error if
002333  002572  //       : buffer is sized to a packet size)
002334  002573        
002335  002574  func com3_Full(), 1;
002336  002575  // Syntax: com_Full();
002337  002576  // Usage : if (com_Full() ,,,, go read buffer;
002338  002577  // Notes : return true if buffer full (not necessarily an error if
002339  002578  //       : buffer is sized to a packet size)
002340  002579        
002341  002580  func com_Error(), 1;                // return comms errors comms error occurred
002342  002581  // Syntax: comx_Error();
002343  002582  // Usage : if (com_Error() ) ...... take recovery action;
002344  002583  // Notes : return non zero if any errors low level comms errors occured
002345  002584  // returns :
002346  002585  // bit0 = Receiver Overflow Error
002347  002586  // bit1 = Receiver Framing Error
002348  002587  // bit2 = Transmit Buffer Overflow
002349  002588        
002350  002589  func com1_Error(), 1;
002351  002590  // Syntax: comx_Error();
002352  002591  // Usage : if (com_Error() ) ...... take recovery action;
002353  002592  // Notes : return non zero if any errors low level comms errors occured
002354  002593  // returns :
002355  002594  // bit0 = Receiver Overflow Error
002356  002595  // bit1 = Receiver Framing Error
002357  002596  // bit2 = Transmit Buffer Overflow
002358  002597        
002359  002598  func com2_Error(), 1;
002360  002599  // Syntax: comx_Error();
002361  002600  // Usage : if (com_Error() ) ...... take recovery action;
002362  002601  // Notes : return non zero if any errors low level comms errors occured
002363  002602  // returns :
002364  002603  // bit0 = Receiver Overflow Error
002365  002604  // bit1 = Receiver Framing Error
002366  002605  // bit2 = Transmit Buffer Overflow
002367  002606        
002368  002607  func com3_Error(), 1;
002369  002608  // Syntax: comx_Error();
002370  002609  // Usage : if (com_Error() ) ...... take recovery action;
002371  002610  // Notes : return non zero if any errors low level comms errors occured
002372  002611  // returns :
002373  002612  // bit0 = Receiver Overflow Error
002374  002613  // bit1 = Receiver Framing Error
002375  002614  // bit2 = Transmit Buffer Overflow
002376  002615        
002377  002616  func com_Sync(), 1;                // returns TRUE if qualifier has been received
002378  002617  // Usage : comx_Sync();
002379  002618  // return true if sync character has been received in com_Init("...") mode
002380  002619        
002381  002620  func com1_Sync(), 1;
002382  002621  // Usage : comx_Sync();
002383  002622  // return true if sync character has been received in com_Init("...") mode
002384  002623        
002385  002624  func com2_Sync(), 1;
002386  002625  // Usage : comx_Sync();
002387  002626  // return true if sync character has been received in com_Init("...") mode
002388  002627        
002389  002628  func com3_Sync(), 1;
002390  002629  // Usage : comx_Sync();
002391  002630  // return true if sync character has been received in com_Init("...") mode
002392  002631        
002393  002632        
002394  002633  func com_TXbuffer("buf", "bufsize", "pin"), 0;    // sets the buffer location for buffered transmission
002395  002634  // Usage : com_TXbuffer(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
002396  002635  // Usage : com_TXbuffer(0, 0, 0);             // revert to non buffered service
002397  002636  // Notes : initialize a serial buffer for the COM0 output.
002398  002637  //       : The program must declare a var array as a circular buffer.
002399  002638  //       : When a TX buffer is declared for comms, the transmission
002400  002639  //       : of characters becomes non blocking. If the buffer has
002401  002640  //       : insufficient space to accept the next character from a
002402  002641  //       : serout_x() function, the excess characters will be ignored,
002403  002642  //       : and the com_Full_x() error will be asserted.   If the
002404  002643  //       : TX buffer is no longer required, just set the buffer pointer
002405  002644  //       : to zero, the size in this case doesnt matter and is ignored.
002406  002645  //       : The function can resize or reallocated to another buffer at
002407  002646  //       : any time. The buffer is flushed before any changes are made.
002408  002647  //       : "pin" designates an IO pin to control a bi-directional
002409  002648  //       : control device for half duplex mode. "pin" will go HI at the
002410  002649  //       : start of a transmission, and will return low after the final
002411  002650  //       : byte is transmitted. If not required, just set "pin" to zero.
002412  002651        
002413  002652  func com1_TXbuffer("buf", "bufsize", "pin"), 0;
002414  002653  // Usage : com1_TXbuffer(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
002415  002654  // Usage : com1_TXbuffer(0, 0, 0);              // revert to non buffered service
002416  002655  // Notes : initialize a serial buffer for the COM0 output.
002417  002656  //       : The program must declare a var array as a circular buffer.
002418  002657  //       : When a TX buffer is declared for comms, the transmission
002419  002658  //       : of characters becomes non blocking. If the buffer has
002420  002659  //       : insufficient space to accept the next character from a
002421  002660  //       : serout_x() function, the excess characters will be ignored,
002422  002661  //       : and the com_Full_x() error will be asserted.   If the
002423  002662  //       : TX buffer is no longer required, just set the buffer pointer
002424  002663  //       : to zero, the size in this case doesnt matter and is ignored.
002425  002664  //       : The function can resize or reallocated to another buffer at
002426  002665  //       : any time. The buffer is flushed before any changes are made.
002427  002666  //       : "pin" designates an IO pin to control a bi-directional
002428  002667  //       : control device for half duplex mode. "pin" will go HI at the
002429  002668  //       : start of a transmission, and will return low after the final
002430  002669  //       : byte is transmitted. If not required, just set "pin" to zero.
002431  002670        
002432  002671  func com2_TXbuffer("buf", "bufsize", "pin"), 0;
002433  002672  // Usage : com2_TXbuffer(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
002434  002673  // Usage : com2_TXbuffer(0, 0, 0);              // revert to non buffered service
002435  002674  // Notes : initialize a serial buffer for the COM0 output.
002436  002675  //       : The program must declare a var array as a circular buffer.
002437  002676  //       : When a TX buffer is declared for comms, the transmission
002438  002677  //       : of characters becomes non blocking. If the buffer has
002439  002678  //       : insufficient space to accept the next character from a
002440  002679  //       : serout_x() function, the excess characters will be ignored,
002441  002680  //       : and the com_Full_x() error will be asserted.   If the
002442  002681  //       : TX buffer is no longer required, just set the buffer pointer
002443  002682  //       : to zero, the size in this case doesnt matter and is ignored.
002444  002683  //       : The function can resize or reallocated to another buffer at
002445  002684  //       : any time. The buffer is flushed before any changes are made.
002446  002685  //       : "pin" designates an IO pin to control a bi-directional
002447  002686  //       : control device for half duplex mode. "pin" will go HI at the
002448  002687  //       : start of a transmission, and will return low after the final
002449  002688  //       : byte is transmitted. If not required, just set "pin" to zero.
002450  002689        
002451  002690  func com3_TXbuffer("buf", "bufsize", "pin"), 0;
002452  002691  // Usage : com3_TXbuffer(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
002453  002692  // Usage : com3_TXbuffer(0, 0, 0);              // revert to non buffered service
002454  002693  // Notes : initialize a serial buffer for the COM0 output.
002455  002694  //       : The program must declare a var array as a circular buffer.
002456  002695  //       : When a TX buffer is declared for comms, the transmission
002457  002696  //       : of characters becomes non blocking. If the buffer has
002458  002697  //       : insufficient space to accept the next character from a
002459  002698  //       : serout_x() function, the excess characters will be ignored,
002460  002699  //       : and the com_Full_x() error will be asserted.   If the
002461  002700  //       : TX buffer is no longer required, just set the buffer pointer
002462  002701  //       : to zero, the size in this case doesnt matter and is ignored.
002463  002702  //       : The function can resize or reallocated to another buffer at
002464  002703  //       : any time. The buffer is flushed before any changes are made.
002465  002704  //       : "pin" designates an IO pin to control a bi-directional
002466  002705  //       : control device for half duplex mode. "pin" will go HI at the
002467  002706  //       : start of a transmission, and will return low after the final
002468  002707  //       : byte is transmitted. If not required, just set "pin" to zero.
002469  002708        
002470  002709        
002471  002710  func com_TXcount(), 1;                // return count of characters in COM0 TX buffer
002472  002711  // Syntax: com_TXcount();
002473  002712  // Usage : arg := com_Count();
002474  002713  // Notes : return count of characters remaining in COM0 transmit buffer
002475  002714  //       : that was previously allocated with com_TXbuffer(...);
002476  002715        
002477  002716  func com1_TXcount(), 1;
002478  002717  // Syntax: com_TXcount();
002479  002718  // Usage : arg := com_Count();
002480  002719  // Notes : return count of characters remaining in COM0 transmit buffer
002481  002720  //       : that was previously allocated with com_TXbuffer(...);
002482  002721        
002483  002722  func com2_TXcount(), 1;
002484  002723  // Syntax: com_TXcount();
002485  002724  // Usage : arg := com_Count();
002486  002725  // Notes : return count of characters remaining in COM0 transmit buffer
002487  002726  //       : that was previously allocated with com_TXbuffer(...);
002488  002727        
002489  002728  func com3_TXcount(), 1;
002490  002729  // Syntax: com_TXcount();
002491  002730  // Usage : arg := com_Count();
002492  002731  // Notes : return count of characters remaining in COM0 transmit buffer
002493  002732  //       : that was previously allocated with com_TXbuffer(...);
002494  002733        
002495  002734  func com_TXemptyEvent("function"), 1;  // sets a function to be called when COM0 TX buffer empty
002496  002735  // Usage : arg := com_TXemptyEvent();
002497  002736  // Notes : If a comms TX buffer that was previously allocated with
002498  002737  //       : com_TXbuffer(...);, this function can be used to set up
002499  002738  //       : a function to be called when the COM0 TX buffer is empty.
002500  002739  //       : This is useful for either reloading the TX buffer, setting
002501  002740  //       : or clearing a pin to change the direction of eg a RS485
002502  002741  //       : line driver, or any other form of traffic control.
002503  002742  //       : The event function must not have any parameters.
002504  002743  //       : To disable the event, simply call com_TXemptyEvent(0).
002505  002744  //       : com_TXbuffer(...); also resets any active event.
002506  002745  //       : com_TXemptyEvent returns any previous event function
002507  002746  //       : address, or zero if there was no previous function.
002508  002747        
002509  002748  func com1_TXemptyEvent("function"), 1;
002510  002749  // Usage : arg := com1_TXemptyEvent();
002511  002750  // Notes : If a comms TX buffer that was previously allocated with
002512  002751  //       : com_TXbuffer(...);, this function can be used to set up
002513  002752  //       : a function to be called when the COM0 TX buffer is empty.
002514  002753  //       : This is useful for either reloading the TX buffer, setting
002515  002754  //       : or clearing a pin to change the direction of eg a RS485
002516  002755  //       : line driver, or any other form of traffic control.
002517  002756  //       : The event function must not have any parameters.
002518  002757  //       : To disable the event, simply call com_TXemptyEvent(0).
002519  002758  //       : com_TXbuffer(...); also resets any active event.
002520  002759  //       : com_TXemptyEvent returns any previous event function
002521  002760  //       : address, or zero if there was no previous function.
002522  002761        
002523  002762  func com2_TXemptyEvent("function"), 1;
002524  002763  // Usage : arg := com2_TXemptyEvent();
002525  002764  // Notes : If a comms TX buffer that was previously allocated with
002526  002765  //       : com_TXbuffer(...);, this function can be used to set up
002527  002766  //       : a function to be called when the COM0 TX buffer is empty.
002528  002767  //       : This is useful for either reloading the TX buffer, setting
002529  002768  //       : or clearing a pin to change the direction of eg a RS485
002530  002769  //       : line driver, or any other form of traffic control.
002531  002770  //       : The event function must not have any parameters.
002532  002771  //       : To disable the event, simply call com_TXemptyEvent(0).
002533  002772  //       : com_TXbuffer(...); also resets any active event.
002534  002773  //       : com_TXemptyEvent returns any previous event function
002535  002774  //       : address, or zero if there was no previous function.
002536  002775        
002537  002776  func com3_TXemptyEvent("function"), 1;
002538  002777  // Usage : arg := com3_TXemptyEvent();
002539  002778  // Notes : If a comms TX buffer that was previously allocated with
002540  002779  //       : com_TXbuffer(...);, this function can be used to set up
002541  002780  //       : a function to be called when the COM0 TX buffer is empty.
002542  002781  //       : This is useful for either reloading the TX buffer, setting
002543  002782  //       : or clearing a pin to change the direction of eg a RS485
002544  002783  //       : line driver, or any other form of traffic control.
002545  002784  //       : The event function must not have any parameters.
002546  002785  //       : To disable the event, simply call com_TXemptyEvent(0).
002547  002786  //       : com_TXbuffer(...); also resets any active event.
002548  002787  //       : com_TXemptyEvent returns any previous event function
002549  002788  //       : address, or zero if there was no previous function.
002550  002789        
002551  002790  func com_TXbufferHold("state"), 1; // hold or release a com_TXbuffer
002552  002791  // Usage : arg := com_TXbufferHold(OFF);  // start sending the buffer
002553  002792  // Notes : Expecting that a comms TX buffer that was previously allocated with
002554  002793  //       : com_TXbuffer(...);, com_TXbufferHold(ON) can be used to stop
002555  002794  //       : the buffer being sent wile it is being loaded. Mormally, when
002556  002795  //       : using buffered comms, the transmit process will begin
002557  002796  //       : immediately. This is often undesirable for 2 reasons,
002558  002797  //       : 1] you may wish to build a packet then send it later
002559  002798  //       : 2] when using com_TXemptyEvent erroneous empty events will occur
002560  002799  //       : as the FIFO buffer is constantly trying to empty while
002561  002800  //       : you are busy tring to fill it.
002562  002801  // return -1 if function is called illegally when TX comms is not buffered.
002563  002802  // return buffer count when called with argument of 1, eg com_TXbufferHold(ON)
002564  002803  // return 0 when argument is zero, eg com_TXbufferHold(OFF)
002565  002804        
002566  002805  func com1_TXbufferHold("state"), 1;
002567  002806  // Usage : arg := com1_TXbufferHold(OFF);  // start sending the buffer
002568  002807  // Notes : Expecting that a comms TX buffer that was previously allocated with
002569  002808  //       : com_TXbuffer(...);, com_TXbufferHold(ON) can be used to stop
002570  002809  //       : the buffer being sent wile it is being loaded. Mormally, when
002571  002810  //       : using buffered comms, the transmit process will begin
002572  002811  //       : immediately. This is often undesirable for 2 reasons,
002573  002812  //       : 1] you may wish to build a packet then send it later
002574  002813  //       : 2] when using com_TXemptyEvent erroneous empty events will occur
002575  002814  //       : as the FIFO buffer is constantly trying to empty while
002576  002815  //       : you are busy tring to fill it.
002577  002816  // return -1 if function is called illegally when TX comms is not buffered.
002578  002817  // return buffer count when called with argument of 1, eg com_TXbufferHold(ON)
002579  002818  // return 0 when argument is zero, eg com_TXbufferHold(OFF)
002580  002819        
002581  002820  func com2_TXbufferHold("state"), 1;
002582  002821  // Usage : arg := com2_TXbufferHold(OFF);  // start sending the buffer
002583  002822  // Notes : Expecting that a comms TX buffer that was previously allocated with
002584  002823  //       : com_TXbuffer(...);, com_TXbufferHold(ON) can be used to stop
002585  002824  //       : the buffer being sent wile it is being loaded. Mormally, when
002586  002825  //       : using buffered comms, the transmit process will begin
002587  002826  //       : immediately. This is often undesirable for 2 reasons,
002588  002827  //       : 1] you may wish to build a packet then send it later
002589  002828  //       : 2] when using com_TXemptyEvent erroneous empty events will occur
002590  002829  //       : as the FIFO buffer is constantly trying to empty while
002591  002830  //       : you are busy tring to fill it.
002592  002831  // return -1 if function is called illegally when TX comms is not buffered.
002593  002832  // return buffer count when called with argument of 1, eg com_TXbufferHold(ON)
002594  002833  // return 0 when argument is zero, eg com_TXbufferHold(OFF)
002595  002834        
002596  002835  func com3_TXbufferHold("state"), 1;
002597  002836  // Usage : arg := com3_TXbufferHold(OFF);  // start sending the buffer
002598  002837  // Notes : Expecting that a comms TX buffer that was previously allocated with
002599  002838  //       : com_TXbuffer(...);, com_TXbufferHold(ON) can be used to stop
002600  002839  //       : the buffer being sent wile it is being loaded. Mormally, when
002601  002840  //       : using buffered comms, the transmit process will begin
002602  002841  //       : immediately. This is often undesirable for 2 reasons,
002603  002842  //       : 1] you may wish to build a packet then send it later
002604  002843  //       : 2] when using com_TXemptyEvent erroneous empty events will occur
002605  002844  //       : as the FIFO buffer is constantly trying to empty while
002606  002845  //       : you are busy tring to fill it.
002607  002846  // return -1 if function is called illegally when TX comms is not buffered.
002608  002847  // return buffer count when called with argument of 1, eg com_TXbufferHold(ON)
002609  002848  // return 0 when argument is zero, eg com_TXbufferHold(OFF)
002610  002849        
002611  002850  func com_Mode("8" ,"N", "1", "comport"), 1 ;
002612  002851  // Syntax   : comx_Mode("databits", "parity", "Stopbits", "comport");
002613  002852  // Usage    : comx_Mode(8, 'N', 1, COM0);                        // set COM0 to 8N1
002614  002853  // *Notes   : Data Bits must be 8
002615  002854  //          : Parity may be 'N', 'O' or 'E'.
002616  002855  //          : Stop Bits may be 1 or 2.
002617  002856  // returns true if mode was acceptable
002618  002857        
002619  002858  func com_TXblock("buf", "bufsize"), 0;                       // commence a block transmission
002620  002859  // Syntax   : com_TXblock("buf", "bufsize");
002621  002860  // Usage    : com_TXblock(mybuf, 30);                         // point to the TX buffer and send 30 character
002622  002861  // *Notes   : Bufsize bytes are transmitted to the serial port from the string pointer "buf".
002623  002862  //          : if a transmit buffer is active and space is available this function will return almost
002624  002863  //          : immediately otherwise it will block until until the space is available, or the data is transmitted.
002625  002864        
002626  002865  func com_RXblock("buf", "bufsize"), 0;                       // commence a block reception
002627  002866  // Syntax   : com_RXblock("buf", "bufsize");
002628  002867  // Usage    : com_RXblock(mybuf, 30);                        // point to the RX buffer and receive 30 character
002629  002868  // *Notes   : Bufsize bytes are received from the serial port to the string pointer "buf".
002630  002869  //          : if a receive buffer is active and bufsize characters are available this function will return almost
002631  002870  //          : immediately otherwise it will block until until the required bytes are received.
002632  002871        
002633  002872  func __reserved30(), 0; // do not remove
002634  002873        
002635  002874  //------------------------------------------------------------------//
002636  002875  //        Function Prototypes for I2C
002637  002876  //------------------------------------------------------------------//
002638  002877  func I2C1_Open("speed", "SCLpin", "SDApin"), 1;
002639  002878  // Syntax : I2C1_Openx(speed, SCLpin, SDApin),
002640  002879  // Usage  : I2C1_Open(I2C_MED, PA2, PA3);
002641  002880  // Notes  : configures the required I2C module
002642  002881  //        : see 'I2C timing related constants' and 'pin constants'
002643  002882  //        : Pins that can be mapped to SCLpin and SDApin are PA0 to PA13
002644  002883  //        : Pins that can't be mapped to SCLpin or SDApin are PA14 and PA15
002645  002884  //        : For I2C speeds of I2C_MED and I2C_FAST SCLpin may be PA14 and SDApin may be PA15
002646  002885  //        : This is a 'special case' to support Slew rate control for I2C_MED and also properly support I2C_FAST
002647  002886  //        : For other pin combinations I2C_MED does not support Slew rate control and I2C_FAST does not fully run at 1Mhz
002648  002887  // Returns: True if successful
002649  002888        
002650  002889        
002651  002890  func I2C2_Open("speed", "SCLpin", "SDApin"), 1;
002652  002891  // Syntax : I2C2_Openx(speed, SCLpin, SDApin),
002653  002892  // Usage  : I2C2_Open(I2C_MED, PA2, PA3);
002654  002893  // Notes  : configures the required I2C module
002655  002894  //        : see 'I2C timing related constants' and 'pin constants'
002656  002895  //        : Pins that can be mapped to SCLpin and SDApin are PA0 to PA13
002657  002896  //        : Pins that can't be mapped to SCLpin or SDApin are PA14 and PA15
002658  002897  //        : For I2C speeds of I2C_MED and I2C_FAST SCLpin may be PA14 and SDApin may be PA15
002659  002898  //        : This is a 'special case' to support Slew rate control for I2C_MED and also properly support I2C_FAST
002660  002899  //        : For other pin combinations I2C_MED does not support Slew rate control and I2C_FAST does not fully run at 1Mhz
002661  002900  // Returns: True if successful
002662  002901        
002663  002902        
002664  002903  func I2C3_Open("speed", "SCLpin", "SDApin"), 1;
002665  002904  // Syntax : I2C3_Openx(speed, SCLpin, SDApin),
002666  002905  // Usage  : I2C3_Open(I2C_MED, PA2, PA3);
002667  002906  // Notes  : configures the required I2C module
002668  002907  //        : see 'I2C timing related constants' and 'pin constants'
002669  002908  //        : Pins that can be mapped to SCLpin and SDApin are PA0 to PA13
002670  002909  //        : Pins that can't be mapped to SCLpin or SDApin are PA14 and PA15
002671  002910  //        : For I2C speeds of I2C_MED and I2C_FAST SCLpin may be PA14 and SDApin may be PA15
002672  002911  //        : This is a 'special case' to support Slew rate control for I2C_MED and also properly support I2C_FAST
002673  002912  //        : For other pin combinations I2C_MED does not support Slew rate control and I2C_FAST does not fully run at 1Mhz
002674  002913  // Returns: True if successful
002675  002914        
002676  002915        
002677  002916  func I2C1_Close(), 0;
002678  002917  // Usage : I2C1_Close();
002679  002918  // Notes : disables the I2C1 module.
002680  002919        
002681  002920  func I2C2_Close(), 0;
002682  002921  // Usage : I2C2_Close();
002683  002922  // Notes : disables the I2C2 module.
002684  002923        
002685  002924  func I2C3_Close(), 0;
002686  002925  // Usage : I2C3_Close();
002687  002926  // Notes : disables the I2C3 module.
002688  002927        
002689  002928  func I2C1_Start(), 1;
002690  002929  // Syntax: I2C1_Start();
002691  002930  // Usage : I2C1_Start();
002692  002931  // Notes : generates a Start condition.
002693  002932  //       : returns true if successful (usually ignored)
002694  002933        
002695  002934  func I2C2_Start(), 1;
002696  002935  // Syntax: I2C2_Start();
002697  002936  // Usage : I2C2_Start();
002698  002937  // Notes : generates a Start condition.
002699  002938  //       : returns true if successful (usually ignored)
002700  002939        
002701  002940  func I2C3_Start(), 1;
002702  002941  // Syntax: I2C3_Start();
002703  002942  // Usage : I2C3_Start();
002704  002943  // Notes : generates a Start condition.
002705  002944  //       : returns true if successful (usually ignored)
002706  002945        
002707  002946  func I2C1_Stop(), 1;
002708  002947  // Syntax: I2C1_Stop();
002709  002948  // Usage : I2C1_Stop();
002710  002949  // Notes : generates a Stop condition.
002711  002950  //       : returns true if successful (usually ignored)
002712  002951        
002713  002952  func I2C2_Stop(), 1;
002714  002953  // Syntax: I2C2_Stop();
002715  002954  // Usage : I2C2_Stop();
002716  002955  // Notes : generates a Stop condition.
002717  002956  //       : returns true if successful (usually ignored)
002718  002957        
002719  002958  func I2C3_Stop(), 1;
002720  002959  // Syntax: I2C3_Stop();
002721  002960  // Usage : I2C3_Stop();
002722  002961  // Notes : generates a Stop condition.
002723  002962  //       : returns true if successful (usually ignored)
002724  002963        
002725  002964  func I2C1_Restart(), 1;
002726  002965  // Syntax: I2C1_Restart();
002727  002966  // Usage : I2C1_Restart();
002728  002967  // Notes : generates a Restart condition.
002729  002968  //       : returns true if successful (usually ignored)
002730  002969        
002731  002970  func I2C2_Restart(), 1;
002732  002971  // Syntax: I2C2_Restart();
002733  002972  // Usage : I2C2_Restart();
002734  002973  // Notes : generates a Restart condition.
002735  002974  //       : returns true if successful (usually ignored)
002736  002975        
002737  002976  func I2C3_Restart(), 1;
002738  002977  // Syntax: I2C3_Restart();
002739  002978  // Usage : I2C3_Restart();
002740  002979  // Notes : generates a Restart condition.
002741  002980  //       : returns true if successful (usually ignored)
002742  002981        
002743  002982  func I2C1_Read(), 1;
002744  002983  // Syntax: I2C1_Read();
002745  002984  // Usage : ch := I2C1_Read();
002746  002985  // Notes : reads a single byte from the I2C Bus.
002747  002986        
002748  002987  func I2C2_Read(), 1;
002749  002988  // Syntax: I2C2_Read();
002750  002989  // Usage : ch := I2C2_Read();
002751  002990  // Notes : reads a single byte from the I2C Bus.
002752  002991        
002753  002992  func I2C3_Read(), 1;
002754  002993  // Syntax: I2C3_Read();
002755  002994  // Usage : ch := I2C3_Read();
002756  002995  // Notes : reads a single byte from the I2C Bus.
002757  002996        
002758  002997  func I2C1_Write("byte"), 1;
002759  002998  // Syntax: I2C1_Write(byte);
002760  002999  // Usage : r := I2C1_Write(ch);
002761  003000  // Notes : is used to write a byte to the I2C bus.
002762  003001  //       : Returns 0 if failed, 1 if no ack, 2 if ack
002763  003002        
002764  003003  func I2C2_Write("byte"), 1;
002765  003004  // Syntax: I2C2_Write(byte);
002766  003005  // Usage : r := I2C2_Write(ch);
002767  003006  // Notes : is used to write a byte to the I2C bus.
002768  003007  //       : Returns 0 if failed, 1 if no ack, 2 if ack
002769  003008        
002770  003009  func I2C3_Write("byte"), 1;
002771  003010  // Syntax: I2C3_Write(byte);
002772  003011  // Usage : r := I2C3_Write(ch);
002773  003012  // Notes : is used to write a byte to the I2C bus.
002774  003013  //       : Returns 0 if failed, 1 if no ack, 2 if ack
002775  003014        
002776  003015  func I2C1_Ack(), 0;
002777  003016  // Syntax: I2C1_Ack();
002778  003017  // Usage : I2C1_Ack();
002779  003018  // Notes : generates the acknowledge condition.
002780  003019        
002781  003020  func I2C2_Ack(), 0;
002782  003021  // Syntax: I2C2_Ack();
002783  003022  // Usage : I2C2_Ack();
002784  003023  // Notes : generates the acknowledge condition.
002785  003024        
002786  003025  func I2C3_Ack(), 0;
002787  003026  // Syntax: I2C3_Ack();
002788  003027  // Usage : I2C3_Ack();
002789  003028  // Notes : generates the acknowledge condition.
002790  003029        
002791  003030  func I2C1_Nack(), 0;
002792  003031  // Syntax: I2C1_Nack();
002793  003032  // Usage : I2C1_Nack();
002794  003033  // Notes : generates the negative acknowledge condition.
002795  003034        
002796  003035  func I2C2_Nack(), 0;
002797  003036  // Syntax: I2C2_Nack();
002798  003037  // Usage : I2C2_Nack();
002799  003038  // Notes : generates the negative acknowledge condition.
002800  003039        
002801  003040  func I2C3_Nack(), 0;
002802  003041  // Syntax: I2C3_Nack();
002803  003042  // Usage : I2C3_Nack();
002804  003043  // Notes : generates the negative acknowledge condition.
002805  003044        
002806  003045  func I2C1_AckStatus(), 1;
002807  003046  // Syntax: I2C1_AckStatus();
002808  003047  // Usage : r := I2C1_AckStatus();
002809  003048  // Notes : returns the ACK status from the device.
002810  003049        
002811  003050  func I2C2_AckStatus(), 1;
002812  003051  // Syntax: I2C2_AckStatus();
002813  003052  // Usage : r := I2C2_AckStatus();
002814  003053  // Notes : returns the ACK status from the device.
002815  003054        
002816  003055  func I2C3_AckStatus(), 1;
002817  003056  // Syntax: I2C3_AckStatus();
002818  003057  // Usage : r := I2C3_AckStatus();
002819  003058  // Notes : returns the ACK status from the device.
002820  003059        
002821  003060  func I2C1_AckPoll("control"), 1;
002822  003061  // Syntax: I2C1_AckPoll();
002823  003062  // Usage : r := I2C1_AckPoll(0xA0);
002824  003063  // Notes : waits for a device to return from ACK polling.
002825  003064        
002826  003065  func I2C2_AckPoll("control"), 1;
002827  003066  // Syntax: I2C2_AckPoll();
002828  003067  // Usage : r := I2C2_AckPoll(0xA0);
002829  003068  // Notes : waits for a device to return from ACK polling.
002830  003069        
002831  003070  func I2C3_AckPoll("control"), 1;
002832  003071  // Syntax: I2C3_AckPoll();
002833  003072  // Usage : r := I2C3_AckPoll(0xA0);
002834  003073  // Notes : waits for a device to return from ACK polling.
002835  003074        
002836  003075  func I2C1_Idle(), 1;
002837  003076  // Syntax : I2C1_Idle();
002838  003077  // Usage  : r := I2C1_Idle();
002839  003078  // Notes  : waits until the I2C Bus is Inactive.
002840  003079  //        : Times out if bus not idle within 1 second
002841  003080  // Returns: TRUE if successful, else failed (timed out)
002842  003081        
002843  003082  func I2C2_Idle(), 1;
002844  003083  // Syntax : I2C2_Idle();
002845  003084  // Usage  : r := I2C2_Idle();
002846  003085  // Notes  : waits until the I2C Bus is Inactive.
002847  003086  //        : Times out if bus not idle within 1 second
002848  003087  // Returns: TRUE if successful, else failed (timed out)
002849  003088        
002850  003089  func I2C3_Idle(), 1;
002851  003090  // Syntax : I2C3_Idle();
002852  003091  // Usage  : r := I2C3_Idle();
002853  003092  // Notes  : waits until the I2C Bus is Inactive.
002854  003093  //        : Times out if bus not idle within 1 second
002855  003094  // Returns: TRUE if successful, else failed (timed out)
002856  003095        
002857  003096        
002858  003097  func I2C1_Gets("buffer", "size"), 1;
002859  003098  // Syntax: I2C1_Gets("buffer", "size");
002860  003099  // Usage : r := I2C1_Gets(mybuf, 16);
002861  003100  // Notes : only reads up to "size" characters into "buffer"
002862  003101  //       : Reads up to asciiz terminator including terminator
002863  003102        
002864  003103  func I2C2_Gets("buffer", "size"), 1;
002865  003104  // Syntax: I2C2_Gets("buffer", "size");
002866  003105  // Usage : r := I2C2_Gets(mybuf, 16);
002867  003106  // Notes : only reads up to "size" characters into "buffer"
002868  003107  //       : Reads up to asciiz terminator including terminator
002869  003108        
002870  003109  func I2C3_Gets("buffer", "size"), 1;
002871  003110  // Syntax: I2C3_Gets("buffer", "size");
002872  003111  // Usage : r := I2C3_Gets(mybuf, 16);
002873  003112  // Notes : only reads up to "size" characters into "buffer"
002874  003113  //       : Reads up to asciiz terminator including terminator
002875  003114        
002876  003115  func I2C1_Getn("buffer", "size"), 1;
002877  003116  // Syntax: I2C1_Gets("buffer", "size");
002878  003117  // Usage : r := I2C1_Gets(mybuf, 16);
002879  003118  // Notes : reads "size" bytes into "buffer"
002880  003119  //       :
002881  003120        
002882  003121  func I2C2_Getn("buffer", "size"), 1;
002883  003122  // Syntax: I2C2_Gets("buffer", "size");
002884  003123  // Usage : r := I2C2_Gets(mybuf, 16);
002885  003124  // Notes : reads "size" bytes into "buffer"
002886  003125  //       :
002887  003126        
002888  003127  func I2C3_Getn("buffer", "size"), 1;
002889  003128  // Syntax: I2C3_Gets("buffer", "size");
002890  003129  // Usage : r := I2C3_Gets(mybuf, 16);
002891  003130  // Notes : reads "size" bytes into "buffer"
002892  003131  //       :
002893  003132        
002894  003133  func I2C1_Puts("buffer"), 1;
002895  003134  // Syntax: I2C1_Puts("buffer");
002896  003135  // Usage : r := I2C1_Puts(mybuf);
002897  003136  // Notes : writes an asciiz string to the I2C device
002898  003137  //       : returns count of characters written
002899  003138        
002900  003139  func I2C2_Puts("buffer"), 1;
002901  003140  // Syntax: I2C2_Puts("buffer");
002902  003141  // Usage : r := I2C2_Puts(mybuf);
002903  003142  // Notes : writes an asciiz string to the I2C device
002904  003143  //       : returns count of characters written
002905  003144        
002906  003145  func I2C3_Puts("buffer"), 1;
002907  003146  // Syntax: I2C3_Puts("buffer");
002908  003147  // Usage : r := I2C3_Puts(mybuf);
002909  003148  // Notes : writes an asciiz string to the I2C device
002910  003149  //       : returns count of characters written
002911  003150        
002912  003151  func I2C1_Putn("buffer", "count"), 1;
002913  003152  // Syntax: I2C1_Putn("buffer","count");
002914  003153  // Usage : r := I2C1_Puts(mybuf,10);
002915  003154  // Notes : writes up to "size" bytes to the I2C device
002916  003155  //       : returns number of bytes written
002917  003156        
002918  003157  func I2C2_Putn("buffer", "count"), 1;
002919  003158  // Syntax: I2C2_Putn("buffer","count");
002920  003159  // Usage : r := I2C2_Puts(mybuf,10);
002921  003160  // Notes : writes up to "size" bytes to the I2C device
002922  003161  //       : returns number of bytes written
002923  003162        
002924  003163  func I2C3_Putn("buffer", "count"), 1;
002925  003164  // Syntax: I2C3_Putn("buffer","count");
002926  003165  // Usage : r := I2C3_Puts(mybuf,10);
002927  003166  // Notes : writes up to "size" bytes to the I2C device
002928  003167  //       : returns number of bytes written
002929  003168        
002930  003169        
002931  003170  func spi_ReadBlock("buf", "bufsize"), 0;                       // commence a block reception
002932  003171  // Syntax   : spi_ReadBlock("buf", "bufsize");
002933  003172  // Usage    : spi_ReadBlock(mybuf, 30);                        // point to the buffer and read 30 characters
002934  003173  // *Notes   : Bufsize bytes are read from the SPI port to the string pointer "buf".
002935  003174        
002936  003175  func spi1_ReadBlock("buf", "bufsize"), 0;                       // commence a block reception
002937  003176  // Syntax   : spi1_ReadBlock("buf", "bufsize");
002938  003177  // Usage    : spi1_ReadBlock(mybuf, 30);                        // point to the buffer and read 30 characters
002939  003178  // *Notes   : Bufsize bytes are read from the SPI port to the string pointer "buf".
002940  003179        
002941  003180  func spi2_ReadBlock("buf", "bufsize"), 0;                       // commence a block reception
002942  003181  // Syntax   : spi2_ReadBlock("buf", "bufsize");
002943  003182  // Usage    : spi2_ReadBlock(mybuf, 30);                        // point to the buffer and read 30 characters
002944  003183  // *Notes   : Bufsize bytes are read from the SPI port to the string pointer "buf".
002945  003184        
002946  003185  func spi3_ReadBlock("buf", "bufsize"), 0;                       // commence a block reception
002947  003186  // Syntax   : spi3_ReadBlock("buf", "bufsize");
002948  003187  // Usage    : spi3_ReadBlock(mybuf, 30);                        // point to the buffer and read 30 characters
002949  003188  // *Notes   : Bufsize bytes are read from the SPI port to the string pointer "buf".
002950  003189        
002951  003190  // I2C timing related constants
002952  003191  #CONST
002953  003199  #END
002954  003200        
002955  003201        
002956  003202        
002957  003203  //------------------------------------------------------------------//
002958  003204  // Direct uSD (SPI0) card SPI functions                             //
002959  003205  //------------------------------------------------------------------//
002960  003206  func spi_Init("speed","ip_mode","op_mode"), 0;  // set the SPI port, not used if uSD active
002961  003207  func spi_Read(), 1;                             // read a raw byte from SPI (lowers CS)
002962  003208  func spi_Write("byte"), 0;                      // write a raw byte to SPI (lowers CS)
002963  003209  func spi_Disable(), 0;                          // disable SPI reading or writing (raise CS)
002964  003210                                                  //
002965  003211        
002966  003212  //------------------------------------------------------------------//
002967  003213  // Function prototypes for SPI1, SPI2 and SPI3                      //
002968  003214  //------------------------------------------------------------------//
002969  003215  func SPI1_SDO_pin("pin"), 1;                // select the hardware pin for SPI1 transmit line
002970  003216  // Syntax: SPI_SDO_pin(pin);
002971  003217  // Usage : SPI_SDO_pin(PA1); // set SPI SDO to PA1 pin
002972  003218  // Notes : Select the hardware pin for SPIx transmit line.
002973  003219  //       : Note that multiple pins can be connected simmultaneously.
002974  003220  //       : Pins that can be mapped to SPIx TX are PA1, PA3 to PA9, PA12 or PA13
002975  003221  //       : Pins that can't be mapped to SPIx SDO are PA0, PA2, PA10, PA11, PA14 and PA15
002976  003222  //       : If the pin argument is 0, SPIx SDO is disconnected from all pins.
002977  003223  //       : The pin is automatically set to an output.
002978  003224  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002979  003225        
002980  003226  func SPI2_SDO_pin("pin"), 1;                // select the hardware pin for SPI2 transmit line
002981  003227  // Syntax: SPI2_SDO_pin(pin);
002982  003228  // Usage : SPI2_SDO_pin(PA1); // set SPI2 SDO to PA1 pin
002983  003229  // Notes : Select the hardware pin for SPIx transmit line.
002984  003230  //       : Note that multiple pins can be connected simmultaneously.
002985  003231  //       : Pins that can be mapped to SPIx TX are PA1, PA3 to PA9, PA12 or PA13
002986  003232  //       : Pins that can't be mapped to SPIx SDO are PA0, PA2, PA10, PA11, PA14 and PA15
002987  003233  //       : If the pin argument is 0, SPIx SDO is disconnected from all pins.
002988  003234  //       : The pin is automatically set to an output.
002989  003235  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002990  003236        
002991  003237  func SPI3_SDO_pin("pin"), 1;                // select the hardware pin for SPI3 transmit line
002992  003238  // Syntax: SPI3_SDO_pin(pin);
002993  003239  // Usage : SPI3_SDO_pin(PA1); // set SPI3 SDO to PA1 pin
002994  003240  // Notes : Select the hardware pin for SPIx transmit line.
002995  003241  //       : Note that multiple pins can be connected simmultaneously.
002996  003242  //       : Pins that can be mapped to SPIx TX are PA1, PA3 to PA9, PA12 or PA13
002997  003243  //       : Pins that can't be mapped to SPIx SDO are PA0, PA2, PA10, PA11, PA14 and PA15
002998  003244  //       : If the pin argument is 0, SPIx SDO is disconnected from all pins.
002999  003245  //       : The pin is automatically set to an output.
003000  003246  //       : Returns: Returns TRUE if function succeeded (usually ignored)
003001  003247        
003002  003248  func SPI1_SDI_pin("pin"), 1;                // select the hardware pin for SPI1 receive line
003003  003249  // Syntax: SPI1_SDI_pin(pin);
003004  003250  // Usage : SPI1_SDI_pin(PA3); // set SPI1 SDI to PA3 pin
003005  003251  // Notes : Selects the hardware pin for SPIx receive line.
003006  003252  //       : Note that only a single pin can be mapped to SPI SDI.
003007  003253  //       : Pins that can be mapped to SPIx SDI are PA0 to PA13
003008  003254  //       : Pins that can't be mapped to SPIx SDI are PA14 and PA15
003009  003255  //       : If the pin argument is 0 the function has no effect
003010  003256  //       : The pin is automatically set to an input.
003011  003257  //       : If the SPIx SDI pin is set to same pin as SPIx SDO pin (eg for a loopback check)
003012  003258  //       : it is necessary to configure the SDI pin first, eg
003013  003259  //       :     SPI1_SDI_pin(PA3);     // configure SPI1 SDI to PA3 (this disconnects anything else)
003014  003260  //       :     SPI1_SDO_pin(PA3));    // configure SPI1 SDO to PA3
003015  003261  //       : Returns: Returns TRUE if function succeeded (usually ignored)
003016  003262        
003017  003263  func SPI2_SDI_pin("pin"), 1;                // select the hardware pin for SPI2 receive line
003018  003264  // Syntax: SPI2_SDI_pin(pin);
003019  003265  // Usage : SPI2_SDI_pin(PA3); // set SPI2 SDI to PA3 pin
003020  003266  // Notes : Selects the hardware pin for SPIx receive line.
003021  003267  //       : Note that only a single pin can be mapped to SPI SDI.
003022  003268  //       : Pins that can be mapped to SPIx SDI are PA0 to PA13
003023  003269  //       : Pins that can't be mapped to SPIx SDI are PA14 and PA15
003024  003270  //       : If the pin argument is 0 the function has no effect
003025  003271  //       : The pin is automatically set to an input.
003026  003272  //       : If the SPIx SDI pin is set to same pin as SPIx SDO pin (eg for a loopback check)
003027  003273  //       : it is necessary to configure the SDI pin first, eg
003028  003274  //       :     SPI2_SDI_pin(PA3);     // configure SPI2 SDI to PA3 (this disconnects anything else)
003029  003275  //       :     SPI2_SDO_pin(PA3));    // configure SPI2 SDO to PA3
003030  003276  //       : Returns: Returns TRUE if function succeeded (usually ignored)
003031  003277        
003032  003278  func SPI3_SDI_pin("pin"), 1;                // select the hardware pin for SPI2 receive line
003033  003279  // Syntax: SPI3_SDI_pin(pin);
003034  003280  // Usage : SPI3_SDI_pin(PA3); // set SPI3 SDI to PA3 pin
003035  003281  // Notes : Selects the hardware pin for SPIx receive line.
003036  003282  //       : Note that only a single pin can be mapped to SPI SDI.
003037  003283  //       : Pins that can be mapped to SPIx SDI are PA0 to PA13
003038  003284  //       : Pins that can't be mapped to SPIx SDI are PA14 and PA15
003039  003285  //       : If the pin argument is 0 the function has no effect
003040  003286  //       : The pin is automatically set to an input.
003041  003287  //       : If the SPIx SDI pin is set to same pin as SPIx SDO pin (eg for a loopback check)
003042  003288  //       : it is necessary to configure the SDI pin first, eg
003043  003289  //       :     SPI3_SDI_pin(PA3);     // configure SPI3 SDI to PA3 (this disconnects anything else)
003044  003290  //       :     SPI3_SDO_pin(PA3));    // configure SPI3 SDO to PA3
003045  003291  //       : Returns: Returns TRUE if function succeeded (usually ignored)
003046  003292        
003047  003293  func SPI1_SCK_pin("pin"), 1;                // select the hardware pin for SPI1 clock line
003048  003294  // Syntax: SPI1_SCK_pin(pin);
003049  003295  // Usage : SPI1_SCK_pin(PA0); // set SPI1 SCK to PA0 pin
003050  003296  // Notes : Selects the hardware pin for SPI clock line.
003051  003297  //       : Note that only a single pin should be mapped to spi SCK.
003052  003298  //       : Pins that can be mapped to SPIx SCK are PA1, PA3 to PA9, PA12 or PA13
003053  003299  //       : Pins that can't be mapped to SPIx SCK are PA0, PA2, PA10, PA11, PA14 and PA15
003054  003300  //       : If the pin argument is 0 the SPIx SCK pin is disconnected
003055  003301  //       : The pin is automatically set to an output.
003056  003302  //       : Returns: Returns TRUE if finction succeeded (usually ignored)
003057  003303        
003058  003304  func SPI2_SCK_pin("pin"), 1;                // select the hardware pin for SPI2 clock line
003059  003305  // Syntax: SPI2_SCK_pin(pin);
003060  003306  // Usage : SPI2_SCK_pin(PA0); // set SPI1 SCK to PA0 pin
003061  003307  // Notes : Selects the hardware pin for SPI clock line.
003062  003308  //       : Note that only a single pin should be mapped to spi SCK.
003063  003309  //       : Pins that can be mapped to SPIx SCK are PA1, PA3 to PA9, PA12 or PA13
003064  003310  //       : Pins that can't be mapped to SPIx SCK are PA0, PA2, PA10, PA11, PA14 and PA15
003065  003311  //       : If the pin argument is 0 the SPIx SCK pin is disconnected
003066  003312  //       : The pin is automatically set to an output.
003067  003313  //       : Returns: Returns TRUE if finction succeeded (usually ignored)
003068  003314        
003069  003315  func SPI3_SCK_pin("pin"), 1;                // select the hardware pin for SPI3 clock line
003070  003316  // Syntax: SPI3_SCK_pin(pin);
003071  003317  // Usage : SPI3_SCK_pin(PA0); // set SPI1 SCK to PA0 pin
003072  003318  // Notes : Selects the hardware pin for SPI clock line.
003073  003319  //       : Note that only a single pin should be mapped to spi SCK.
003074  003320  //       : Pins that can be mapped to SPIx SCK are PA1, PA3 to PA9, PA12 or PA13
003075  003321  //       : Pins that can't be mapped to SPIx SCK are PA0, PA2, PA10, PA11, PA14 and PA15
003076  003322  //       : If the pin argument is 0 the SPIx SCK pin is disconnected
003077  003323  //       : The pin is automatically set to an output.
003078  003324  //       : Returns: Returns TRUE if finction succeeded (usually ignored)
003079  003325        
003080  003326        
003081  003327  func SPI1_Init("speed","mode"), 1;              // set the SPI1 port
003082  003328  func SPI2_Init("speed","mode"), 1;              // set the SPI2 port
003083  003329  func SPI3_Init("speed","mode"), 1;              // set the SPI3 port
003084  003330        
003085  003331        
003086  003332  //------------------------------------------------------------------------------
003087  003333  // Constants for SPI1, SPI2 an SPI3 "mode"
003088  003334  //------------------------------------------------------------------------------
003089  003335  #CONST
003090  003352  #END
003091  003353        
003092  003354  //------------------------------------------------------------------------------
003093  003355  // Constants for SPI1, SPI2 an SPI3 "speed"
003094  003356  //------------------------------------------------------------------------------
003095  003357  #CONST
003096  003374  #END
003097  003375        
003098  003376        
003099  003377  func SPI1_Read(), 1;                                 // read a raw byte from SPI1
003100  003378  func SPI2_Read(), 1;                                 // read a raw byte from SPI2
003101  003379  func SPI3_Read(), 1;                                 // read a raw byte from SPI3
003102  003380        
003103  003381  func SPI1_Write("byte"), 1;                          // write a raw byte to SPI1
003104  003382  func SPI2_Write("byte"), 1;                          // write a raw byte to SPI2
003105  003383  func SPI3_Write("byte"), 1;                          // write a raw byte to SPI3
003106  003384        
003107  003385  func spi_WriteBlock("buf", "bufsize"), 0;                       // commence a block write
003108  003386  // Syntax   : spi_WriteBlock("buf", "bufsize");
003109  003387  // Usage    : spi_WriteBlock(mybuf, 30);                         // point to the Write buffer and send 30 characters
003110  003388  // *Notes   : Bufsize bytes are transmitted to the SPI port from the string pointer "buf".
003111  003389        
003112  003390  func spi1_WriteBlock("buf", "bufsize"), 0;                       // commence a block write
003113  003391  // Syntax   : spi1_WriteBlock("buf", "bufsize");
003114  003392  // Usage    : spi1_WriteBlock(mybuf, 30);                         // point to the Write buffer and send 30 characters
003115  003393  // *Notes   : Bufsize bytes are transmitted to the SPI port from the string pointer "buf".
003116  003394        
003117  003395  func spi2_WriteBlock("buf", "bufsize"), 0;                       // commence a block write
003118  003396  // Syntax   : spi2_WriteBlock("buf", "bufsize");
003119  003397  // Usage    : spi2_WriteBlock(mybuf, 30);                         // point to the Write buffer and send 30 characters
003120  003398  // *Notes   : Bufsize bytes are transmitted to the SPI port from the string pointer "buf".
003121  003399        
003122  003400  func spi3_WriteBlock("buf", "bufsize"), 0;                       // commence a block write
003123  003401  // Syntax   : spi3_WriteBlock("buf", "bufsize");
003124  003402  // Usage    : spi3_WriteBlock(mybuf, 30);                         // point to the Write buffer and send 30 characters
003125  003403  // *Notes   : Bufsize bytes are transmitted to the SPI port from the string pointer "buf".
003126  003404        
003127  003405  //------------------------------------------------------------------//
003128  003406  // Display Access                                                   //
003129  003407  //------------------------------------------------------------------//
003130  003408  func disp_SetReg("register", "data"), 0;
003131  003409  // Syntax: display_SetReg(register, data);
003132  003410  // Usage : display_SetReg(arg1, arg2);
003133  003411  // Notes : Sets uLCD specific display driver registers. Refer
003134  003412  //       : to appropriate display driver data sheet.
003135  003413        
003136  003414  func disp_setGRAM("x1","y1","x2","y2"), 0;    // set GRAM window
003137  003415  // Syntax: disp_setGRAM(x1, y1, x2, y2);
003138  003416  // Usage : disp_setGRAM(arg1, arg2, arg3, arg4);
003139  003417  // Notes : Prepares the GRAM area for user access.
003140  003418  //       : Data can now be written with disp_GRAM.
003141  003419  //       : GRAM will be set accordingly for the correct screen mode.
003142  003420  //       : the LO word of the 32 bit pixel count is returned. This is
003143  003421  //       : usually all that is needed unlse GRAM area exceeds 256^2
003144  003422  //       : A copy of the 32bit value can be found in
003145  003423  //       : GRAM_PIXEL_COUNT_LO and GRAM_PIXEL_COUNT_HI
003146  003424        
003147  003425  func disp_WrGRAM("colour"), 0;
003148  003426  // Syntax: display_WrGRAM(colour);
003149  003427  // Usage : display_WrGRAM(arg);
003150  003428  // Notes : Data can be written to the GRAM consecutively using
003151  003429  //       : this function once the GRAM access window has been setup.
003152  003430        
003153  003431  func disp_WriteControl("value"), 0;             // write a control byte to the display
003154  003432        
003155  003433  func disp_WriteWord("value"), 0;                // write a word to the display
003156  003434        
003157  003435        
003158  003436  func disp_ReadWord(), 1;                        // read a word from the display
003159  003437  // Syntax: disp_ReadWord();
003160  003438  // Usage : x:=disp_ReadWord();
003161  003439  // Notes : Read a word from the controller
003162  003440  // Eg:   : disp_WriteControl(0);         // select Ilitek ID register
003163  003441  //       : print(disp_ReadWord());        // print ID
003164  003442  //       : (Many displays are write only)
003165  003443        
003166  003444        
003167  003445  // NB only available on certain displays, check individual data sheets
003168  003446  func sys_StoreTouchCalibration(), 1;
003169  003447  // Syntax: sys_StoreTouchCalibration();
003170  003448  // Usage : r := sys_StoreTouchCalibration();
003171  003449  // Notes : Store the touch calibration values in non-volatile memory.
003172  003450  //       : Returns true if the values have been accepted and stored,
003173  003451  //       : else returns false if write could not be performed, or
003174  003452  //       : touch calibration values are improbable.
003175  003453  //       : The values that are stored are obtained from:-
003176  003454  //       : TOUCH_XMINCAL             78  // touch calibration value
003177  003455  //       : TOUCH_YMINCAL             79  // touch calibration value
003178  003456  //       : TOUCH_XMAXCAL             80  // touch calibration value
003179  003457  //       : TOUCH_YMAXCAL             81  // touch calibration value
003180  003458  //       : refer to the 4DGL example touchCalibrate.4DG for further information.
003181  003459  //       : This function is not supported on uVGA, Capacitive touch
003182  003460  //       : and 4.3" resistive touch modules.
003183  003461        
003184  003462  // NB only available on certain displays, check individual data sheets
003185  003463  func disp_Sync("line"), 0;                      //  (uVGA only)  wait till scanline reaches "line"
003186  003464  // Syntax: disp_Sync(line);
003187  003465  // Usage : disp_Sync(480);
003188  003466  // Notes : Waits till the hardware gets to a certain line.
003189  003467  //       : Allows the program to synchronise writing to the hardware for flicker free operation.
003190  003468  //       : Some experimentation may be needed to find an optimum line for disp_Sync
003191  003469  //       : depending on the graphics operation. The higher the value, the slower
003192  003470  //       : the throughput. A cetain point will be reached (number of scanlines + blanking lines
003193  003471  //       : within the vertical retrace period) where it will just 'hang up' stopping the
003194  003472  //       : entire process. Eg, in 640x480 mode, if the 'lines' value is 507, operation will
003195  003473  //       : be slowest (as its actually right at the end of the blanking period) and 508
003196  003474  //       : will cause a hangup situation as it is above the highes scanline value.
003197  003475  //       : Currently, this function is only supported on displays with SSD1963 driver.
003198  003476        
003199  003477  func disp_Init(), 0;                           // initialize display with required tables. New in v0.7
003200  003478  // Syntax: disp_Init();                        New in v0.7
003201  003479  // Usage : disp_Init();
003202  003480  // Notes : Initialises or reinitialises the display.
003203  003481  //       : Normally used after restoration of peripheral power
003204  003482  //       : and after DeepSleep.
003205  003483        
003206  003484  func disp_Disconnect(), 0;                     // Disconnect display to ensure reduced power after disabling peripheral power. New in v0.7
003207  003485  // Syntax: disp_Disconnect();                  New in v0.7
003208  003486  // Usage : disp_Disconnect();
003209  003487  // Notes : Disconnects the display driver pins and/or reconfigures it to achieve
003210  003488  //       : its lowest possible power consumption. Use after disabling peripheral power
003211  003489  //       : to ensure the minimal power usage by the display.
003212  003490  //       : disp_Init() should be used to reinitialise the display.
003213  003491        
003214  003492  func disp_BlitPixelsFromCOM0(), 0;                     // Writes current GRAM window pixels to the display from the COM port
003215  003493  // Syntax: disp_BlitPixelsFromCOM0();                  New in v1.1
003216  003494  // Usage : disp_BlitPixelsFromCOM0();
003217  003495  // Notes : Writes the number of pixels defined by the last disp_setGRAM() call to the
003218  003496  //       : display from the specified com port.
003219  003497        
003220  003498  func __reserved42(), 0; // do not remove
003221  003499        
003222  003500        
003223  003501  //------------------------------------------------------------------//
003224  003502  //        Image Control Function Prototypes                         //
003225  003503  //------------------------------------------------------------------//
003226  003504  func img_SetPosition("handle", "index", "xpos", "ypos"), 1;
003227  003505  // Syntax: img_SetPosition(handle, index, xpos, ypos);
003228  003506  // Usage : r := img_SetPosition(hImageList, imagenum, x, y);
003229  003507  // Notes : set the position where the image will be displayed
003230  003508  //       : returns true if index was ok and function was successful.
003231  003509  //       : you may turn off an image so when img_Refresh is called,
003232  003510  //       : the image will not be shown
003233  003511        
003234  003512  func img_Enable("handle", "index"), 1;
003235  003513  // Syntax: img_Enable(handle, index);
003236  003514  // Usage : r := img_Enable(hImageList, imagenum);
003237  003515  // Notes : enable image in a image list
003238  003516  //       : returns true if index was ok and function was successful.
003239  003517  //       : this is the default state so when img_Refresh is called,
003240  003518  //       : all the images in the list will be shown
003241  003519  //       : if index is set to -1, all of the images are enabled
003242  003520        
003243  003521  func img_Disable("handle", "index"), 1;
003244  003522  // Syntax: img_Disable(handle, index);
003245  003523  // Usage : r := img_Disable(hImageList, imagenum);
003246  003524  // Notes : disable image in a image list
003247  003525  //       : returns true if index was ok and function was successful.
003248  003526  //       : you must turn off an image so when img_Refresh is called,
003249  003527  //       : the image will not be shown.
003250  003528  //       : if index is set to -1, all of the images are disabled
003251  003529        
003252  003530        
003253  003531  func img_Darken("handle", "index"), 1;
003254  003532  // Syntax: img_Darken(handle, index);
003255  003533  // Usage : r := img_Darken(hImageList, imagenum);
003256  003534  // Notes : darken image in a image list
003257  003535  //       : returns true if index was ok and function was successful.
003258  003536  //       : if index is set to -1, all of the images are darkened
003259  003537  //       : NB:- this feature will only work for the next refresh, then
003260  003538  //       : the image reverts back to normal when displayed again.
003261  003539        
003262  003540        
003263  003541  func img_Lighten("handle", "index"), 1;
003264  003542  // Syntax: img_Lighten(handle, index);
003265  003543  // Usage : r := img_Lighten(hImageList, imagenum);
003266  003544  // Notes : lighten image in a image list
003267  003545  //       : returns true if index was ok and function was successful.
003268  003546  //       : if index is set to -1, all of the images are lightened
003269  003547  //       : NB:- this feature will only work for the next refresh, then
003270  003548  //       : the image reverts back to normal when displayed again.
003271  003549        
003272  003550  func img_SetWord("handle", "index", "offset", "word"), 1;
003273  003551  // Syntax: img_SetWord(handle, index, offset, word);
003274  003552  // Usage : img_SetWord(hndl, 5, IMAGE_XPOS, 10);
003275  003553  // Notes : set specified word (0-7) in a image entry
003276  003554  //       : returns TRUE if successful, return value usually ignored.
003277  003555        
003278  003556  func img_GetWord("handle", "index", "offset"), 1;
003279  003557  // Syntax: myvar := img_GetWord("handle", "index", "offset");
003280  003558  // Usage : myvar := img_GetWord(hndl, 5, IMAGE_YPOS);
003281  003559  // Notes : returns specified word (0-14) from an image entry
003282  003560  //       : refer to image control entry offsets.
003283  003561        
003284  003562  func img_Show("handle", "index"), 1;
003285  003563  // Syntax: img_Show(handle, index);
003286  003564  // Usage : display image entry (regardless of enable/disable)
003287  003565  //       : returns TRUE if successful, return value usually ignored.
003288  003566        
003289  003567  func img_SetAttributes("handle", "index","value"), 1;
003290  003568  // Syntax: img_SetAttributes("handle", "index","offset");
003291  003569  // Usage : img_SetAttributes(hndl, 5, I_TOPMOST);
003292  003570  // Notes : This function SETS one or more bits in the IMAGE_FLAGS field
003293  003571  //       : of an image control entry. "value" refers to various bits in
003294  003572  //       : the image control entry (see image attribute flags).
003295  003573  //       : A '1' bit in the "value" field SETS the respective bit
003296  003574  //       : in the IMAGE_FLAGS field of the image control entry.
003297  003575  //       : returns TRUE if successful, return value usually ignored.
003298  003576        
003299  003577  func img_ClearAttributes("handle", "index","value"), 1;
003300  003578  // Syntax: img_ClearAttributes("handle", "index","offset");
003301  003579  // Usage : img_ClearAttributes(hndl, 5, I_TOPMOST);
003302  003580  // Notes : This function CLEARS one or more bits in the IMAGE_FLAGS field
003303  003581  //       : of an image control entry. "value" refers to various bits in
003304  003582  //       : the image control entry (see image attribute flags)
003305  003583  //       : a '1' bit in the "value" field CLEARS the respective bit
003306  003584  //       : in the IMAGE_FLAGS field of the image control entry.
003307  003585  //       : returns TRUE if successful, return value usually ignored.
003308  003586        
003309  003587  func img_Touched("handle", "index"), 1;
003310  003588  // Syntax: r := img_Touched(handle, index);
003311  003589  // Usage : img_Touched(hndl, 17);
003312  003590  //       : returns -1 if image not touched, or returns index
003313  003591  // Notes : if index is passed as -1, function tests all images,
003314  003592  //       : and returns -1 if image not touched, or returns index.
003315  003593        
003316  003594        
003317  003595  func img_SelectReadPosition("handle", "index", "frame", "x", "y"), 1;
003318  003596  // Syntax: img_SelectReadPosition(handle, index, frame, xpos, ypos);
003319  003597  // Usage : r := img_SelectReadPosition(hImageList, imagenum, frame, x, y);
003320  003598  // Notes : set a position in an image control for sequential reading
003321  003599  //       : of pixels from the uSD card (fat16 or raw modes supported)
003322  003600  //       : No image window area is set, the image will not be shown
003323  003601  //       : This function provides a means of preparing to load an image,
003324  003602  //       : or part of an image, to an array. (see img_SequentialRead)
003325  003603  //Returns: returns true if index was ok and function was successful.
003326  003604        
003327  003605        
003328  003606  func img_SequentialRead("count", "ptr"), 1;  // read pixels from selected read position of an image
003329  003607  // Syntax: img_SequentialRead(count, ptr);
003330  003608  // Usage1: r := img_SequentialRead(imgwidth, myArray);    // read 1 line from image control to array
003331  003609  // Usage2: r := img_SequentialRead(123, 0);            // skip 123 words from sequential stream
003332  003610  // Usage3: r := img_SequentialRead(20, 1);            // write 20 pixels to current GRAM position from stream
003333  003611  // Notes : once a position has ben set with the img_SelectReadPosition function,
003334  003612  //       : this function can then used for sequential reading of pixels from
003335  003613  //       : image storage.
003336  003614  //       : if "ptr" is 0, "count" pixels from the stream are simply skipped.
003337  003615  //       : if "ptr" is 1, "count" pixels are written to the GRAM area,
003338  003616  //       : else "ptr" must point to a valid array that is at least
003339  003617  //       : the size of "count".
003340  003618  //       : or part of an image, to an array. (see img_SequentialRead)
003341  003619  //       : returns TRUE if function succeded.
003342  003620        
003343  003621  func __reserved43(), 0; // do not remove
003344  003622  func __reserved44(), 0; // do not remove
003345  003623  func __reserved45(), 0; // do not remove
003346  003624  func __reserved46(), 0; // do not remove
003347  003625        
003348  003626  // image control header offsets
003349  003627  #CONST
003350  003634  #END
003351  003635        
003352  003636  // image control entry offsets
003353  003637  #CONST
003354  003652  #END
003355  003653        
003356  003654  // image attribute flags (in IMAGE_FLAGS)
003357  003655  // for img_SetAttributes(...) and img_ClearAttributes(...)
003358  003656  #CONST
003359  003670  #END
003360  003671        
003361  003672        
003362  003673  //------------------------------------------------------------------//
003363  003674  //        Timer Function Prototypes
003364  003675  //------------------------------------------------------------------//
003365  003676  func sys_T(), 1;
003366  003677  // Syntax: sys_T();
003367  003678  // Usage : t := sys_T();
003368  003679  // Notes : return the current value of the rolling system timer (1msec) LO word
003369  003680        
003370  003681  func sys_T_HI(), 1;
003371  003682  // Syntax: sys_T_HI();
003372  003683  // Usage : t := sys_T_HI();
003373  003684  // Notes : return the current value of the rolling system timer (1msec) HI word
003374  003685        
003375  003686  func sys_SetTimer("timernum","value"), 0;
003376  003687  // Syntax: sys_SetTimer("timernum", "value");
003377  003688  // Usage : sys_SetTimer(TIMER5, 10000);
003378  003689  // Notes : set a countdown on the selected timer, or 'top up' if required.
003379  003690  //       : There ar 8 timers TIMER0 to TIMER7 which stop at the count of 0
003380  003691  //       : Maximum timeout period is 65.535 seconds
003381  003692  //       : A timer can be read with the sys_GetTimer("timernum") function
003382  003693        
003383  003694  func sys_GetTimer("timernum"), 1;
003384  003695  // Syntax: t := sys_GetTimer("timernum");
003385  003696  // Usage : t := sys_GetTimer(TIMER3);
003386  003697  // Notes : returns 0 if timer has expired, or the current countdown value.
003387  003698  //       : There ar 8 timers TIMER0 to TIMER7 which stop at the count of 0
003388  003699  //       : Maximum timeout period is 65.535 seconds
003389  003700  //       : A timer must be set with the sys_SetTimer("timernum","value") function
003390  003701        
003391  003702  func sys_SetTimerEvent("timernum","function"), 1;
003392  003703  // Syntax: sys_SetTimerFunction("timernum", "function");
003393  003704  // Usage : sys_SetTimer(TIMER5, myfunc);
003394  003705  // Notes : set a function to be called for selected timer.
003395  003706  //       : When the timer reaches zero, the function is called.
003396  003707  //       : The called function must not have any parameters
003397  003708  //       : sys_SetTimerEvent returns any previous event function
003398  003709  //       : address, or zero if there was no previous function.
003399  003710        
003400  003711  func sys_EventQueue(), 1;
003401  003712  // Syntax: sys_EventQueue();
003402  003713  // Usage : tasks := sys_EventQueue();
003403  003714  // Notes : returns the max number of events that were pending
003404  003715  //       : in the timer queue since the last call to this function.
003405  003716  //       : This can be used to assess timer event overhead burden,
003406  003717  //       : especially after or during a sys_EventsPostpone action.
003407  003718        
003408  003719  func sys_EventsPostpone(), 0;
003409  003720  // Syntax: sys_EventPostpone();
003410  003721  // Usage : sys_EventPostpone();   // postpone the event queue
003411  003722  // Notes : postpone any events until the sys_EventResume function is executed
003412  003723  //       : The timer event queue will continue to queue events, but no action
003413  003724  //       : will take place untill a sys_EventResume function is encountered.
003414  003725  //       : The queue will continue to receive up to 32 events before discarding
003415  003726  //       : any further events. This function is required to allow a sequence of
003416  003727  //       : instructions or functions to occur that would otherwise be corrupted
003417  003728  //       : by an event occuring during the sequence of instructions or functions.
003418  003729  //       : A good example of this is when you set a position to print, if there
003419  003730  //       : was no way of locking the current sequence, an event may occur which
003420  003731  //       : does a similar thing, and a contention would occur - printing to
003421  003732  //       : the wrong position. This function should be used wisely, if any action
003422  003733  //       : that is required would take considerable time, it is better to disable
003423  003734  //       : any conflicting event functions with a bypass flag, then restart the
003424  003735  //       : conflicting event by re-issuing a timer value.
003425  003736        
003426  003737  func sys_EventsResume(), 0;
003427  003738  // Syntax: sys_EventsResume();
003428  003739  // Usage : sys_EventsResume();   // resume the event queue
003429  003740  // Notes : resume any postponed events. The queue will try to execute any timer
003430  003741  //       : events that were incurred during the postponed period.
003431  003742        
003432  003743        
003433  003744  func sys_GetTime(), 0;
003434  003745  // Syntax: sys_GetTime();
003435  003746  // Usage : to(mystring); sys_GetTime();   // save current time string to buffer
003436  003747  // Notes : print the system time in the format eg "6:10:45"
003437  003748  //       : Can be captured to a buffer using the to( function
003438  003749  //       : Returns nothing.
003439  003750        
003440  003751  func sys_SetTime("hours", "mins", "secs"), 1;
003441  003752  // Syntax: sys_SetTime(h, m, s);
003442  003753  // Usage : sys_SetTime(10, 0, 0);   // set the system time
003443  003754  // Notes : Used to set clock to correct time after power up or suspension
003444  003755  //Returns: Returns true if valid time.
003445  003756        
003446  003757  func sys_GetDate(), 0;
003447  003758  // Syntax: sys_GetDate();
003448  003759  // Usage : to(mystring); sys_GetDate();   // save current time string to buffer
003449  003760  // Notes : print the system date in the format eg "25-09-2012"
003450  003761  //       : Can be captured to a buffer using the to( function
003451  003762  //       : Returns nothing.
003452  003763        
003453  003764  func sys_SetDate("year", "month", "day"), 1;
003454  003765  // Syntax: sys_SetDate(y, m, d);
003455  003766  // Usage : sys_SetDate(10, 0, 0);   // set the system time
003456  003767  // Notes : Used to set clock to correct date after power up or suspension
003457  003768  //Returns: Returns true if valid date.
003458  003769        
003459  003770  func sys_Sleep("units"), 1;
003460  003771  // Syntax: t := sys_Sleep("units");
003461  003772  // Usage : t := sys_Sleep(10);
003462  003773  // Notes : sets the display into low power mode for a period of time.
003463  003774  //       : Touching the touch screen will also wake from sleep.
003464  003775  //       : as will bus Change Interrupts.
003465  003776  //       : Returns remaining sleep units.
003466  003777        
003467  003778  func iterator("offset"), 0;
003468  003779  // Syntax: t :=  iterator("offset");
003469  003780  // Usage : t :=  iterator(10);
003470  003781  // Notes : set the iterator size for ++/--
003471  003782  //       : The next postinc,postdec,preinc of predec will alter
003472  003783  //       : by the specified value.
003473  003784  //       : The offset will return to 1 after the next operation.
003474  003785        
003475  003786  func sys_DeepSleep("units"), 1;               // put the module into its lowest power consumption mode. New in v0.7
003476  003787  // Syntax: t := sys_DeepSleep("units");    New in v0.7
003477  003788  // Usage : t := sys_DeepSleep(10);
003478  003789  // Notes : sets the display and processor into lowest power mode for a period of time.
003479  003790  //       : When returning from DeepSleep the display should be reinitialised
003480  003791  //       : with disp_Init().
003481  003792  //       : Touching the touch screen will also wake from sleep.
003482  003793  //       : Returns remaining sleep units.
003483  003794        
003484  003795  //------------------------------------------------------------------//
003485  003796  //         Touch Screen Function Prototypes
003486  003797  //------------------------------------------------------------------//
003487  003798        
003488  003799  func touch_DetectRegion("x1" ,"y1", "x2", "y2"), 0;
003489  003800  // Syntax: touch_DetectRegion(x1, y1, x2, y2);
003490  003801  // Usage : touch_DetectRegion(arg1, arg2, arg3, arg4);
003491  003802  // Notes : Specifies a new touch detect region on the screen
003492  003803  //       : such that only touch activity in that region will
003493  003804  //       : be reported by the status poll touch_Get(TOUCH_STATUS);
003494  003805        
003495  003806  func touch_Set("mode"), 0;
003496  003807  // Syntax: touch_Set(mode);
003497  003808  // Usage : touch_Set(arg);
003498  003809  // Notes : Sets various Touch Screen related parameters
003499  003810  //       :
003500  003811  //       : mode = TOUCH_ENABLE (mode 0)  Enable Touch Screen
003501  003812  //       : touch_Set(TOUCH_ENABLE);
003502  003813  //       : Enables and initialises Touch Screen hardware
003503  003814  //       :
003504  003815  //       : mode = TOUCH_DISABLE (mode 1)  Disable Touch Screen
003505  003816  //       : touch_Set(TOUCH_DISABLE );
003506  003817  //       : Disables the Touch Screen
003507  003818  //       : Note: Touch Screen runs in the background and disabling
003508  003819  //       : it when not in use will free up extra resources
003509  003820  //       : such as 4DVM CPU cycles.
003510  003821  //       :
003511  003822  //       : mode = TOUCH_REGIONDEFAULT (mode 2)  Default Touch Region
003512  003823  //       : touch_Set(TOUCH_REGIONDEFAULT);
003513  003824  //       : This will reset the current active region to default
003514  003825  //       : to the full screen without the application having to
003515  003826  //       : set a new active region for the full screen.
003516  003827  //       : (NB for 'no touch' devices - like uVGAII or OLED's/LCD's
003517  003828  //       : that requre to be interfaced with an external pointing
003518  003829  //       : device, values that are poked into TOUCH_DRIVE will be
003519  003830  //       : read with the touch_Get() function)
003520  003831        
003521  003832        
003522  003833  func touch_Get("mode"), 1;
003523  003834  // Syntax: touch_Get(mode);
003524  003835  // Usage : arg1 := touch_Get(arg);
003525  003836  // Notes : Returns various Touch Screen parameters to caller
003526  003837  //       :
003527  003838  //       : mode = TOUCH_STATUS  (mode 0)
003528  003839  //       : var := touch_Get(TOUCH_STATUS);
003529  003840  //       : Returns the various states of the touch screen
003530  003841  //       : 0 = NOTOUCH
003531  003842  //       : 1 = TOUCH_PRESSED
003532  003843  //       : 2 = TOUCH_RELEASED
003533  003844  //       : 3 = TOUCH_MOVING
003534  003845  //       :
003535  003846  //       : mode = TOUCH_GETX   (mode 1)
003536  003847  //       : var := touch_Get(TOUCH_GETX);
003537  003848  //       : Returns the X coordinates of the touch
003538  003849  //       :
003539  003850  //       : mode = TOUCH_GETY   (mode 2)
003540  003851  //       : var := touch_Get(TOUCH_GETY);
003541  003852  //       : Returns the Y coordinates of the touch
003542  003853        
003543  003854        
003544  003855  //touch_Set() related constants
003545  003856  #CONST
003546  003860  #END
003547  003861        
003548  003862  //touch_Get() related constants
003549  003863  #CONST
003550  003871  #END
003551  003872        
003552  003873  func touch_TestBox("&rect"), 1;
003553  003874  // Syntax   : touch_Test(rect);
003554  003875  // Usage    : var r[4]; r[0]:=100; r[1]:=200; r[2]:=20; r[3]:=30;
003555  003876  //          : result := touch_Test(r); // check area at 100,200,119,229
003556  003877  // Notes    : rect is an array of 4 vars, x1, y1, width, height (using boxed co-ordinates)
003557  003878  // returns  : Returns true if last touch co-ordinates are within the boxed test area.
003558  003879        
003559  003880  func touch_TestArea("&rect"), 1;
003560  003881  // Syntax   : touch_Test(rect);
003561  003882  // Usage    : var r[4]; r[0]:=100; r[1]:=200; r[2]:=119; r[3]:=129;
003562  003883  //          : result := touch_Test(r); // check area at 100,200,119,229
003563  003884  // Notes    : rect is an array of 4 vars, x1, y1, x2, y2 (using absolute co-ordinates)
003564  003885  // returns  : Returns true if last touch co-ordinates are within the absolute co-ordinate test area.
003565  003886        
003566  003887        
003567  003888  func __reserved51(), 0; // do not remove
003568  003889  func __reserved52(), 0; // do not remove
003569  003890        
003570  003891  //------------------------------------------------------------------//
003571  003892  //        Memory Allocation Function Prototypes
003572  003893  //------------------------------------------------------------------//
003573  003894        
003574  003895  func mem_Alloc("size"), 1;
003575  003896  // Syntax: mem_Alloc(bytesize);
003576  003897  // Usage : myvar := mem_Alloc(100);
003577  003898  // Notes : Allocate a block of memory to pointer myvar
003578  003899  //       : The allocated memory contains garbage but is a fast allocation.
003579  003900  //       : The block must later be released with mem_Free();
003580  003901  //       : returns 0 if function fails
003581  003902        
003582  003903  func mem_AllocV("size"), 1;
003583  003904  // Syntax: mem_AllocV(bytesize);
003584  003905  // Usage : myvar := mem_AllocV(100);
003585  003906  // Notes : Allocate a block of memory to pointer myvar
003586  003907  //       : The block of memory is filled with signature values
003587  003908  //       : the block starts with A5,5A then fills with incrementing
003588  003909  //       : number eg:- A5,5A,00,01,02,03...FF,00,11....
003589  003910  //       : This can be helpful when debugging
003590  003911  //       : The block must later be released with mem_Free();
003591  003912  //       : returns 0 if function fails
003592  003913        
003593  003914  func mem_AllocZ("size"), 1;
003594  003915  // Syntax: mem_AllocZ(bytesize);
003595  003916  // Usage : myvar := mem_AllocC(100);
003596  003917  // Notes : Allocate a zeroed block of memory to pointer myvar
003597  003918  //       : The block of memory is filled with zeroes
003598  003919  //       : The block must later be released with mem_Free();
003599  003920  //       : returns 0 if function fails
003600  003921        
003601  003922  func mem_Realloc("ptr", "size"), 1;
003602  003923  // Syntax: myvar := mem_Realloc("ptr", "size");
003603  003924  // Usage : myvar := mem_Realloc(ptr, size);
003604  003925  // Notes : The function may move the memory block to a new location,
003605  003926  //       : in which case the new location is returned.
003606  003927  //       : The content of the memory block is preserved up to the lesser
003607  003928  //       : of the new and old sizes, even if the block is moved.
003608  003929  //       : If the new size is larger, the value of the newly allocated
003609  003930  //       : portion is indeterminate. In case that ptr is NULL,
003610  003931  //       : the function behaves exactly as mem_Alloc, assigning a new block
003611  003932  //       : of size bytes and returning a pointer to the beginning of it.
003612  003933  //       : In case that the size is 0, the memory previously allocated in
003613  003934  //       : ptr is deallocated as if a call to mem_Free()was made, and a NULL
003614  003935  //       : pointer is returned.
003615  003936        
003616  003937  func mem_Free("allocation"), 1;
003617  003938  // Syntax: myvar := mem_Free(allocation);
003618  003939  // Usage : myvar := mem_Free(myvar);
003619  003940  // Notes : De-allocate a block of memory previously created with
003620  003941  //       : mem_Alloc(...), mem_AllocV(...); or mem_AllocZ(...);
003621  003942  //       : returns 0 if function fails
003622  003943        
003623  003944  func mem_Heap(), 1;
003624  003945  // Syntax: myvar := mem_Heap();
003625  003946  // Usage : myvar := mem_Heap();
003626  003947  // Notes : returns bytecount available in heap
003627  003948  //       :
003628  003949        
003629  003950  func mem_Set("ptr","char","size"), 1;
003630  003951  // Syntax: mem_Set(ptr,char,bytesize);
003631  003952  // Usage : mem_Set(p, 'A', 100);
003632  003953  // Notes : fill a block of memory with a byte value
003633  003954  //       : Note that count is a byte count, this facilitates
003634  003955  //       : clearing word aligned byte arrays when using word
003635  003956  //       : aligned packed strings.
003636  003957  //       : returns ptr
003637  003958        
003638  003959  func mem_Copy("src", "dest", "bytecount"), 1;
003639  003960  // Syntax: myvar := mem_Copy(src, dest, bytesize);
003640  003961  // Usage : myvar := mem_Copy(p1, p2, 100);
003641  003962  // Notes : copy a word aligned block of memory from src to dest
003642  003963  //       : Note that count is a byte count, this facilitates
003643  003964  //       : copying word aligned byte arrays when using word
003644  003965  //       : aligned packed strings.
003645  003966  //       : returns src
003646  003967        
003647  003968  func mem_Compare("ptr1","ptr2","count"), 1;
003648  003969  // Syntax: myvar := mem_Compare(ptr1,ptr2,bytesize);
003649  003970  // Usage : myvar := mem_Compare(p1, p2, 100);
003650  003971  // Notes : compare word aligned blocks of memory at src, dest
003651  003972  //       : Note that count is a byte count, this facilitates
003652  003973  //       : comparing word aligned byte arrays when using word
003653  003974  //       : aligned packed strings.
003654  003975  //       : returns 0 if we have a match
003655  003976        
003656  003977  func __reserved53(), 0; // do not remove
003657  003978  func __reserved54(), 0; // do not remove
003658  003979        
003659  003980  //------------------------------------------------------------------//
003660  003981  //        FAT16 Function Prototypes
003661  003982  //------------------------------------------------------------------//
003662  003983        
003663  003984  func file_Error(), 1;
003664  003985  // Syntax: myvar := file_Error();
003665  003986  // Usage : e := file_Error();
003666  003987  // Notes : return the most recent file error.
003667  003988  //       :
003668  003989        
003669  003990  func file_Count("filename"), 1;
003670  003991  // Syntax: count := file_Count("filename");
003671  003992  // Usage : count := file_Count("*.4dg");
003672  003993  // Notes : returns number of files found that match the criteria
003673  003994        
003674  003995  func file_Dir("filename"), 1;
003675  003996  // Syntax: count := file_Dir("filename");
003676  003997  // Usage : count := file_Dir("*.4dg");
003677  003998  // Notes : streams a string of filenames that agree with the search key
003678  003999  //       : returns number of files found that match the criteria
003679  004000        
003680  004001  func file_FindFirst("fname"), 1;
003681  004002  // Syntax: res := file_FindFirst("fname");
003682  004003  // Usage : if (file_FindFirst("*.4xe") ....
003683  004004  // Notes : returns true if at least 1 file exists
003684  004005  //       : that satisfies the file argument.
003685  004006  //       : Wildcards are usually used so if
003686  004007  //       : file_FindFirst returns true, further
003687  004008  //       : tests can be made using file_FindNext();
003688  004009  //       : to find all the files that match the
003689  004010  //       : wildcard class. Note that the stream behaviour
003690  004011  //       : is the same as file_Dir.
003691  004012  //       :
003692  004013        
003693  004014  func file_FindNext(), 1;
003694  004015  // Syntax: res := file_FindNext();
003695  004016  // Usage : while ((file_FindNext()) ....
003696  004017  // Notes : returns true if more file exists
003697  004018  //       : that satisfies the file argument
003698  004019  //       : that was given for  file_FindFirst.
003699  004020  //       : Wildcards must be used for
003700  004021  //       : file_FindFirst, else this function will
003701  004022  //       : always return zero as the only occurence
003702  004023  //       : will have already been found.
003703  004024  //       : Note that the stream behaviour
003704  004025  //       : is the same as file_Dir.
003705  004026  //       :
003706  004027        
003707  004028  func file_Exists("fname"), 1;
003708  004029  // Syntax: res := file_Exists("fname"),
003709  004030  // Usage : if(file_Exists("myfile") ....
003710  004031  // Notes : returns true if file exists
003711  004032  //       :
003712  004033        
003713  004034  func file_Open("fname", "mode"), 1;
003714  004035  // Syntax: handle := file_Open("fname","mode"),
003715  004036  // Usage : handle := file_Open("myfile.txt", 'r');
003716  004037  // Notes : returns handle if file exists
003717  004038  //       :
003718  004039        
003719  004040  func file_Close("handle"), 1;
003720  004041  // Syntax: res := file_Close("handle");
003721  004042  // Usage : res := file_Close(hnd1);
003722  004043  // Notes : returns true if file closed ok
003723  004044  //       :
003724  004045        
003725  004046  func file_Read("*dest", "size", "handle"), 1;
003726  004047  // Syntax: res := file_Read("*dest", "size", "handle"),
003727  004048  // Usage : res := file_Read(memblock,20,hnd1);
003728  004049  // Notes : returns number of characters read
003729  004050  //       : if "dest" is zero, data is read direct to GRAM window
003730  004051  //       :
003731  004052        
003732  004053        
003733  004054  func file_Seek("handle", "HiWord", "LoWord"), 1;
003734  004055  // Syntax: res := file_Seek("handle", "HiWord", "LoWord")
003735  004056  // Usage : res := file_Seek(hSource, 0, 0x1234);
003736  004057  // Notes : set file position to 0x00001234 (byte position 4660)
003737  004058  //       : for the file handle so subsequent data may be read
003738  004059  //       : from that position onwards with file_GetC(...),
003739  004060  //       : file_GetW(...) or file_GetS(...), or an image
003740  004061  //       : can be displayed with file_Image(...)
003741  004062  // Notes : returns true if ok, usually ignored
003742  004063        
003743  004064  func file_Index("handle", "HiSize", "LoSize","recordnum"), 1;
003744  004065  // Syntax: file_Index("handle", "HiSize", "LoSize","recordnum"), 1;
003745  004066  // Usage : res := file_Index(hsource, 0, 1000, 123), 1;
003746  004067  // Notes : set file seek position to 123000
003747  004068  //       : for the file handle so subsequent data may be read
003748  004069  //       : from that record position onwards with file_GetC(...),
003749  004070  //       : file_GetW(...) or file_GetS(...), or an image
003750  004071  //       : can be displayed with file_Image(...)
003751  004072  // Notes : returns true if ok, usually ignored
003752  004073        
003753  004074  func file_Tell("handle", "&HiWord", "&LoWord"), 1;
003754  004075  // Syntax: file_Tell("handle", &HiWord, &LoWord);
003755  004076  // Usage : file_Tell(fhndl, &SizeHi, &SizeLo);
003756  004077  // Notes : Reads the 32 bit file pointer and stores it into 2 variables.
003757  004078  //       : returns true if function succeeded
003758  004079        
003759  004080  func file_Write("*source", "size", "handle"), 1;
003760  004081  // Syntax: res := fwrite("*source", "size", "handle"),
003761  004082  // Usage : res := fwrite(memblock, 20, hnd1);
003762  004083  // Notes : returns number of bytes written
003763  004084  //       :
003764  004085        
003765  004086  func file_Size("handle", "&HiWord", "&LoWord"), 1;
003766  004087  // Syntax: file_Size("handle", &HiWord, &LoWord);
003767  004088  // Usage : file_Size(fhndl, &SizeHi, &SizeLo);
003768  004089  // Notes : Reads the 32 bit file size and stores it into 2 variables.
003769  004090  //       : returns true if function succeeded
003770  004091        
003771  004092  func file_Image("x", "y", "handle"), 1;
003772  004093  // Syntax: file_Image(x, y, handle);
003773  004094  // Usage : file_Image(10, 10, hnd1);
003774  004095  // Notes : Display an image from a file at the current file position.
003775  004096  //       : The image is displayed at x,y (with respect to top left corner).
003776  004097  //       : If there is more than 1 image in the file, it can be
003777  004098  //       : accessed with file_Seek(...)
003778  004099        
003779  004100  func file_ScreenCapture("x", "y", "width", "height", "handle"), 1;
003780  004101  // Syntax: file_ScreenCapture(x, y, w, h, handle);
003781  004102  // Usage : file_ScreenCapture(10, 10, 50,50, hnd1);
003782  004103  // Notes : Save a image from screen to file at the current file position.
003783  004104  //       : The image can later be displayed with file_Image(...);
003784  004105  //       : The file may be opened in append mode to accumulate multiple
003785  004106  //       : images. Later, the images can be accessed with file_Seek(...);
003786  004107  //       : Note that the image will be sector aligned.
003787  004108  //       : All image headers must start on a sector boundary.
003788  004109  //       : The image is saved from x, y (with respect to top left corner)
003789  004110  //       : and the capture area is determined by "width" and "height".
003790  004111  //       : returns 0 if function succeeded
003791  004112        
003792  004113  func file_PutC("char","handle"), 1;
003793  004114  // Syntax: file_PutC("char", "handle");
003794  004115  // Usage : file_PutC('x', hndl);
003795  004116  // Notes : returns true if function succeeded
003796  004117        
003797  004118  func file_GetC("handle"), 1;
003798  004119  // Syntax: file_GetC("handle");
003799  004120  // Usage : mychar := fgetC("handle");
003800  004121  // Notes : returns next char from file
003801  004122        
003802  004123  func file_PutW("word","handle"), 1;
003803  004124  // Syntax: file_PutW("word","handle");
003804  004125  // Usage : file_PutW(0x1234, hndl);
003805  004126  // Notes : returns true if function succeeded
003806  004127        
003807  004128  func file_GetW("handle"), 1;
003808  004129  // Syntax: file_GetW("handle");
003809  004130  // Usage : myword := fgetW("handle");
003810  004131  // Notes : returns next word in file
003811  004132        
003812  004133  func file_PutS("*source", "handle"), 1;
003813  004134  // Syntax: res := file_Puts("*source", "handle"),
003814  004135  // Usage : res := file_Puts(mystring, hnd1);
003815  004136  // Notes : returns number of characters written
003816  004137  //       :
003817  004138        
003818  004139  func file_GetS("*string", "size", "handle"), 1;
003819  004140  // Syntax: res := file_Gets("*string", "size", "handle");
003820  004141  // Usage : res := file_Gets(mystr , 81, hnd1); // read up to 80 chars
003821  004142  // Notes : get a string from a file
003822  004143  //       : returns pointer to string or null if failed.
003823  004144  //       : file_GetS(...) automatically appends a null-terminator to the data read.
003824  004145  //       : NB:- only reads up to "size-1" characters into "string"
003825  004146  //       : file_GetS(...) will stop reading when any of the following conditions are true:
003826  004147  //       : A] It has read n-1 bytes (one character is reserved for the null-terminator)
003827  004148  //       : B] It encounters a newline character (a line-feed in the compilers tested here), or
003828  004149  //       : C] It reaches the end of file
003829  004150  //       : D] A read error occurs.
003830  004151        
003831  004152        
003832  004153  func file_Erase("fname"), 1;
003833  004154  // Syntax: res := file_Erase("fname");
003834  004155  // Usage : res := file_Erase("myfile.txt");
003835  004156  // Notes : returns true if successful
003836  004157  //       :
003837  004158        
003838  004159  func file_Rewind("handle"), 1;
003839  004160  // Syntax: res := file_Rewind("handle");
003840  004161  // Usage : res := file_Rewind(hnd1);
003841  004162  // Notes : returns true if file rewound ok (usually ignored)
003842  004163  //       : resets the file pointer the the beginning of the open file.
003843  004164        
003844  004165  func file_LoadFunction("fname.4xe"), 1;
003845  004166  // Syntax: res := file_LoadFunction("fname.4fn");
003846  004167  // Usage : myfunc := file_LoadFunction(myfuncname);
003847  004168  // Notes : Load a function or program from disk and
003848  004169  //       : return a function pointer to the allocation.
003849  004170  //       : The function can then be invoked just like any other
003850  004171  //       : function would be called via a function pointer.
003851  004172  //       : Parameters may be passed to it in a conventional way.
003852  004173  //       : The function may be discarded at any time when no
003853  004174  //       : longer required, thus freeing its memory resources.
003854  004175  //       : The loaded function can be discarded with mem_Free(..)
003855  004176  //       : eg:
003856  004177  //       : popupWindow := file_LoadFunction("popupWindow1.4fn");
003857  004178  //       : if(!popupWindow) goto LoadFunctionFailed; // could not load the function !!!
003858  004179  //       : then elsewhere in your program:-
003859  004180  //       : res := popupWindow(MYMODE,"My Title","My Popup Text");
003860  004181  //       : if(res == QUIT_APPLICATION) goto exitApp;
003861  004182  //       : Later in your program, when popupWindow is no longer
003862  004183  //       : required for the application:-
003863  004184  //       : res := mem_Free(popupWindow);
003864  004185  //       : if(!res) goto FreeFunctionFailed; // should never happen if memory not corrupted
003865  004186  //       : The callers stack is shared by the loaded function,
003866  004187  //       : however any global variables in the loaded function
003867  004188  //       : are private to that function.
003868  004189  //
003869  004190        
003870  004191  func file_Run("fname.4xe", "arglistptr"), 1;
003871  004192  // Syntax: res := file_Run("fname.4xe","arglistptr");
003872  004193  // Usage : res := file_Run(fname, argptr);
003873  004194  // Notes : current program releases any allocated memory but
003874  004195  //       : retains the stack and global memory.
003875  004196  //       : If arglistptr is 0, no arguments are passed, else
003876  004197  //       : arglist points to an array, the first element being
003877  004198  //       : the number of elements in the array.
003878  004199  //       : func 'main' in the called program accepts
003879  004200  //       : the arguments, if any. The arguments can only
003880  004201  //       : be passed by value, no pointers or references can be
003881  004202  //       : used as all memory is cleared before the file
003882  004203  //       : is loaded. Refer to file_Exec and file_LoadFunction
003883  004204  //       : for functions that can pass by reference.
003884  004205        
003885  004206  func file_Exec("fname.4xe", "arglistptr"), 1;
003886  004207  // Syntax: res := file_Exec("fname.4xe","arglistptr");
003887  004208  // Usage : res := file_Exec("fname.4xe","arglistptr");
003888  004209  // Notes : returns like a function, current program
003889  004210  //       : calling program is kept active and control returns to it.
003890  004211  //       : If arglistptr is 0, no arguments are passed, else
003891  004212  //       : arglist points to an array, the first element being
003892  004213  //       : the number of elements in the array.
003893  004214  //       : func 'main' in the called program accepts the arguments.
003894  004215  //       : This function is similar to file_LoadFunction(...), however,
003895  004216  //       : the function argument list is passed by pointer, and
003896  004217  //       : the memory consumed by the function is released as
003897  004218  //       : soon as the function completes.
003898  004219        
003899  004220  func file_LoadImageControl("fname1", "fname2", "mode"), 1;
003900  004221  // Syntax: hImagelist := file_LoadImageControl ("controlfile", "imagefile", "mode"),
003901  004222  // Usage : hImagelist := file_LoadImageControl ("resource.dat", "resource.gci", 0);
003902  004223  // Notes : Reads a control file to create an image list.
003903  004224  //       : Returns NULL if function fails.
003904  004225  //       : Returns a handle (pointer to the memory allocation) to the
003905  004226  //       : image control list that has been created.
003906  004227  //       : "fname1" is the control list filename "*.dat"
003907  004228  //       : "fname2" is the image filename "*.gci"
003908  004229        
003909  004230  // Notes : This function Calculates the size of a chunk of memory required for
003910  004231  //       : a image list and populates it from the image control file ("*.dat")
003911  004232  //       : therefore, when imagelist is no longer required, you must de-allocate
003912  004233  //       : the image list memory by using eg:- mem_Free(hImagelist);
003913  004234  //       : to restore the heap.
003914  004235  //       :
003915  004236  //       : mode 0:- it is assumed that there is a graphics file with the
003916  004237  //       : file extension "fname2.gci". In this case, the images have been stored
003917  004238  //       : in a FAT16 file concurrently, and the offsets that ar derived from the
003918  004239  //       : "fname1.dat" file are saved in the image control so that the image control
003919  004240  //       : can open the file (*.gci) and us file_Seek to get to the position of the
003920  004241  //       : image which can then automatically be displayed using file_Image(xpos, ypos, hSource);
003921  004242  //       : mode 0 builds the image control quickly as it only scans the *.dat file
003922  004243  //       : for the file offsets and save them in the relevant entries in the image control.
003923  004244  //       : The penalty is that images take longer to find when displayed due to file_Seek
003924  004245  //       : overheads.
003925  004246  //
003926  004247  //       : mode 1:- it is assumed that there is a graphics file with the
003927  004248  //       : file extension "fname2.gci". In this case, the images have been stored
003928  004249  //       : in a FAT16 file concurrently, and the offset of the images are saved
003929  004250  //       : in the image control so that image file (*.gci) can be mapped to directly.
003930  004251  //       : The absolute cluster/sector is mapped so file seek does not need to be called
003931  004252  //       : internally. This means that there is no seek time penalty, however, the
003932  004253  //       : image list takes a lot longer to build, as all the seeking is done at control
003933  004254  //       : build time.
003934  004255        
003935  004256  //       : mode 2:- the graphics file with the is placed in a partitioned area
003936  004257  //       : In this case, the images have been stored in a in a known raw area of the FAT16
003937  004258  //       : disk, and the absolute address of the images are saved in the DAT file
003938  004259  //       : This is the fastest operation of the image control as there is no seeking
003939  004260  //       : or other disk activity taking place.
003940  004261        
003941  004262  func file_Mount(), 1;
003942  004263  // Syntax: r := file_Mount();
003943  004264  // Usage : r := file_Mount();
003944  004265  // Notes : Create a control block for FAT16 and mount the File System
003945  004266        
003946  004267  func file_Unmount(), 0;
003947  004268  // Syntax: file_Unmount();
003948  004269  // Usage : file_Unmount();
003949  004270  // Notes : release any control block and buffers for FAT16
003950  004271  //       : and unmount the File System
003951  004272        
003952  004273  func file_PlayWAV("fname1"), 1;
003953  004274  // Syntax: file_PlayWAV("fname1");
003954  004275  // Usage : file_PlayWAV("ding.wav");
003955  004276  // Notes : Play a wave file with filename "fname1"
003956  004277  //       : This function automatically grabs a chunk
003957  004278  //       : of memory for a file buffer, and a wave
003958  004279  //       : buffer. The minimum memory requirement is
003959  004280  //       : about 580 bytes for the disk io service and
003960  004281  //       : a minimum wave buffer size of 1024. The siz
003961  004282  //       : of the wave buffer allocation
003962  004283  //       : can be increased by the snd_BufSize function.
003963  004284  //       : The default size 1024 bytes.
003964  004285  //       : NB the memory is only required during the
003965  004286  //       : duration of play, and is automatically
003966  004287  //       : released while not in use.
003967  004288  //       : See the Sound Class services for other associated controls.
003968  004289  //       : If there are no errors, returns number of blocks to play (1 to 32767)
003969  004290  //       : If errors occured, the folling is returned
003970  004291  //       : -7  : Insufficient memory available for WAV buffer and file
003971  004292  //       : -6  : cant play this rate
003972  004293  //       : -5  : no data chunk found in first rsector
003973  004294  //       : -4  : no format data
003974  004295  //       : -3  : no wave chunk signature
003975  004296  //       : -2  : bad wave file format
003976  004297  //       : -1  : file not found
003977  004298        
003978  004299  func file_Rename("fname1", "fname2"), 1;     // rename a file
003979  004300  // Syntax: file_Rename ("oldname", "newname"),
003980  004301  // Usage : file_Rename ("file.txt", "file.bak");
003981  004302  // Notes : Renames a file on uSD.
003982  004303  //       : Returns FALSE if function fails. (file does not exist, or new filename already exists)
003983  004304  //       : Returns TRUE, if successful.
003984  004305        
003985  004306  func file_SetDate("handle", "year", "month", "day", "hour", "Minute", "Second") , 1; // Sets date and time for an open file
003986  004307  // Syntax: res := file_SetDate("handle", "year", "month", "day", "hour", "Minute", "Second) ;
003987  004308  // Usage : res := file_SetDate(hndl, 2014, 10, 31, 10, 0, 0)
003988  004309  // Notes : year is a 4 digit year
003989  004310  //       : Due to limitations of FAT16 only even seconds are stored
003990  004311  //       : The handle must be closed before the file information is updated
003991  004312  //       : returns TRUE if date + time + handle valid
003992  004313  //       : returns FLAST if handle invalid, or date or time not valid (only simple checking performed).
003993  004314        
003994  004315  func __reserved57(), 0; // do not remove
003995  004316  func __reserved58(), 0; // do not remove
003996  004317        
003997  004318  //------------------------------------------------------------------------------
003998  004319  // FILEIO Error Code Constants
003999  004320  //------------------------------------------------------------------------------
004000  004321  #CONST
004001  004347  #END
004002  004348        
004003  004349  //------------------------------------------------------------------------------
004004  004350  // DISK struct offsets
004005  004351  //------------------------------------------------------------------------------
004006  004352  #CONST
004007  004369  #END
004008  004370        
004009  004371  //------------------------------------------------------------------------------
004010  004372  // FILE struct offsets
004011  004373  //------------------------------------------------------------------------------
004012  004374  #CONST
004013  004393  #END
004014  004394        
004015  004395        
004016  004396  //------------------------------------------------------------------//
004017  004397  //        Sound Class Services
004018  004398  //------------------------------------------------------------------//
004019  004399        
004020  004400  func snd_Volume("var"), 0;
004021  004401  // Syntax: snd_Volume("var");
004022  004402  // Usage : snd_Volume(30);
004023  004403  // Notes : set sound playback volume.  Var must
004024  004404  //       : be in the range from 8 (min volume)
004025  004405  //       : to 127 (max volume). If var is less
004026  004406  //       : than 8 volume is set to 8, and if
004027  004407  //       : var > 127 it is set to 127.
004028  004408        
004029  004409  func snd_Pitch("pitch"), 1;
004030  004410  // func snd_Pitch("freq"), 1;
004031  004411  // func snd_Pitch(7000), 1; // play the wave file with a sample frequency of 7khz
004032  004412  // Notes : sets the samples playback rate to a different frequency
004033  004413  //       : The minimum value is 4khz
004034  004414  //       : Setting the pitch to zero restores the original sample rate
004035  004415  //       : Return value is the samples original sample rate.
004036  004416        
004037  004417  func snd_BufSize("var"), 0;
004038  004418  // Syntax: snd_BufSize("var");
004039  004419  // Usage : snd_BufSize(2);
004040  004420  // Notes : specify the a memory chunk size for the wavefile buffer.
004041  004421  //       : default size 1024 bytes.
004042  004422  //       : 0 = 1024 bytes (default)
004043  004423  //       : 1 = 2048 bytes
004044  004424  //       : 2 = 4096 bytes
004045  004425  //       : 3 = 8192 bytes
004046  004426        
004047  004427  func snd_Stop(), 0;
004048  004428  // Syntax: snd_Stop();
004049  004429  // Usage : snd_Stop();
004050  004430  // Notes : stop any sound that is playing, releasing
004051  004431  //       : buffers and closes any open wav file.
004052  004432        
004053  004433  func snd_Pause(), 0;
004054  004434  // Syntax: snd_Pause();
004055  004435  // Usage : snd_Pause();
004056  004436  // Notes : pauses any sound that is playing, does nothing
004057  004437  //       : until sound is resumed with snd_Continue().
004058  004438  //       : The sample cam be terminated with snd_Stop.
004059  004439  //       : buffers and closes any open wav file.
004060  004440        
004061  004441  func snd_Continue(), 0;
004062  004442  // Syntax: snd_Continue();
004063  004443  // Usage : snd_Continue();
004064  004444  // Notes : resume any sound that is paused by snd_Pause.
004065  004445        
004066  004446  func snd_Playing(), 1;
004067  004447  // Syntax: snd_Playing();
004068  004448  // Usage : r := snd_Playing();
004069  004449  // Notes : returns 0 if sound has finished playing,
004070  004450  //       : else return number of 512 byte blocks to go.
004071  004451        
004072  004452  func snd_Freq("Freq", "Duration"), 1;
004073  004453  // Syntax: snd_Freq("Freq", "Duration");
004074  004454  // Usage : r := snd_Freq(1000, 2000);
004075  004455  // Notes : Returns 0 if note cannot be played because a wav file is playing
004076  004456  //       : else return True.
004077  004457  //       : Minimum Freq is 20
004078  004458  //       : This will produce a pure Square wave and is designed for driving
004079  004459  //       : Piezo transducers which require this sort of drive. It can also be
004080  004460  //       : used to drive the amp on displays with audio.
004081  004461        
004082  004462        
004083  004463  func __reserved60(), 0; // do not remove
004084  004464  func __reserved61(), 0; // do not remove
004085  004465  func __reserved62(), 0; // do not remove
004086  004466        
004087  004467  //=========================================================================================================
004088  004468  // String functions
004089  004469  //=========================================================================================================
004090  004470        
004091  004471  func str_Ptr("&var"), 1;
004092  004472  // Syntax: str_Ptr(&var);
004093  004473  // Usage : p := str_Ptr(&var);
004094  004474  // Notes : return a byte pointer to a word region
004095  004475        
004096  004476  func str_GetD("&ptr", "&var"), 1;
004097  004477  // Syntax: str_GetD(&ptr, &var);
004098  004478  // Usage : ok := str_GetD(&ptr, &var);
004099  004479  // Notes : convert number in a string to DWORD ( myvar[2] )
004100  004480  //       : returns true if function succeeds, advancing ptr
004101  004481        
004102  004482  func str_GetW("&ptr", "&var"), 1;
004103  004483  // Syntax: str_GetW(&ptr, &var);
004104  004484  // Usage : ok := str_GetW(&ptr, &var);
004105  004485  // Notes : convert number in a string to WORD ( myvar )
004106  004486  //       : returns true if function succeeds, advancing ptr
004107  004487        
004108  004488  func str_GetHexW("&ptr", "&var"), 1;
004109  004489  // Syntax: str_GetHexW(&ptr, &var);
004110  004490  // Usage : ok := str_GetHexW(&ptr, &var);
004111  004491  // Notes : convert HEX number in a string to WORD ( myvar )
004112  004492  //       : returns true if function succeeds, advancing ptr
004113  004493        
004114  004494  func str_GetC("&ptr", "&var"), 1;
004115  004495  // Syntax: str_GetC(&ptr, &var);
004116  004496  // Usage : ok := str_GetC(&ptr, &var);
004117  004497  // Notes : get a valid ascii char in a string to WORD ( myvar )
004118  004498  //       : returns true if function succeeds, advancing ptr
004119  004499        
004120  004500  func str_GetByte("ptr"), 1;
004121  004501  // Syntax: str_GetByte(ptr);
004122  004502  // Usage : myvar := str_GetByte(ptr);
004123  004503  // Notes : get a byte to myvar
004124  004504  //       : returns value
004125  004505        
004126  004506  func str_GetWord("ptr"), 1;
004127  004507  // Syntax: GetWord(ptr);
004128  004508  // Usage : GetWord(ptr);
004129  004509  // Notes : get a word to myvar
004130  004510  //       : returns value
004131  004511        
004132  004512  func str_PutByte("ptr","val"), 0;
004133  004513  // Syntax: str_PutByte(ptr);
004134  004514  // Usage : myvar := str_PutByte(ptr);
004135  004515  // Notes : put a byte at ptr
004136  004516  //       : returns value
004137  004517        
004138  004518  func str_PutWord("ptr","val"), 0;
004139  004519  // Syntax: str_PutWord("ptr","val");
004140  004520  // Usage : str_PutWord(p,100);
004141  004521  // Notes : put word 100 at current pointer location
004142  004522  //       : returns value
004143  004523        
004144  004524  func str_Match("&ptr", "*str"), 1;
004145  004525  // Syntax: str_Match(&ptr, *str);
004146  004526  // Usage : r := str_Match(&p, "hello");
004147  004527  // Notes : Case sensitive match
004148  004528  //       : returns true if function succeded, andvancing pointer to position past
004149  004529  //       : the matched item. Note that any whitespace characters are skipped
004150  004530  //       : in the source string prior to the test.
004151  004531        
004152  004532  func str_MatchI("&ptr", "*str"), 1;
004153  004533  // Syntax: str_MatchI(&ptr, *str);
004154  004534  // Usage : r := str_MatchI(&p, "hello");
004155  004535  // Notes : Case insensitive match
004156  004536  //       : returns true if function succeded, andvancing pointer to position past
004157  004537  //       : the matched item. Note that any whitespace characters are skipped
004158  004538  //       : in the source string prior to the test.
004159  004539        
004160  004540  func str_Find("&ptr", "*str"), 1;
004161  004541  // Syntax: str_Find(&ptr, *str);
004162  004542  // Usage : n := str_Find(&p, "hello");
004163  004543  // Notes : given the address of a pointer to a source string as the
004164  004544  //       : first argument, and a pointer to a test string as the second
004165  004545  //       : argument, attempt to find the position of the matching string
004166  004546  //       : in the source string. The test is performed with case sensitivity.
004167  004547  //       : return 0 if not found, else returns the address of the first
004168  004548  //       : character of the match. NB:- The source pointer is not altered.
004169  004549        
004170  004550  func str_FindI("&ptr", "*str"), 1;
004171  004551  // Syntax: str_Find(&ptr, *str);
004172  004552  // Usage : n := str_Find(&p, "hello");
004173  004553  // Notes : given the address of a pointer to a source string as the
004174  004554  //       : first argument, and a pointer to a test string as the second
004175  004555  //       : argument, attempt to find the position of the matching string
004176  004556  //       : in the source string. The test is performed with no case
004177  004557  //       : sensitivity, eg upper and lower case chars are accepted.
004178  004558  //       : return 0 if not found, else returns the address of the first
004179  004559  //       : character of the match. NB:- The source pointer is not altered.
004180  004560        
004181  004561  func str_Length("ptr"), 1;
004182  004562  // Syntax: str_Length(ptr);
004183  004563  // Usage : len := str_Ptr(mystring);
004184  004564  // Notes : return the length of a byte aligned string excluding terminator
004185  004565        
004186  004566  func str_Printf("&ptr", "*format"), 1;
004187  004567  // Syntax: str_Printf("&ptr", "*format");
004188  004568  // Usage : r := str_Printf(&p, "hello");
004189  004569  // Notes : refer to documentation
004190  004570  //       :
004191  004571        
004192  004572  func str_Cat("dest","src"), 1;
004193  004573  // Syntax: str_Append("&dest","&src");
004194  004574  // Usage : str_Append(&buf,"Hello");
004195  004575  // Notes : Appends a copy of the source string to the destination string.
004196  004576  //       : The terminating null character in destination is overwritten by
004197  004577  //       : the first character of source, and a new null-character is appended
004198  004578  //       : at the end of the new string formed by the concatenation of both in destination.
004199  004579  //       : returns destination.
004200  004580        
004201  004581  func str_CatN("dest","src","count"), 1;
004202  004582  // Syntax: str_Append("&dest","&src","count");
004203  004583  // Usage : str_Append(&buf,"Monday",3);
004204  004584  // Notes : Appends a copy of the source string to the destination string.
004205  004585  //       : The number of characters copied is limited by "count".
004206  004586  //       : The terminating null character in destination is overwritten by
004207  004587  //       : the first character of source, and a new null-character is appended
004208  004588  //       : at the end of the new string formed by the concatenation of both in destination.
004209  004589  //       : returns destination.
004210  004590        
004211  004591        
004212  004592  func str_ByteMove("src", "dest", "count"), 1;
004213  004593  // Syntax   : str_ByteMove(src, dest, bytecount);
004214  004594  // Input    : STR *source points to byte aligned source.
004215  004595  //          : STR *dest   points to byte aligned destination.
004216  004596  //          : VAR count   number of bytes to transfer.
004217  004597  // Usage    : nextpos := str_ByteMove(s, d, 100);
004218  004598  // Notes    : copy bytes from "src" to "dest", stopping only
004219  004599  //          : when "count" is exhausted.
004220  004600  //          : No terminator is appended, it is purely a
004221  004601  //          : byte copy, and any zeroes encountered will
004222  004602  //          : also be copied.
004223  004603  // Returns  : returns a pointer to the end of the destination
004224  004604  //          : (which is "dest" + "count")
004225  004605        
004226  004606        
004227  004607  func str_Copy("dest", "src"), 1;
004228  004608  // Syntax   : str_Copy(dest, src);
004229  004609  // Input    : STR *dest   points to byte aligned destination.
004230  004610  //          : STR *source points to byte aligned source.
004231  004611  // Usage    : nextplace := str_Copy(d, s);
004232  004612  // Notes    : copy a string from "src" to "dest", stopping only
004233  004613  //          : when the end of source string "src" is encountered
004234  004614  //          : (0x00 terminator).
004235  004615  //          : The terminator is always appended, even if "src" is
004236  004616  //          : an empty string.
004237  004617  // Returns  : returns a pointer to the 0x00 string terminator at
004238  004618  //          : end of "dest" (which is "dest" + str_Length(src); )
004239  004619        
004240  004620        
004241  004621  func str_CopyN("dest", "src", "count"), 1;
004242  004622  // Syntax   : str_CopyN(dest, src, bytecount);
004243  004623  // Input    : STR *dest   points to byte aligned destination.
004244  004624  //          : STR *source points to byte aligned source.
004245  004625  //          : VAR count   max number of chars to copy.
004246  004626  // Usage    : nextplace := str_CopyN(d, s, 100);
004247  004627  // Notes    : copy a string from "src" to "dest", stopping only
004248  004628  //          : when "count" is exhausted, or end of source
004249  004629  //          : string "str" is encountered (0x00 string terminator).
004250  004630  //          : The terminator is always appended, even if
004251  004631  //          : "count" is zero, or "src" is a null string.
004252  004632  // Returns  : returns a pointer to the 0x00 string terminator
004253  004633  //          : (which is "dest" + whatever was copied)
004254  004634        
004255  004635        
004256  004636  func __reserved63(), 0; // do not remove
004257  004637  func __reserved64(), 0; // do not remove
004258  004638  func __reserved65(), 0; // do not remove
004259  004639  func __reserved66(), 0; // do not remove
004260  004640        
004261  004641  //=========================================================================================================
004262  004642  // FLASH memory functions
004263  004643  //=========================================================================================================
004264  004644  func flash_GetByte("bank", "ptr"), 1;
004265  004645  // Syntax   : flash_GetByte(bank, ptr);
004266  004646  // Usage    : myvar := flash_GetByte(FLASHBANK_2, 0x0017); // read first byte in data statement of bank 2
004267  004647  // Notes    : Reads a single byte from any flash location.
004268  004648  //          : If the bank is read protected, only the first 2 bytes can be read (0x55, 0xAA)
004269  004649  //          : which is the header signature for a valid program.
004270  004650  // Returns  : the byte value from the location
004271  004651        
004272  004652        
004273  004653  func flash_GetWord("bank", "ptr"), 1;
004274  004654  // Syntax   : flash_GetWord(bank, ptr);
004275  004655  // Usage    : myvar := flash_GetWord(FLASHBANK_2, 0x0000); // read first word in flash bank  (0xAA55)
004276  004656  // Notes    : Reads a single word from any flash location.
004277  004657  //          : The pointer is byte aligned.
004278  004658  //          : If the bank is read protected, only the first word can be read
004279  004659  //          : which is the header signature for a valid program (0xAA55).
004280  004660  // Returns  : the byte value from the location
004281  004661        
004282  004662        
004283  004663  func flash_Copy("bank", "ptr", "dest", "count"), 1;
004284  004664  // Syntax   : flash_Copy(bank, ptr);
004285  004665  // Usage    : myvar := flash_Copy(FLASHBANK_2, 0x1234, mybuf, 20); // read 20 bytes from FLASHBANK_2 starting from 0x1234
004286  004666  // Notes    : Copies bytes from any flash locations to a user buffer.
004287  004667  //          : The destination pointer is byte aligned, so a str_Ptr must be raised to get correct address.
004288  004668  //          : If the bank is read protected, 0 bytes will be read
004289  004669  //          : which is the header signature for a valid program (0xAA55).
004290  004670  // Returns  : the count of bytes transferred.
004291  004671        
004292  004672        
004293  004673  func flash_Run("bank"), 1;
004294  004674  // Syntax    : flash_Run(bankx);
004295  004675  // Usage     : res := flash_Run(FLASHBANK_5);
004296  004676  // Notes     : Restarts the processor, running code from the required
004297  004677  //           : flash bank. bank may be a variable, or one of the
004298  004678  //           : pre-defined constants:-
004299  004679  //           :    FLASHBANK_0                 //0x00
004300  004680  //           :    FLASHBANK_1                 //0x01
004301  004681  //           :    FLASHBANK_2                 //0x02
004302  004682  //           :    FLASHBANK_3                 //0x03
004303  004683  //           :    FLASHBANK_4                 //0x04
004304  004684  //           :    FLASHBANK_5                 //0x05
004305  004685  // returns    : This function should net return as it restarts
004306  004686  //        : the processor and jumps to the required bank,
004307  004687  //        : If it does return, -1 indicates incorrect/invalid
004308  004688  //        : bank number, and -2 indicates no valid program
004309  004689  //        : in the selected bank.
004310  004690        
004311  004691  func flash_Bank(), 1;
004312  004692  // Syntax   : flash_Bank();
004313  004693  // Usage    : myvar := flash_Bank();
004314  004694  // Notes    : Identifies which flash bank the code is running from.
004315  004695  // Returns  : The FLASH bank that code is currently running from, 0-5.
004316  004696        
004317  004697        
004318  004698  func flash_EraseBank("bank", "confirmation"), 1;
004319  004699  // Syntax   : flash_EraseBank(bank, confirmation);
004320  004700  // Usage    : result := flash_EraseBank(FLASHBANK_3, 0xDEAD); // erase an entire flash bank, confirm overwrite of protected program
004321  004701  // Notes    : This function should be used with extreme caution.
004322  004702  //          : The selected bank will be completely erased regardless of FLASH_WRITE_PROTECT status
004323  004703  //          : if the confirmation value is set to hex 0xDEAD. If confirmation is any other value,
004324  004704  //          : a protected bank will not be erased, and function will return with 0
004325  004705  //          : If the destination bank is the same as the execution bank, the processor will reset
004326  004706  //          : upon completion of erase. If the "bank" argument is set to ALL (-1) and confirmation is set to 0xDEAD
004327  004707  //          : FLASHBANK_0 thru FLASHBANK_5 are cleared.
004328  004708  //          : Used with caution, this is a good way to 'clean up' the entire flash when starting new projects.
004329  004709  // Returns  : returns true if the function succeeded
004330  004710  //          : NB:- reset processor if program is erasing itself, or the ALL bank option is selected.
004331  004711        
004332  004712  func flash_LoadFile("bank", "filename"), 1;
004333  004713  // Syntax   : flash_LoadFile(bank, ptr);
004334  004714  // Usage    : result := flash_LoadFile(FLASHBANK_2, "TETRIS10.EXE"); // load the file from disk into FLASHBANK_2
004335  004715  // Notes    : Copies a file from uSD to the required flashbank.
004336  004716  //          : The destination bank cannont be the execution bank, or a bank that is write protected
004337  004717  // Returns  : returns true if the function succeeded.
004338  004718        
004339  004719        
004340  004720  func flash_WriteBlock("sourceptr", "bank", "page"), 1;
004341  004721  // Syntax   : flash_WriteBlock(pbuf, bank, page);
004342  004722  // Usage    : result := flash_WriteBlock(buffer, FLASHBANK_5, 8); // store the 2k buffer to FLASHBANK_5, location 16384
004343  004723  // Notes    : Copies a 2kbyte buffer to the required flashbank in block 0-15.
004344  004724  //          : The address of each block is 0, 2048, 4096 etc, determined by the page number 0-15.
004345  004725  //          : The destination bank cannot be an execution bank, or a program bank that is write protected.
004346  004726  // Returns  : returns true if the function succeeded.
004347  004727        
004348  004728        
004349  004729  func flash_putstr("bank", "ptr"), 1;
004350  004730  // Syntax   : flash_putstr(bank, ptr);
004351  004731  // Usage    : flash_Copy(FLASHBANK_2, 350); // print a string from FLASHBANK_2, location 350
004352  004732  // Notes    : Works the same as putstr, however, the source of the asciiz string is in FLASH storage
004353  004733  //          : Output may be redirected with the to(..) function. Bit15 of ptr is assumed 0.
004354  004734  // Returns  : True if function succeeds, usually ignored. 0 if bank is read protected
004355  004735        
004356  004736  func flash_Blit16("bank", "offset", "count"), 1;
004357  004737  // Syntax   : flash_Blit16(bank, offset, pixelcount);
004358  004738  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit16(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (800 bytes)
004359  004739  // Notes    : Blit an image to a GRAM window from FLASH storage.
004360  004740  //          : Image is stored 16bits per pixel (565) in a linear fashion to suit the GRAM mechanism
004361  004741  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004362  004742        
004363  004743  func flash_Blit8("bank", "offset", "count"), 1;
004364  004744  // Syntax   : flash_Blit8(bank, offset, pixelcount);
004365  004745  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit8(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (400 bytes)
004366  004746  // Notes    : Blit an image to a GRAM window from FLASH storage.
004367  004747  //          : Image is stored 8 bits per pixel (332 format) in a linear fashion to suit the GRAM mechanism
004368  004748  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004369  004749        
004370  004750  func flash_Blit4("bank", "offset", "count", "palette16colour"), 1;
004371  004751  // Syntax   : flash_Blit16(bank, offset, pixelcount, pal16);
004372  004752  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit4(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (200 bytes packed 4:4)
004373  004753  // Notes    : Blit an image to a GRAM window from FLASH storage.
004374  004754  //          : Image is stored in a linear fashion to suit the GRAM mechanism, palette is 16 x 16bit colours
004375  004755  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004376  004756        
004377  004757  func flash_Blit2("bank", "offset", "count", "palette4colour"), 1;
004378  004758  // Syntax   : flash_Blit16(bank, offset, pixelcount, pal4);
004379  004759  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit2(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (100 bytes packed 2:2:2:2)
004380  004760  // Notes    : Blit an image to a GRAM window from FLASH storage.
004381  004761  //          : Image is stored in a linear fashion to suit the GRAM mechanism, palette is 4 x 16bit colours
004382  004762  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004383  004763        
004384  004764  func flash_Blit1("bank", "offset", "count", "pallete2colour"), 1;
004385  004765  // Syntax   : flash_Blit1(bank, offset, pixelcount, pal2);
004386  004766  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit1(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (50 bytes packed 1:1:1:1:1:1:1:1)
004387  004767  // Notes    : Blit an image to a GRAM window from FLASH storage.
004388  004768  //          : Image is stored in a linear fashion to suit the GRAM mechanism, palette is 2 x 16bit colours
004389  004769  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004390  004770        
004391  004771  func flash_Exec("bank", "arglistptr"), 1;
004392  004772  // Syntax: res := flash_Exec("bank","arglistptr");
004393  004773  // Usage : res := flash_Exec("bank","arglistptr");
004394  004774  // Notes : returns like a function, current program
004395  004775  //       : calling program is kept active and control returns to it.
004396  004776  //       : If arglistptr is 0, no arguments are passed, else
004397  004777  //       : arglist points to an array, the first element being
004398  004778  //       : the number of elements in the array.
004399  004779  //       : func 'main' in the called bank accepts the arguments.
004400  004780  // WARNING Not currently implemented!
004401  004781        
004402  004782        
004403  004783  func __reserved68(), 0; // do not remove
004404  004784  func __reserved69(), 0; // do not remove
004405  004785  func __reserved70(), 0; // do not remove
004406  004786        
004407  004787  //=========================================================================================================
004408  004788  // I/O and hardware functions
004409  004789  //=========================================================================================================
004410  004790        
004411  004791        
004412  004792        
004413  004793        
004414  004794  func pin_Pulseout("pin", "value"), 1;        // non blocking (program execution continues during pulse)
004415  004795  func pin_PulseoutB("pin", "value"), 1;    // blocking (program execution suspended during pulse)
004416  004796  // Syntax: pin_Pulseout(pin, value);
004417  004797  // Usage : pin_Pulseout(PA3, 100);                 // output 100msec pulse on PA3
004418  004798  // Notes : only available on PA0 to PA9
004419  004799  //       : Invert the state of an output for "value" milliseconds.
004420  004800  //       : pulseout is non blocking, that is, code execution may continue while
004421  004801  //       : a pulse is occuring, and pulses can occur on multiple pins simultaneously.
004422  004802  //       : If not already an output, pin is automatically made a push/pull output,
004423  004803  //       : and the last state of its output latch will determine pulse polarity.
004424  004804  //       : It's its open drain state is not altered if the pin was already an output.
004425  004805  //       : If pulseout is called while pulseout is still active, the pulse timer
004426  004806  //       : will simply be updated with the new "value" and the pulse will continue
004427  004807  //       : with the extended value.
004428  004808  //       : returns true if the pin number is legal (usually ignored)
004429  004809        
004430  004810        
004431  004811  func pin_Counter("pin", "mode", "OVFfunction"), 1;
004432  004812  // Syntax: pin_Counter(pin, mode, userfunc);
004433  004813  // Usage : pin_Counter(PA5, 1, stopfunc);         // count rising edge pulses on pin PA5, call stopfunc on overflow
004434  004814  // Notes : only available on PA4 to PA9
004435  004815  //       : Connect a counter to a pin to count transistions, and optionally call an event function
004436  004816  //       : when the 16bit counter wraps from 0xFFFF to zero. The counter can be read or written
004437  004817  //       : to at any time with peekW and pokeW, therefore, the count may be set to eg 0xFFF0 so that eg:
004438  004818  //       : user function "OVFfuction" will be called after 16 pulses. If "OVFfunction" is set to zero, only the
004439  004819  //       : counter will increment, and simply wrap back to zero from 0xFFFF. If "OVFfunction" points to a user
004440  004820  //       : function, wnen the event fires, pin_Counter will be disabled, and will need to be re-armed (ie '1shot' operation)
004441  004821  //       : The pin may be configured as an input or output, the function behaves the same.
004442  004822  //       : All six pin counters may be active simultaneously, and the maximum frequency of pin transistions
004443  004823  //       : should not exceed a few Khz in mode 1 and 2and are usually used for simple process control counting.
004444  004824  //       : "mode" has the following effect:-
004445  004825  //       : mode COUNT_OFF(0)  = disconnect the counter from the pin, "OVFfunction" therefore ignored, and counting is inhibited.
004446  004826  //       : mode COUNT_RISE(1) = increment on every rising edge
004447  004827  //       : mode COUNT_FALL(2) = increment on every falling edge
004448  004828  //       : mode COUNT_EDGE(3) = increment on every rising and falling edge
004449  004829        
004450  004830  //------------------------------------------------------------------//
004451  004831  // pin counter mode constants                                       //
004452  004832  //------------------------------------------------------------------//
004453  004833  #CONST
004454  004838  #END
004455  004839        
004456  004840  func Qencoder1("PHApin", "PHBpin", "mode"), 1;
004457  004841  // Syntax: Qencoder1(pinA, pinB, mode);
004458  004842  // Usage : Qencoder1(PA4, PA5, stopfunc);         // connect PA4 and PA5 pins to qudrature encoder module #1
004459  004843  // Notes : not available on pins PA14 and PA15
004460  004844  //       : Connect a quadrature encoder to a pair of pins The position counter and delta can be read
004461  004845  //       : or written to at any time with peekW and pokeW using the following constants:-
004462  004846  //       : It is necessary to configure the pins first, depending on your requirements, eg
004463  004847  //       :           pin_Set(PIN_INP_HI, PA4);     // PA4 as input, with pullup to Vcc
004464  004848  //       : or maybe  pin_Set(PIN_INP, PA4);        // PA4 as input, no pullup or pulldown
004465  004849  //       : Returns true if the pin numbers are legal (usually ignored)
004466  004850  //    QEN1_COUNTER_LO
004467  004851  //    QEN1_COUNTER_HI
004468  004852  //    QEN1_DELTA This is reset to 0 when read
004469  004853        
004470  004854  func Qencoder2("PHApin", "PHBpin", "mode"), 1;
004471  004855  // Syntax: Qencoder2(pinA, pinB, mode);
004472  004856  // Usage : Qencoder2(PA4, PA5, stopfunc);         // connect PA4 and PA5 pins to qudrature encoder module #2
004473  004857  // Notes : not available on pins PA14 and PA15
004474  004858  //       : Connect a quadrature encoder to a pair of pins The position counter and delta can be read
004475  004859  //       : or written to at any time with peekW and pokeW using the following constants:-
004476  004860  //       : It is necessary to configure the pins first, depending on your requirements, eg
004477  004861  //       :           pin_Set(PIN_INP_HI, PA4);     // PA4 as input, with pullup to Vcc
004478  004862  //       : or maybe  pin_Set(PIN_INP, PA4);        // PA4 as input, no pullup or pulldown
004479  004863  //       : Returns true if the pin numbers are legal (usually ignored)
004480  004864  //    QEN2_COUNTER_LO
004481  004865  //    QEN2_COUNTER_HI
004482  004866  //    QEN2_DELTA This is reset to 0 when read
004483  004867        
004484  004868        
004485  004869  func Qencoder1Reset(), 0;
004486  004870  // Syntax: Qencoder1Reset();
004487  004871  // Usage : Qencoder1Reset();     // reset the counter and delta value for encoder #1
004488  004872  // Notes :
004489  004873  //    QEN1_COUNTER_LO is reset to zero
004490  004874  //    QEN1_COUNTER_HI is reset to zero
004491  004875  //    QEN1_DELTA is reset to zero
004492  004876        
004493  004877  func Qencoder2Reset(), 0;
004494  004878  // Syntax: Qencoder2Reset();
004495  004879  // Usage : Qencoder2Reset();     // reset the counter and delta value for encoder #2
004496  004880  // Notes :
004497  004881  //    QEN2_COUNTER_LO is reset to zero
004498  004882  //    QEN2_COUNTER_HI is reset to zero
004499  004883  //    QEN2_DELTA is reset to zero
004500  004884        
004501  004885        
004502  004886  func pin_PulseoutCount("pin", "freq", "count", "function"), 1;        // pulse pin at freq count times calling function when complete
004503  004887  // Syntax: pin_PulseoutCount(pin, freq, count, function);
004504  004888  // Usage : pin_PulseoutCount(PA4, 1000, 5000, 0);            // output 5000 1msec pulses on PA3
004505  004889  // Notes : only available on PA4 to PA9, maximum 3 active at any one time
004506  004890  //       : Invert the state of an output at a "freq" freuency "count" times.
004507  004891  //       : PulseoutCount is non blocking, that is, code execution may continue while
004508  004892  //       : pulses are occuring, and pulses can occur on multiple pins simultaneously.
004509  004893  //       : If not already an output, pin is automatically made a push/pull output,
004510  004894  //       : and the last state of its output latch will determine pulse polarity.
004511  004895  //       : It's its open drain state is not altered if the pin was already an output.
004512  004896  //       : If PulseoutCount is called while PulseoutCount is still active, the pulse counter
004513  004897  //       : will simply have the new "value" added to it.
004514  004898  //       : returns false if the pin number is illegal, freq is < 10, or all counters in use
004515  004899  //       : returns true if the pin number is legal (usually ignored)
004516  004900        
004517  004901  func __reserved72(), 0; // do not remove
004518  004902        
004519  004903  func pwm_Init("pin", "mode", "value"), 1;    // set pin PA4-PA9 for the required PWM mode and select its source
004520  004904  // Syntax: pwm_Init(pin, value);
004521  004905  // Usage : pwm_Init(PA4, 1, 500);                 // output 50% duty cycle on PA4
004522  004906  // Notes : only available on PA4 to PA9
004523  004907  //       : Mode PWM_OFF(0)    : Turn off the PWM (pin is left as output)
004524  004908  //       : Mode PWM_PLAIN(1)  : Plain PWM value is 0-1000, corresponding to 0-100% duty cycle.
004525  004909  //       :                    : Raw frequency ~70khz. A value of 1 is not valid
004526  004910  //       : Mode PWM_SERVO(2)  : Servo PWM value is 100-200, corresponding to 1.00 to 2.00 ms
004527  004911  //       :                    : Values of 0 to 600 are valid (0-6ms), but should be used with caution.
004528  004912  //       :                    : Repetition rate ~50hz or 20ms
004529  004913  //       : Mode PWM_BINARY(3) : Binary PWM value is 0-1024, corresponding to 0-100% duty cycle.
004530  004914  //       :                    : Raw frequency ~68khz. A value of 1 is not valid
004531  004915  //       : pwm_Init is non blocking and the pwm continues until turn off
004532  004916  //       : Returns true if the pin number is legal (usually ignored)
004533  004917        
004534  004918  //------------------------------------------------------------------------------
004535  004919  // PWM Constants
004536  004920  //------------------------------------------------------------------------------
004537  004921  #CONST
004538  004934  #END
004539  004935        
004540  004936  func OW_Reset("pin"), 1;                             // issue 1wire reset command
004541  004937  // Syntax   : OW_Reset(PA0);
004542  004938  // Usage    : OW_Reset(PA0);
004543  004939  // Notes    : Only available on PA0 to PA13
004544  004940  //          : Resets  ONEWIRE device
004545  004941  //          : Returns the status, 0 = ACK.
004546  004942  //          :
004547  004943        
004548  004944  func OW_Read("pin"), 1;                              // read data from 1wire bus
004549  004945  // Syntax   : OW_Read(PA0);
004550  004946  // Usage    : arg1 := OW_Read(PA0);
004551  004947  // Notes    : Only available on PA0 to PA13
004552  004948  //          : Reads value of the ONEWIRE pin
004553  004949  //          : that was previously selected for ONEWIRE comms.
004554  004950  //          :
004555  004951  //          : pin = 0 : the next byte from the ONEWIRE bus
004556  004952        
004557  004953  func OW_Read9("pin"), 1;                             // read data from 1wire bus, 9bit mode
004558  004954  // Syntax   : OW_Read9(PA0);
004559  004955  // Usage    : OW_Read9(PA0);
004560  004956  // Notes    : Only available on PA0 to PA13
004561  004957  //          : Reads 9 bit value of the appropriate ONEWIRE pin
004562  004958  //          : that was previously selected for ONEWIRE comms.
004563  004959  //          :
004564  004960  //          : read the 9 bits from the ONEWIRE bus
004565  004961        
004566  004962  func OW_Write("pin", "value"), 0;                      // write value to 1wire device
004567  004963  // Syntax   : OW_Write(PA0, arg);
004568  004964  // Usage    : OW_Write(PA0, arg);
004569  004965  // Notes    : Only available on PA0 to PA13
004570  004966  //          : Sends ONEWIRE data on the appropriate
004571  004967  //          : pin that was previously  selected as ONEWIRE comms.
004572  004968  //          :
004573  004969  //          : write arg to the ONEWIRE bus
004574  004970        
004575  004971  func __reserved77(), 0; // do not remove
004576  004972  func __reserved78(), 0; // do not remove
004577  004973        
004578  004974  func sys_GetDateVar("&year", "&month", "&day"), 0;              // get year, month, day into variables
004579  004975  // Syntax: sys_GetDateVar(&year, &month, &day);
004580  004976  // Usage : sys_GetDateVar(&year, &month, &day);
004581  004977  // Notes : Retrieves the date values into variables
004582  004978        
004583  004979  func sys_GetTimeVar("&hour", "&minute", "&second", "&msecs"), 0;              // get hour, minute, second, millseconds into variables
004584  004980  // Syntax: sys_GetTimeVar(&hour, &minute, &second, &msecs);
004585  004981  // Usage : sys_GetTimeVar(&hour, &minute, &second, &msecs);
004586  004982  // Notes : Retrieves the time values into variables
004587  004983        
004588  004984  func sys_PmmC(), 0;
004589  004985  // Syntax: sys_PmmC();
004590  004986  // Usage : to(mystring); sys_PmmC();   // save PmmC name and revision string to buffer
004591  004987  // Notes : print the system PmmC name and revision eg "Diablo16\n1.0"
004592  004988  //       : Can be captured to a buffer using the to( function
004593  004989  //       : Returns nothing.
004594  004990        
004595  004991  func sys_Driver(), 0;
004596  004992  // Syntax: sys_Driver();
004597  004993  // Usage : to(mystring); sys_Driver();   // save Driver name and date string to buffer
004598  004994  // Notes : print the system PmmC name and revision eg "uLCD-32WDTU-A\n130411"
004599  004995  //       : Can be captured to a buffer using the to( function
004600  004996  //       : Returns nothing.
004601  004997        
004602  004998  func gfx_Scope("left", "width", "yzero", "n", "xstep", "Yamp", "colorbg", "&old_y1", "&new_y1", "color1", "&old_y2", "&new_y2", "color2", "&old_y3", "&new_y3", "color3", "&old_y4", "&new_y4", "color4"), 0;
004603  004999  // Notes : Draws up to 4 waveforms from table(s) of vertices at the specified origin.
004604  005000  //       : "Left" is the left margin, "Width" is the width, "yzero" is the y position
004605  005001  //       : that corresponds to a y value of zero, normally "Top" + "Height" for
004606  005002  //       : a graph, or "Top" + "Height"/2 for a scope. "n" is the number of
004607  005003  //       : elements in each buffer. This will need to be greater than "width" for negative
004608  005004  //       : "xstep" values. "Yamp" is for amplification in the Y direction, 100 is unity.
004609  005005  //       : pass 0 as the address for any unused traces
004610  005006  //       : X position is incremented each point by "xstep" pixels.
004611  005007  //       : Y values are derived from a Y buffer "newy" (signed values).
004612  005008  //       : 2 buffers need to be supplied, "newy" contains new
004613  005009  //       : points to be drawn, "oldy" contains most recent set
004614  005010  //       : of points to be un-drawn. After the waveform is drawn,
004615  005011  //       : "newy" buffer is automatically copied to "oldy" buffer.
004616  005012        
004617  005013        
004618  005014  func ana_HS("rate", "samples", "&IO1", "&IO2", "&IO3", "&IO4", "COMPLETEfunction"), 0;
004619  005015  // Syntax: ana_HS(rate, samples, IO1buf, IO2buf, IO3buf, IO4buf, userFunction);
004620  005016  // Usage : ana_HS(1000, 10, IO1buf, 0, 0, 0, myFunc);
004621  005017  // Notes : Collects "samples" samples at "rate" frequency for 0 to 4 analogue pins
004622  005018  //       : and calls "COMPLETEfunction" when done.
004623  005019  //       : "rate" is samples in 100 of samples per second
004624  005020  //       : Any unused IOx pins should have their buffer addresses set to 0
004625  005021  //       : For performance reasons samples are taken in chunks of 32, thus if you
004626  005022  //       : request 33 samples there will be a delay of 31 samples before
004627  005023  //       : "COMPLETEfunction" is called
004628  005024  //       : If Touch is enabled this function should be called no more than once per
004629  005025  //       : millisecond, otherwise touch behaviour could be eratic.
004630  005026        
004631  005027        
004632  005028  func sys_ErrorMessage("msgnum"), 1;
004633  005029        
004634  005030  //==============================//
004635  005031  // NeoPixel specific functions  //
004636  005032  //==============================//
004637  005033        
004638  005034  func NP_Write("pin", "data", "size", "Options", "RepeatFirst", "Repeat", "RepeatLast"), 1;    // Write a string of colours to a NeoPixel 'display'
004639  005035  // Syntax: NP_Write(pin, data, size, Options, RepeatFirst, Repeat, RepeatLast);
004640  005036  // Usage : NP_Write(PA4, data, 50, NP_565, 10, 0, 0);                 
004641  005037  // Notes : pin         : The I/O pin for the operation PA0 to PA13
004642  005038  //       : data        : Address of data to be sent
004643  005039  //       : size        : number of colour 'sets' to follow
004644  005040  //       : Options     : format of colour data to be sent, NP_565, NP_RGB, or NP_XRGB. i.e. 2, 3 or 4 bytes per colour
004645  005041  //       : RepeatFirst : Number of times to repeat the first colour (0 means first colour is not considered 'special')
004646  005042  //       : Repeat      : Number of times to repeat the colours between first and last
004647  005043  //       : RepeatLast  : Number of times to repeat the last colour (0 means last colour is not considered 'special')
004648  005044  //       : Returns true if the pin number is legal (usually ignored)
004649  005045  //       : Due to the critical timing requirements of the NeoPixel, the system Timer is disabled during this operation.
004650  005046  //       : Comms Interrupts should also be disabled by the user, otherwise errors may occur.
004651  005047        
004652  005048  // NeoPixel related constants
004653  005049  #CONST
004654  005053  #END
004655  005054        
004656  005055  func __reserved85(), 0; // do not remove
004657  005056  func __reserved86(), 0; // do not remove
004658  005057        
004659  005058  //==============================================//
004660  005059  // spi flash device specific functions          //
004661  005060  //==============================================//
004662  005061        
004663  005062  func spiflash_SIG("spi#", "enablepin"), 1;         // read Jedec signature from SPI Flash device
004664  005063  // Syntax   : spiflash_SIG("spi#","enablepin");
004665  005064  // Usage    : var := spiflash_SIG(SPI1, PA0);
004666  005065  // Notes    : A FLASH storage device connected to the selected SPI port, and correctly initialised with the
004667  005066  //          : spi_Init(...) function, the Electronic Signature of the device can be read using this function. The only
004668  005067  //          : devices supported so far are the M25Pxx range of devices which are 512Kbit to 128Mbit Serial Flash Memory.
004669  005068  //          : Other similar devices should also work, provided they do not exceed 128Mbit.
004670  005069  //          : Release from Deep Power-down, and Read Electronic Signature. Only the low order byte is valid, the upper
004671  005070  //          : byte is ignored.
004672  005071        
004673  005072  func spiflash_ID("spi#", "enablepin"), 1;          // read ID code from FLASH device
004674  005073  // Syntax   : spiflash_ID("spi#","enablepin");
004675  005074  // Usage    : var := spiflash_ID(SPI1, PA0);
004676  005075  // Notes    : A FLASH storage device connected to the selected SPI port, and correctly initialised with the
004677  005076  //          : spi_Init(...) function, the memory type and capacity from the flash device can be read using this function
004678  005077  //          : The only devices supported so far M25Pxx range of devices which are 512Kbit to 128Mbit Serial Flash Memory.
004679  005078  //          : Other similar devices should also work, provided they do not exceed 128Mbit.
004680  005079  //          : Reads the memory type and capacity from the serial FLASH device. Hi byte contains type, and low byte
004681  005080  //          : contains capacity. Refer to the device data sheet for further information.
004682  005081        
004683  005082  func spiflash_BulkErase("spi#", "enablepin"), 0;    // erase the entire FLASH device
004684  005083  // Syntax   : spiflash_BulkErase("spi#","enablepin");
004685  005084  // Usage    : spiflash_BulkErase(SPI1, PA0);
004686  005085  // Notes    : A FLASH storage device connected to the selected SPI port, and correctly initialised with the
004687  005086  //          : spi_Init(...) function, the FLASH device can be completely erased using this function. The only devices
004688  005087  //          : supported so far are the M25Pxx range of devices which are 512Kbit to 128Mbit Serial Flash Memory.
004689  005088  //          : Other similar devices should also work, provided they do not exceed 128Mbit.
004690  005089  //          : Erases the entire flash media device. The function returns no value, and the operation can take up to 80
004691  005090  //          : seconds depending on the size of the flash device. Note that not all devices support this command.
004692  005091        
004693  005092  func spiflash_BlockErase("spi#", "enablepin", "block"), 0;            // erase the required 64k flash block
004694  005093  // Syntax   : spiflash_BlockErase("spi#", "enablepin", "block")
004695  005094  // Usage    : var := spiflash_BlockErase(SPI1, PA0, block_num)
004696  005095  // Notes    : A FLASH storage device connected to the selected SPI port, and correctly initialised with the
004697  005096  //          : spi_Init(...) function, the FLASH block can be erased using this function. The only devices supported so
004698  005097  //          : far are the M25Pxx range of devices which are 512Kbit to 128Mbit Serial Flash Memory.
004699  005098  //          : Other similar devices should also work, provided they do not exceed 128Mbit.
004700  005099  //          : E.g. there are 32 x 64K blocks on a 2Mb flash device.
004701  005100  //          : blockAddress The address of the 64k FLASH block to be erased.
004702  005101  //          : Erases the required block in a FLASH media device. The function returns no value, and the operation
004703  005102  //          : can take up to 3 milliseconds.
004704  005103        
004705  005104  func spiflash_SetAdd("spi#", "HiWord", "LoWord"), 0;           // set stream byte address
004706  005105  // Syntax: spiflash_SetAdd(AddHiWord, AddLoWord);
004707  005106  // Usage : spiflash_SetAdd(SPI1, arg1, arg2);
004708  005107  // Notes : Set FLASH internal Address pointer for bytewise access on the specified SPI port
004709  005108        
004710  005109  func spiflash_Read("*dest", "size", "spi#", "enablepin"), 1;
004711  005110  // Syntax: res := spiflash_Read("*dest", "size", "spi#", "enablepin"),
004712  005111  // Usage : res := spiflash_Read(memblock, 20, SPI1, PA0);
004713  005112  // Notes : Reads the specified number of bytes from the FLASH memory device on the specified SPI port and enable pin
004714  005113  //       : into the specified destination. The destination is a string pointer (i.e. BYTE aligned). The source
004715  005114  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004716  005115  //       : returns number of characters read
004717  005116  //       : if "dest" is zero, data is read direct to GRAM window
004718  005117  //       :
004719  005118        
004720  005119  func spiflash_Write("*source", "size", "spi#", "enablepin"), 1;
004721  005120  // Syntax: res := fwrite("*source", "size", "spi#", "enablepin"),
004722  005121  // Usage : res := fwrite(memblock, 20, SPI1, PA0);
004723  005122  // Notes : Writes the specified number of bytes to the FLASH memory device on the specified SPI port and enable pin
004724  005123  //       : from the specified source. The source is a standard address or pointer (i.e. WORD aligned). The target
004725  005124  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004726  005125  //       : returns number of bytes written
004727  005126  //       :
004728  005127        
004729  005128  func spiflash_Image("x", "y", "spi#", "enablepin"), 1;
004730  005129  // Syntax: spiflash_Image(x, y, "spi#", "enablepin");
004731  005130  // Usage : spiflash_Image(10, 10, SPI1, PA0);
004732  005131  // Notes : Display an image from a file at the current FLASH position set by spiflash_SetAdd()
004733  005132  //       : The image is displayed at x,y (with respect to top left corner).
004734  005133        
004735  005134  func spiflash_PutC("char", "spi#", "enablepin"), 0;
004736  005135  // Syntax: spiflash_PutC("char", "spi#", "enablepin");
004737  005136  // Usage : spiflash_PutC('x', SPI1, PA0);
004738  005137  // Notes : Writes a character (or byte) to the FLASH memory device on the specified SPI port and enable pin
004739  005138  //       : from the specified source. The source is a standard address or pointer (i.e. WORD aligned). The target
004740  005139  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004741  005140        
004742  005141  func spiflash_GetC("spi#", "enablepin"), 1;
004743  005142  // Syntax: spiflash_GetC("spi#", "enablepin");
004744  005143  // Usage : mychar := fgetC(SPI1, PA0);
004745  005144  // Notes : Reads a character (or byte) from the FLASH memory device on the specified SPI port and enable pin
004746  005145  //       : into the specified destination. The source is the address set by spiflash_SetAdd(), or incremented
004747  005146  //       : by subsequent reads or writes.
004748  005147  //       : returns next char from file
004749  005148        
004750  005149  func spiflash_PutW("word", "spi#", "enablepin"), 0;
004751  005150  // Syntax: spiflash_PutW("word", "spi#", "enablepin");
004752  005151  // Usage : spiflash_PutW(0x1234, SPI1, PA0);
004753  005152  // Notes : Writes a word to the FLASH memory device on the specified SPI port and enable pin
004754  005153  //       : from the specified source. The source is a standard address or pointer (i.e. WORD aligned). The target
004755  005154  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004756  005155        
004757  005156  func spiflash_GetW("spi#", "enablepin"), 1;
004758  005157  // Syntax: spiflash_GetW("spi#", "enablepin");
004759  005158  // Usage : myword := fgetW(SPI1, PA0);
004760  005159  // Notes : Reads a word from the FLASH memory device on the specified SPI port and enable pin
004761  005160  //       : into the specified destination. The source is the address set by spiflash_SetAdd(), or incremented
004762  005161  //       : by subsequent reads or writes.
004763  005162  // Notes : returns next word in file
004764  005163        
004765  005164  func spiflash_PutS("*source", "spi#", "enablepin"), 1;
004766  005165  // Syntax: res := spiflash_Puts("*source", "spi#", "enablepin"),
004767  005166  // Usage : res := spiflash_Puts(mystring, SPI1, PA0);
004768  005167  // Notes : Writes a string to the FLASH memory device on the specified SPI port and enable pin
004769  005168  //       : from the specified source. The source is a standard address or pointer (i.e. WORD aligned). The target
004770  005169  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004771  005170  //       : returns number of characters written
004772  005171  //       :
004773  005172        
004774  005173  func spiflash_GetS("*string", "size", "spi#", "enablepin"), 1;
004775  005174  // Syntax: res := spiflash_Gets("*string", "size", "spi#", "enablepin");
004776  005175  // Usage : res := spiflash_Gets(mystr , 81, SPI1, PA0); // read up to 80 chars
004777  005176  // Notes : Reads a string from the FLASH memory device on the specified SPI port and enable pin
004778  005177  //       : into the specified destination. The source is the address set by spiflash_SetAdd(), or incremented
004779  005178  //       : by subsequent reads or writes.
004780  005179  //       : returns pointer to string or null if failed.
004781  005180  //       : spiflash_GetS(...) automatically appends a null-terminator to the data read.
004782  005181  //       : NB:- only reads up to "size-1" characters into "string"
004783  005182  //       : spiflash_GetS(...) will stop reading when any of the following conditions are true:
004784  005183  //       : A] It has read n-1 bytes (one character is reserved for the null-terminator)
004785  005184  //       : B] It encounters a newline character (a line-feed in the compilers tested here), or
004786  005185  //       : C] It reaches the end of file
004787  005186  //       : D] A read error occurs.
004788  005187        
004789  005188  func spiflash_LoadFunction("spi#", "enablepin"), 1;
004790  005189  // Syntax: res := spiflash_LoadFunction("spi#", "enablepin");
004791  005190  // Usage : myfunc := spiflash_LoadFunction(SPI1, PA0);
004792  005191  // Notes : Load a function or program from the FLASH memory device on the specified SPI port and enable pin at
004793  005192  //       : the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes and
004794  005193  //       : return a function pointer to the allocation.
004795  005194  //       : The function can then be invoked just like any other
004796  005195  //       : function would be called via a function pointer.
004797  005196  //       : Parameters may be passed to it in a conventional way.
004798  005197  //       : The function may be discarded at any time when no
004799  005198  //       : longer required, thus freeing its memory resources.
004800  005199  //       : The loaded function can be discarded with mem_Free(..)
004801  005200  //       : eg:
004802  005201  //       : popupWindow := spiflash_LoadFunction("popupWindow1.4fn");
004803  005202  //       : if(!popupWindow) goto LoadFunctionFailed; // could not load the function !!!
004804  005203  //       : then elsewhere in your program:-
004805  005204  //       : res := popupWindow(MYMODE,"My Title","My Popup Text");
004806  005205  //       : if(res == QUIT_APPLICATION) goto exitApp;
004807  005206  //       : Later in your program, when popupWindow is no longer
004808  005207  //       : required for the application:-
004809  005208  //       : res := mem_Free(popupWindow);
004810  005209  //       : if(!res) goto FreeFunctionFailed; // should never happen if memory not corrupted
004811  005210  //       : The callers stack is shared by the loaded function,
004812  005211  //       : however any global variables in the loaded function
004813  005212  //       : are private to that function.
004814  005213  //
004815  005214        
004816  005215  func spiflash_Run("spi#", "enablepin", "arglistptr"), 1;
004817  005216  // Syntax: res := spiflash_Run("spi#", "enablepin", "arglistptr");
004818  005217  // Usage : res := spiflash_Run(SPI1, PA0, argptr);
004819  005218  // Notes : current program releases any allocated memory but
004820  005219  //       : retains the stack and global memory.
004821  005220  //       : If arglistptr is 0, no arguments are passed, else
004822  005221  //       : arglist points to an array, the first element being
004823  005222  //       : the number of elements in the array.
004824  005223  //       : func 'main' in the called program accepts
004825  005224  //       : the arguments, if any. The arguments can only
004826  005225  //       : be passed by value, no pointers or references can be
004827  005226  //       : used as all memory is cleared before the file
004828  005227  //       : is loaded. Refer to spiflash_Exec and spiflash_LoadFunction
004829  005228  //       : for functions that can pass by reference.
004830  005229        
004831  005230  func spiflash_Exec("spi#", "enablepin", "arglistptr"), 1;
004832  005231  // Syntax: res := spiflash_Exec("spi#", "enablepin", "arglistptr");
004833  005232  // Usage : res := spiflash_Exec(SPI1, PA0, "arglistptr");
004834  005233  // Notes : returns like a function, current program
004835  005234  //       : calling program is kept active and control returns to it.
004836  005235  //       : If arglistptr is 0, no arguments are passed, else
004837  005236  //       : arglist points to an array, the first element being
004838  005237  //       : the number of elements in the array.
004839  005238  //       : func 'main' in the called program accepts the arguments.
004840  005239  //       : This function is similar to spiflash_LoadFunction(...), however,
004841  005240  //       : the function argument list is passed by pointer, and
004842  005241  //       : the memory consumed by the function is released as
004843  005242  //       : soon as the function completes.
004844  005243        
004845  005244  func spiflash_LoadImageControl("spi#", "enablepin"), 1;
004846  005245  // Syntax: hImagelist := spiflash_LoadImageControl ("spi#", "enablepin"),
004847  005246  // Usage : hImagelist := spiflash_LoadImageControl (SPI1, PA0);
004848  005247  // Notes : Reads a control file to create an image list from the FLASH memory device on the specified SPI port
004849  005248  //       : and enable pin. The source is the address set by spiflash_SetAdd(), or incremented by subsequent reads
004850  005249  //       : or writes. The ".dat" file is first and is immediately followed a ^Z and then by the ".gci' file.
004851  005250  //       : Returns NULL if function fails.
004852  005251  //       : Returns a handle (pointer to the memory allocation) to the
004853  005252  //       : image control list that has been created.
004854  005253        
004855  005254  // Notes : This function Calculates the size of a chunk of memory required for
004856  005255  //       : a image list and populates it from the image control file ("*.dat")
004857  005256  //       : therefore, when imagelist is no longer required, you must de-allocate
004858  005257  //       : the image list memory by using eg:- mem_Free(hImagelist);
004859  005258  //       : to restore the heap.
004860  005259  //       :
004861  005260        
004862  005261  func spiflash_PlayWAV("spi#", "enablepin"), 1;
004863  005262  // Syntax: spiflash_PlayWAV("spi#", "enablepin");
004864  005263  // Usage : spiflash_PlayWAV(SPI1, PA0);
004865  005264  // Notes : Play a wave file from the FLASH memory device on the specified SPI port and enable pin.
004866  005265  //       : The source is the address set by spiflash_SetAdd(), or incremented by subsequent reads
004867  005266  //       : or writes.
004868  005267  //       : This function automatically grabs a chunk
004869  005268  //       : of memory for a file buffer, and a wave
004870  005269  //       : buffer. The minimum memory requirement is
004871  005270  //       : about 580 bytes for the disk io service and
004872  005271  //       : a minimum wave buffer size of 1024. The size
004873  005272  //       : of the wave buffer allocation
004874  005273  //       : can be increased by the snd_BufSize function.
004875  005274  //       : The default size 1024 bytes.
004876  005275  //       : NB the memory is only required during the
004877  005276  //       : duration of play, and is automatically
004878  005277  //       : released while not in use.
004879  005278  //       : See the Sound Class services for other associated controls.
004880  005279  //       : If there are no errors, returns number of blocks to play (1 to 32767)
004881  005280  //       : If errors occured, the folling is returned
004882  005281  //       : -7  : Insufficient memory available for WAV buffer and file
004883  005282  //       : -6  : cant play this rate
004884  005283  //       : -5  : no data chunk found in first rsector
004885  005284  //       : -4  : no format data
004886  005285  //       : -3  : no wave chunk signature
004887  005286  //       : -2  : bad wave file format
004888  005287  //       : -1  : file not found
004889  005288        
004890  005289  //==============================================//
004891  005290  // more com functions                           //
004892  005291  //==============================================//
004893  005292        
004894  005293  func com1_TXblock("buf", "bufsize"), 0;                       // commence a block transmission
004895  005294  // Syntax   : com1_TXblock("buf", "bufsize");
004896  005295  // Usage    : com1_TXblock(mybuf, 30);                         // point to the TX buffer and send 30 character
004897  005296  // *Notes   : Bufsize bytes are transmitted to the serial port from the string pointer "buf".
004898  005297  //          : if a transmit buffer is active and space is available this function will return almost
004899  005298  //          : immediately otherwise it will block until until the space is available, or the data is transmitted.
004900  005299        
004901  005300  func com1_RXblock("buf", "bufsize"), 0;                       // commence a block reception
004902  005301  // Syntax   : com1_RXblock("buf", "bufsize");
004903  005302  // Usage    : com1_RXblock(mybuf, 30);                        // point to the RX buffer and receive 30 character
004904  005303  // *Notes   : Bufsize bytes are received from the serial port to the string pointer "buf".
004905  005304  //          : if a receive buffer is active and bufsize characters are available this function will return almost
004906  005305  //          : immediately otherwise it will block until until the required bytes are received.
004907  005306        
004908  005307  func com2_TXblock("buf", "bufsize"), 0;                       // commence a block transmission
004909  005308  // Syntax   : com_TXblock("buf", "bufsize");
004910  005309  // Usage    : com_TXblock(mybuf, 30);                         // point to the TX buffer and send 30 character
004911  005310  // *Notes   : Bufsize bytes are transmitted to the serial port from the string pointer "buf".
004912  005311  //          : if a transmit buffer is active and space is available this function will return almost
004913  005312  //          : immediately otherwise it will block until until the space is available, or the data is transmitted.
004914  005313        
004915  005314  func com2_RXblock("buf", "bufsize"), 0;                       // commence an block reception
004916  005315  // Syntax   : com_RXblock("buf", "bufsize");
004917  005316  // Usage    : com_RXblock(mybuf, 30);                        // point to the RX buffer and receive 30 character
004918  005317  // *Notes   : Bufsize bytes are received from the serial port to the string pointer "buf".
004919  005318  //          : if a receive buffer is active and bufsize characters are available this function will return almost
004920  005319  //          : immediately otherwise it will block until until the required bytes are received.
004921  005320        
004922  005321  func com3_TXblock("buf", "bufsize"), 0;                       // commence a block transmission
004923  005322  // Syntax   : com_TXblock("buf", "bufsize");
004924  005323  // Usage    : com_TXblock(mybuf, 30);                         // point to the TX buffer and send 30 character
004925  005324  // *Notes   : Bufsize bytes are transmitted to the serial port from the string pointer "buf".
004926  005325  //          : if a transmit buffer is active and space is available this function will return almost
004927  005326  //          : immediately otherwise it will block until until the space is available, or the data is transmitted.
004928  005327        
004929  005328  func com3_RXblock("buf", "bufsize"), 0;                       // commence an block reception
004930  005329  // Syntax   : com_RXblock("buf", "bufsize");
004931  005330  // Usage    : com_RXblock(mybuf, 30);                        // point to the RX buffer and receive 30 character
004932  005331  // *Notes   : Bufsize bytes are received from the serial port to the string pointer "buf".
004933  005332  //          : if a receive buffer is active and bufsize characters are available this function will return almost
004934  005333  //          : immediately otherwise it will block until until the required bytes are received.
004935  005334        
004936  005335  func disp_BlitPixelsFromCOM1(), 0;                     // Writes current GRAM window pixels to the display from the COM port
004937  005336  // Syntax: disp_BlitPixelsFromCOM1();                  New in v1.1
004938  005337  // Usage : disp_BlitPixelsFromCOM1();
004939  005338  // Notes : Writes the number of pixels defined by the last disp_setGRAM() call to the
004940  005339  //       : display from the specified com port.
004941  005340        
004942  005341  func disp_BlitPixelsFromCOM2(), 0;                     // Writes current GRAM window pixels to the display from the COM port
004943  005342  // Syntax: disp_BlitPixelsFromCOM2();                  New in v1.1
004944  005343  // Usage : disp_BlitPixelsFromCOM2();
004945  005344  // Notes : Writes the number of pixels defined by the last disp_setGRAM() call to the
004946  005345  //       : display from the specified com port.
004947  005346        
004948  005347  func disp_BlitPixelsFromCOM3(), 0;                     // Writes current GRAM window pixels to the display from the COM port
004949  005348  // Syntax: disp_BlitPixelsFromCOM3();                  New in v1.1
004950  005349  // Usage : disp_BlitPixelsFromCOM3();
004951  005350  // Notes : Writes the number of pixels defined by the last disp_setGRAM() call to the
004952  005351  //       : display from the specified com port.
004953  005352        
004954  005353        
004955  005354  //==============================================//
004956  005355  // crc generation functions                     //
004957  005356  //==============================================//
004958  005357        
004959  005358  func crc_CSUM_8("buf","count"), 1;                      // given a pointer to a buffer and a byte count, calculate the 8bit LRC
004960  005359  // *Notes   : (if you calculate all of the incoming data
004961  005360  //          : INCLUDING the CRC, the result should be 0x00
004962  005361  //          : This is equivalent to simple addition of all bytes
004963  005362  //          : and returning the negated sum an 8 bit value.
004964  005363  //          : For the standard test string "123456789",
004965  005364  //          : crc_CSUM_8 will return 0x0023.
004966  005365        
004967  005366        
004968  005367  func crc_16("buf","count"), 1;                      // given a pointer to a buffer and a byte count, calculate CRC16
004969  005368  // *Notes   : The "mode" argument may be READ, WRITE or CHECK
004970  005369  //          : (if you calculate all of the incoming data
004971  005370  //          : INCLUDING the CRC, the result should be 0x0000
004972  005371  //          : For the standard test string "123456789",
004973  005372  //          : crc_16 will return 0xBB3D.
004974  005373        
004975  005374        
004976  005375  func crc_MODBUS("buf","count"), 1;                  // given a pointer to a buffer and a byte count, calculate CRC16 for MODBUS
004977  005376  // *Notes   : (if you calculate all of the incoming data
004978  005377  //          : INCLUDING the CRC, the result should be 0x0000
004979  005378  //          : For the standard test string "123456789",
004980  005379  //          : crc_MODBUS will return 0x4B37.
004981  005380        
004982  005381        
004983  005382  func crc_CCITT("buf","count","seed"), 1;            // given a pointer to a buffer, byte count and seed, calculate the 16bit CRC for seed
004984  005383  // *Notes   : (if you calculate all of the incoming data
004985  005384  //          : INCLUDING the CRC, the result should be 0x0000
004986  005385  //          : For the standard test string "123456789",
004987  005386  //          : crc_CCITT will return the following:-
004988  005387  //          : seed = 0 (XMODEM protocol) result = 0x31C3
004989  005388  //          : seed = 0xFFFF, result = 0x29B1
004990  005389  //          : seed = 0x1D0F, result = 0xE5CC
004991  005390        
004992  005391  func __reserved87(), 0; // do not remove
004993  005392  func __reserved88(), 0; // do not remove
004994  005393  func __reserved89(), 0; // do not remove
004995  005394        
004996  005395  //----------------------------------------------------------------------------//
004997  005396  //  functions to support buffered transmission and reception of break signal  //
004998  005397  //----------------------------------------------------------------------------//
004999  005398        
005000  005399  func com_TXbufferBrk("buf", "bufsize", "pin"), 0;    // sets the buffer location for buffered transmission
005001  005400  // Usage : com_TXbufferBrk(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
005002  005401  // Usage : com_TXbufferBrk(0, 0, 0);             // revert to non buffered service
005003  005402  // Notes : initialize a serial buffer for the COM0 output.
005004  005403  //       : The program must declare a var array as a circular buffer.
005005  005404  //       : When a TX buffer is declared for comms, the transmission
005006  005405  //       : of characters becomes non blocking. If the buffer has
005007  005406  //       : insufficient space to accept the next character from a
005008  005407  //       : serout_x() function, the excess characters will be ignored,
005009  005408  //       : and the com_Full_x() error will be asserted.   If the
005010  005409  //       : TX buffer is no longer required, just set the buffer pointer
005011  005410  //       : to zero, the size in this case doesnt matter and is ignored.
005012  005411  //       : The function can resize or reallocated to another buffer at
005013  005412  //       : any time. The buffer is flushed before any changes are made.
005014  005413  //       : "pin" designates an IO pin to control a bi-directional
005015  005414  //       : control device for half duplex mode. "pin" will go HI at the
005016  005415  //       : start of a transmission, and will return low after the final
005017  005416  //       : byte is transmitted. If not required, just set "pin" to zero.
005018  005417        
005019  005418  func com1_TXbufferBrk("buf", "bufsize", "pin"), 0;
005020  005419  // Usage : com1_TXbufferBrk(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
005021  005420  // Usage : com1_TXbufferBrk(0, 0, 0);              // revert to non buffered service
005022  005421  // Notes : initialize a serial buffer for the COM0 output.
005023  005422  //       : The program must declare a var array as a circular buffer.
005024  005423  //       : When a TX buffer is declared for comms, the transmission
005025  005424  //       : of characters becomes non blocking. If the buffer has
005026  005425  //       : insufficient space to accept the next character from a
005027  005426  //       : serout_x() function, the excess characters will be ignored,
005028  005427  //       : and the com_Full_x() error will be asserted.   If the
005029  005428  //       : TX buffer is no longer required, just set the buffer pointer
005030  005429  //       : to zero, the size in this case doesnt matter and is ignored.
005031  005430  //       : The function can resize or reallocated to another buffer at
005032  005431  //       : any time. The buffer is flushed before any changes are made.
005033  005432  //       : "pin" designates an IO pin to control a bi-directional
005034  005433  //       : control device for half duplex mode. "pin" will go HI at the
005035  005434  //       : start of a transmission, and will return low after the final
005036  005435  //       : byte is transmitted. If not required, just set "pin" to zero.
005037  005436        
005038  005437  func com2_TXbufferBrk("buf", "bufsize", "pin"), 0;
005039  005438  // Usage : com2_TXbufferBrk(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
005040  005439  // Usage : com2_TXbufferBrk(0, 0, 0);              // revert to non buffered service
005041  005440  // Notes : initialize a serial buffer for the COM0 output.
005042  005441  //       : The program must declare a var array as a circular buffer.
005043  005442  //       : When a TX buffer is declared for comms, the transmission
005044  005443  //       : of characters becomes non blocking. If the buffer has
005045  005444  //       : insufficient space to accept the next character from a
005046  005445  //       : serout_x() function, the excess characters will be ignored,
005047  005446  //       : and the com_Full_x() error will be asserted.   If the
005048  005447  //       : TX buffer is no longer required, just set the buffer pointer
005049  005448  //       : to zero, the size in this case doesnt matter and is ignored.
005050  005449  //       : The function can resize or reallocated to another buffer at
005051  005450  //       : any time. The buffer is flushed before any changes are made.
005052  005451  //       : "pin" designates an IO pin to control a bi-directional
005053  005452  //       : control device for half duplex mode. "pin" will go HI at the
005054  005453  //       : start of a transmission, and will return low after the final
005055  005454  //       : byte is transmitted. If not required, just set "pin" to zero.
005056  005455        
005057  005456  func com3_TXbufferBrk("buf", "bufsize", "pin"), 0;
005058  005457  // Usage : com3_TXbufferBrk(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
005059  005458  // Usage : com3_TXbufferBrk(0, 0, 0);              // revert to non buffered service
005060  005459  // Notes : initialize a serial buffer for the COM0 output.
005061  005460  //       : The program must declare a var array as a circular buffer.
005062  005461  //       : When a TX buffer is declared for comms, the transmission
005063  005462  //       : of characters becomes non blocking. If the buffer has
005064  005463  //       : insufficient space to accept the next character from a
005065  005464  //       : serout_x() function, the excess characters will be ignored,
005066  005465  //       : and the com_Full_x() error will be asserted.   If the
005067  005466  //       : TX buffer is no longer required, just set the buffer pointer
005068  005467  //       : to zero, the size in this case doesnt matter and is ignored.
005069  005468  //       : The function can resize or reallocated to another buffer at
005070  005469  //       : any time. The buffer is flushed before any changes are made.
005071  005470  //       : "pin" designates an IO pin to control a bi-directional
005072  005471  //       : control device for half duplex mode. "pin" will go HI at the
005073  005472  //       : start of a transmission, and will return low after the final
005074  005473  //       : byte is transmitted. If not required, just set "pin" to zero.
005075  005474        
005076  005475  func com_InitBrk("buf","bufsize","qualifier"), 0;  // set up a interrupt driven ring buffer for comms
005077  005476  // Syntax: com_InitBrk(buffer, bufsize, qualifier);
005078  005477  // Usage1: com_InitBrk(mybuf, 20, 0);
005079  005478  // Usage2: com_InitBrk(mybuf, 20, ':');
005080  005479  // Notes : initialize a serial capture buffer for the comms input
005081  005480  //       : The program must declare a var array as a circular buffer.
005082  005481  //       : Usage1 declares a circular buffer which will continually
005083  005482  //       : buffer characters.
005084  005483  //       : Usage2 must receive ':' before any characters will
005085  005484  //       : accumulate in the buffer.
005086  005485        
005087  005486  func com1_InitBrk("buf","bufsize","qualifier"), 0;
005088  005487  // Syntax: com1_InitBrk(buffer, bufsize, qualifier);
005089  005488  // Usage1: com1_InitBrk(mybuf, 20, 0);
005090  005489  // Usage2: com1_InitBrk(mybuf, 20, ':');
005091  005490  // Notes : initialize a serial capture buffer for the comms input
005092  005491  //       : The program must declare a var array as a circular buffer.
005093  005492  //       : Usage1 declares a circular buffer which will continually
005094  005493  //       : buffer characters.
005095  005494  //       : Usage2 must receive ':' before any characters will
005096  005495  //       : accumulate in the buffer.
005097  005496        
005098  005497  func com2_InitBrk("buf","bufsize","qualifier"), 0;
005099  005498  // Syntax: com2_InitBrk(buffer, bufsize, qualifier);
005100  005499  // Usage1: com2_InitBrk(mybuf, 20, 0);
005101  005500  // Usage2: com2_InitBrk(mybuf, 20, ':');
005102  005501  // Notes : initialize a serial capture buffer for the comms input
005103  005502  //       : The program must declare a var array as a circular buffer.
005104  005503  //       : Usage1 declares a circular buffer which will continually
005105  005504  //       : buffer characters.
005106  005505  //       : Usage2 must receive ':' before any characters will
005107  005506  //       : accumulate in the buffer.
005108  005507        
005109  005508  func com3_InitBrk("buf","bufsize","qualifier"), 0;
005110  005509  // Syntax: com3_InitBrk(buffer, bufsize, qualifier);
005111  005510  // Usage1: com3_InitBrk(mybuf, 20, 0);
005112  005511  // Usage2: com3_Init(mybuf, 20, ':');
005113  005512  // Notes : initialize a serial capture buffer for the comms input
005114  005513  //       : The program must declare a var array as a circular buffer.
005115  005514  //       : Usage1 declares a circular buffer which will continually
005116  005515  //       : buffer characters.
005117  005516  //       : Usage2 must receive ':' before any characters will
005118  005517  //       : accumulate in the buffer.
005119  005518        
005120  005519  //------------------------------------------------------------------//
005121  005520  //     break control constant                                       //
005122  005521  //------------------------------------------------------------------//
005123  005522  #constant BREAK      0xFFFD    // interpretation of the break signal
005124  005522  #constant BREAK      0xFFFD    // interpretation of the break signal
005125  005523        
005126  005524  //------------------------------------------------------------------//
005127  005525  // CONSTANTS
005128  005526  //------------------------------------------------------------------//
005129  005527        
005130  005528  #CONST
005131  005532  #END
005132  005533        
005133  005534  // timebase constants for timebase_init
005134  005535  // NB only TB2 and TB4 can be used for synchronous A2D sampling.
005135  005536  #CONST
005136  005547  #END
005137  005548        
005138  005549        
005139  005550  // generic constants
005140  005551  #CONST
005141  005559  #END
005142  005560        
005143  005561        
005144  005562        
005145  005563  //gfx_Get() related constants
005146  005564  #CONST
005147  005573  #END
005148  005574        
005149  005575        
005150  005576        
005151  005577        
005152  005578  #CONST
005153  005591  #END
005154  005592        
005155  005593        
005156  005594  #CONST
005157  005619  #END
005158  005620        
005159  005621        
005160  005622        
005161  005623        
005162  005624  // timer control  related constants
005163  005625  #CONST
005164  005634  #END
005165  005635        
005166  005636        
005167  005637        
005168  005638  //------------------------------------------------------------------------------
005169  005639  // system WORD variables accesible with peekW and pokeW or pointer access
005170  005640  // Note that the txt_Set variables (0-15) and gfx_set variables (16-31)
005171  005641  // can also be accessed with peekW and pokeW
005172  005642  //------------------------------------------------------------------------------
005173  005643        
005174  005644  #CONST
005175  005739  #END
005176  005740        
005177  005741  #CONST
005178  005906  #END
005179  005907        
005180  005908        
005181  005909        
005182  005910  //==================================================================================================
005183  005911        
005184  005912        
005185  005913        
005186  000013      #ENDIF
005187  000014        
005188  000015        
005189  000016  //===========================================================================================
005190  000017        
005191  000018        
005192  000002        
005193  000003        
005194  000004  // generated 20/06/2017 12:05:54
005195  000005        
005196  000006        
file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\4DGL_16bitColours.fnc

005197  000007  #inherit "4DGL_16bitColours.fnc"
005198  000007  #inherit "4DGL_16bitColours.fnc"
005199  000004  */
005200  000005        
005201  000006        
005202  000007        
005203  000008  #CONST
005204  000149  #END
005205  000150        
005206  000008        
file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\VisualConst.inc

005207  000009  #inherit "VisualConst.inc"
005208  000009  #inherit "VisualConst.inc"
005209  000001  // Line Patterns
005210  000002  #constant  LPCOARSE    0xF0F0
005211  000002  #constant  LPCOARSE    0xF0F0
005212  000003  #constant  LPMEDIUM    0x3333
005213  000003  #constant  LPMEDIUM    0x3333
005214  000004  #constant  LPFINE      0xAAAA
005215  000004  #constant  LPFINE      0xAAAA
005216  000005  #constant  LPDASHDOT   0x03CF
005217  000005  #constant  LPDASHDOT   0x03CF
005218  000006  #constant  LPDASHDOTDOT 0x0333
005219  000006  #constant  LPDASHDOTDOT 0x0333
005220  000007  #constant  LPSOLID     0x0000
005221  000007  #constant  LPSOLID     0x0000
005222  000010        
005223  000011        
file C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMAConst.inc

005224  000012  #inherit "BCN3D_SIGMAConst.inc"
005225  000012  #inherit "BCN3D_SIGMAConst.inc"
005226  000001  // File generated 20/06/2017 12:05:07
005227  000002  // Warning! This is a generated file, any manual changes will be
005228  000003  // lost during the next generation.
005229  000004        
005230  000005  #constant  Strings3Count    0
005231  000005  #constant  Strings3Count    0
005232  000006  #constant  Strings3Size     1
005233  000006  #constant  Strings3Size     1
005234  000007  #constant  Strings1Count    0
005235  000007  #constant  Strings1Count    0
005236  000008  #constant  Strings1Size     1
005237  000008  #constant  Strings1Size     1
005238  000009  #constant  Strings7Count    1
005239  000009  #constant  Strings7Count    1
005240  000010  #constant  Strings7Size     37
005241  000010  #constant  Strings7Size     37
005242  000011  #constant  Strings8Count    0
005243  000011  #constant  Strings8Count    0
005244  000012  #constant  Strings8Size     1
005245  000012  #constant  Strings8Size     1
005246  000013  #constant  Strings12Count    0
005247  000013  #constant  Strings12Count    0
005248  000014  #constant  Strings12Size     1
005249  000014  #constant  Strings12Size     1
005250  000015  #constant  Strings23Count    0
005251  000015  #constant  Strings23Count    0
005252  000016  #constant  Strings23Size     1
005253  000016  #constant  Strings23Size     1
005254  000017  #constant  Strings24Count    1
005255  000017  #constant  Strings24Count    1
005256  000018  #constant  Strings24Size     19
005257  000018  #constant  Strings24Size     19
005258  000019  #constant  Strings25Count    1
005259  000019  #constant  Strings25Count    1
005260  000020  #constant  Strings25Size     37
005261  000020  #constant  Strings25Size     37
005262  000021  #constant  Strings26Count    1
005263  000021  #constant  Strings26Count    1
005264  000022  #constant  Strings26Size     37
005265  000022  #constant  Strings26Size     37
005266  000023  #constant  Strings16Count    0
005267  000023  #constant  Strings16Count    0
005268  000024  #constant  Strings16Size     1
005269  000024  #constant  Strings16Size     1
005270  000025  #constant  Strings30Count    1
005271  000025  #constant  Strings30Count    1
005272  000026  #constant  Strings30Size     37
005273  000026  #constant  Strings30Size     37
005274  000027  #constant  Strings2Count    1
005275  000027  #constant  Strings2Count    1
005276  000028  #constant  Strings2Size     4
005277  000028  #constant  Strings2Size     4
005278  000029  #constant  Strings0Count    1
005279  000029  #constant  Strings0Count    1
005280  000030  #constant  Strings0Size     4
005281  000030  #constant  Strings0Size     4
005282  000031  #constant  Strings9Count    1
005283  000031  #constant  Strings9Count    1
005284  000032  #constant  Strings9Size     4
005285  000032  #constant  Strings9Size     4
005286  000033  #constant  Strings34Count    1
005287  000033  #constant  Strings34Count    1
005288  000034  #constant  Strings34Size     4
005289  000034  #constant  Strings34Size     4
005290  000035  #constant  Strings36Count    1
005291  000035  #constant  Strings36Count    1
005292  000036  #constant  Strings36Size     4
005293  000036  #constant  Strings36Size     4
005294  000037  #constant  Strings37Count    1
005295  000037  #constant  Strings37Count    1
005296  000038  #constant  Strings37Size     4
005297  000038  #constant  Strings37Size     4
005298  000039  #constant  Strings4Count    1
005299  000039  #constant  Strings4Count    1
005300  000040  #constant  Strings4Size     4
005301  000040  #constant  Strings4Size     4
005302  000041  #constant  Strings40Count    1
005303  000041  #constant  Strings40Count    1
005304  000042  #constant  Strings40Size     16
005305  000042  #constant  Strings40Size     16
005306  000043  #constant  Strings41Count    0
005307  000043  #constant  Strings41Count    0
005308  000044  #constant  Strings41Size     1
005309  000044  #constant  Strings41Size     1
005310  000045  #constant  Strings42Count    0
005311  000045  #constant  Strings42Count    0
005312  000046  #constant  Strings42Size     1
005313  000046  #constant  Strings42Size     1
005314  000047  #constant  Strings5Count    1
005315  000047  #constant  Strings5Count    1
005316  000048  #constant  Strings5Size     7
005317  000048  #constant  Strings5Size     7
005318  000049  #constant  Strings10Count    1
005319  000049  #constant  Strings10Count    1
005320  000050  #constant  Strings10Size     7
005321  000050  #constant  Strings10Size     7
005322  000051  #constant  Strings17Count    1
005323  000051  #constant  Strings17Count    1
005324  000052  #constant  Strings17Size     7
005325  000052  #constant  Strings17Size     7
005326  000053  #constant  Strings13Count    1
005327  000053  #constant  Strings13Count    1
005328  000054  #constant  Strings13Size     7
005329  000054  #constant  Strings13Size     7
005330  000055  #constant  Strings14Count    1
005331  000055  #constant  Strings14Count    1
005332  000056  #constant  Strings14Size     7
005333  000056  #constant  Strings14Size     7
005334  000057  #constant  Strings15Count    1
005335  000057  #constant  Strings15Count    1
005336  000058  #constant  Strings15Size     7
005337  000058  #constant  Strings15Size     7
005338  000059  #constant  Strings18Count    1
005339  000059  #constant  Strings18Count    1
005340  000060  #constant  Strings18Size     7
005341  000060  #constant  Strings18Size     7
005342  000061  #constant  Strings19Count    1
005343  000061  #constant  Strings19Count    1
005344  000062  #constant  Strings19Size     9
005345  000062  #constant  Strings19Size     9
005346  000063  #constant  Strings20Count    1
005347  000063  #constant  Strings20Count    1
005348  000064  #constant  Strings20Size     9
005349  000064  #constant  Strings20Size     9
005350  000065  #constant  Strings21Count    1
005351  000065  #constant  Strings21Count    1
005352  000066  #constant  Strings21Size     9
005353  000066  #constant  Strings21Size     9
005354  000067  #constant  Strings22Count    1
005355  000067  #constant  Strings22Count    1
005356  000068  #constant  Strings22Size     9
005357  000068  #constant  Strings22Size     9
005358  000069  #constant  Strings27Count    0
005359  000069  #constant  Strings27Count    0
005360  000070  #constant  Strings27Size     1
005361  000070  #constant  Strings27Size     1
005362  000071  #constant  Strings28Count    1
005363  000071  #constant  Strings28Count    1
005364  000072  #constant  Strings28Size     22
005365  000072  #constant  Strings28Size     22
005366  000073  #constant  Strings46Count    0
005367  000073  #constant  Strings46Count    0
005368  000074  #constant  Strings46Size     1
005369  000074  #constant  Strings46Size     1
005370  000075  #constant  Strings6Count    1
005371  000075  #constant  Strings6Count    1
005372  000076  #constant  Strings6Size     4
005373  000076  #constant  Strings6Size     4
005374  000077  #constant  Strings29Count    1
005375  000077  #constant  Strings29Count    1
005376  000078  #constant  Strings29Size     4
005377  000078  #constant  Strings29Size     4
005378  000079  #constant  Strings31Count    1
005379  000079  #constant  Strings31Count    1
005380  000080  #constant  Strings31Size     4
005381  000080  #constant  Strings31Size     4
005382  000081  #constant  Strings32Count    1
005383  000081  #constant  Strings32Count    1
005384  000082  #constant  Strings32Size     4
005385  000082  #constant  Strings32Size     4
005386  000083  #constant  Strings33Count    1
005387  000083  #constant  Strings33Count    1
005388  000084  #constant  Strings33Size     4
005389  000084  #constant  Strings33Size     4
005390  000085  #constant  Strings35Count    1
005391  000085  #constant  Strings35Count    1
005392  000086  #constant  Strings35Size     4
005393  000086  #constant  Strings35Size     4
005394  000087  #constant  Strings38Count    1
005395  000087  #constant  Strings38Count    1
005396  000088  #constant  Strings38Size     4
005397  000088  #constant  Strings38Size     4
005398  000089  #constant  Strings47Count    0
005399  000089  #constant  Strings47Count    0
005400  000090  #constant  Strings47Size     1
005401  000090  #constant  Strings47Size     1
005402  000091  #constant  Strings43Count    0
005403  000091  #constant  Strings43Count    0
005404  000092  #constant  Strings43Size     1
005405  000092  #constant  Strings43Size     1
005406  000093  #constant  Strings11Count    1
005407  000093  #constant  Strings11Count    1
005408  000094  #constant  Strings11Size     7
005409  000094  #constant  Strings11Size     7
005410  000095  #constant  Strings45Count    0
005411  000095  #constant  Strings45Count    0
005412  000096  #constant  Strings45Size     1
005413  000096  #constant  Strings45Size     1
005414  000097  #constant  Strings39Count    0
005415  000097  #constant  Strings39Count    0
005416  000098  #constant  Strings39Size     1
005417  000098  #constant  Strings39Size     1
005418  000099  #constant  Strings44Count    0
005419  000099  #constant  Strings44Count    0
005420  000100  #constant  Strings44Size     1
005421  000100  #constant  Strings44Size     1
005422  000101  #constant  Strings49Count    1
005423  000101  #constant  Strings49Count    1
005424  000102  #constant  Strings49Size     12
005425  000102  #constant  Strings49Size     12
005426  000103  #constant  Strings52Count    0
005427  000103  #constant  Strings52Count    0
005428  000104  #constant  Strings52Size     1
005429  000104  #constant  Strings52Size     1
005430  000105  #constant  Strings50Count    0
005431  000105  #constant  Strings50Count    0
005432  000106  #constant  Strings50Size     1
005433  000106  #constant  Strings50Size     1
005434  000107  #constant  Strings51Count    0
005435  000107  #constant  Strings51Count    0
005436  000108  #constant  Strings51Size     1
005437  000108  #constant  Strings51Size     1
005438  000109  // object indexes into ImageControl
005439  000110  #CONST
005440  000431  #END
005441  000432        
005442  000433  #constant  Strings48Size     0
005443  000433  #constant  Strings48Size     0
005444  000434  #constant  Strings48StartH   0
005445  000434  #constant  Strings48StartH   0
005446  000435  #constant  Strings48StartL   0
005447  000435  #constant  Strings48StartL   0
005448  000436  #constant  Strings3StartH   0x0
005449  000436  #constant  Strings3StartH   0x0
005450  000437  #constant  Strings3StartL   0x0
005451  000437  #constant  Strings3StartL   0x0
005452  000438  #constant  Strings1StartH   0x0
005453  000438  #constant  Strings1StartH   0x0
005454  000439  #constant  Strings1StartL   0x200
005455  000439  #constant  Strings1StartL   0x200
005456  000440  #constant  Strings7StartH   0x0
005457  000440  #constant  Strings7StartH   0x0
005458  000441  #constant  Strings7StartL   0x400
005459  000441  #constant  Strings7StartL   0x400
005460  000442  #constant  Strings8StartH   0x0
005461  000442  #constant  Strings8StartH   0x0
005462  000443  #constant  Strings8StartL   0x600
005463  000443  #constant  Strings8StartL   0x600
005464  000444  #constant  Strings12StartH   0x0
005465  000444  #constant  Strings12StartH   0x0
005466  000445  #constant  Strings12StartL   0x800
005467  000445  #constant  Strings12StartL   0x800
005468  000446  #constant  Strings23StartH   0x0
005469  000446  #constant  Strings23StartH   0x0
005470  000447  #constant  Strings23StartL   0xA00
005471  000447  #constant  Strings23StartL   0xA00
005472  000448  #constant  Strings24StartH   0x0
005473  000448  #constant  Strings24StartH   0x0
005474  000449  #constant  Strings24StartL   0xC00
005475  000449  #constant  Strings24StartL   0xC00
005476  000450  #constant  Strings25StartH   0x0
005477  000450  #constant  Strings25StartH   0x0
005478  000451  #constant  Strings25StartL   0xE00
005479  000451  #constant  Strings25StartL   0xE00
005480  000452  #constant  Strings26StartH   0x0
005481  000452  #constant  Strings26StartH   0x0
005482  000453  #constant  Strings26StartL   0x1000
005483  000453  #constant  Strings26StartL   0x1000
005484  000454  #constant  Strings16StartH   0x0
005485  000454  #constant  Strings16StartH   0x0
005486  000455  #constant  Strings16StartL   0x1200
005487  000455  #constant  Strings16StartL   0x1200
005488  000456  #constant  Strings30StartH   0x0
005489  000456  #constant  Strings30StartH   0x0
005490  000457  #constant  Strings30StartL   0x1400
005491  000457  #constant  Strings30StartL   0x1400
005492  000458  #constant  Strings2StartH   0x0
005493  000458  #constant  Strings2StartH   0x0
005494  000459  #constant  Strings2StartL   0x1600
005495  000459  #constant  Strings2StartL   0x1600
005496  000460  #constant  Strings0StartH   0x0
005497  000460  #constant  Strings0StartH   0x0
005498  000461  #constant  Strings0StartL   0x1800
005499  000461  #constant  Strings0StartL   0x1800
005500  000462  #constant  Strings9StartH   0x0
005501  000462  #constant  Strings9StartH   0x0
005502  000463  #constant  Strings9StartL   0x1A00
005503  000463  #constant  Strings9StartL   0x1A00
005504  000464  #constant  Strings34StartH   0x0
005505  000464  #constant  Strings34StartH   0x0
005506  000465  #constant  Strings34StartL   0x1C00
005507  000465  #constant  Strings34StartL   0x1C00
005508  000466  #constant  Strings36StartH   0x0
005509  000466  #constant  Strings36StartH   0x0
005510  000467  #constant  Strings36StartL   0x1E00
005511  000467  #constant  Strings36StartL   0x1E00
005512  000468  #constant  Strings37StartH   0x0
005513  000468  #constant  Strings37StartH   0x0
005514  000469  #constant  Strings37StartL   0x2000
005515  000469  #constant  Strings37StartL   0x2000
005516  000470  #constant  Strings4StartH   0x0
005517  000470  #constant  Strings4StartH   0x0
005518  000471  #constant  Strings4StartL   0x2200
005519  000471  #constant  Strings4StartL   0x2200
005520  000472  #constant  Strings40StartH   0x0
005521  000472  #constant  Strings40StartH   0x0
005522  000473  #constant  Strings40StartL   0x2400
005523  000473  #constant  Strings40StartL   0x2400
005524  000474  #constant  Strings41StartH   0x0
005525  000474  #constant  Strings41StartH   0x0
005526  000475  #constant  Strings41StartL   0x2600
005527  000475  #constant  Strings41StartL   0x2600
005528  000476  #constant  Strings42StartH   0x0
005529  000476  #constant  Strings42StartH   0x0
005530  000477  #constant  Strings42StartL   0x2800
005531  000477  #constant  Strings42StartL   0x2800
005532  000478  #constant  Strings5StartH   0x0
005533  000478  #constant  Strings5StartH   0x0
005534  000479  #constant  Strings5StartL   0x2A00
005535  000479  #constant  Strings5StartL   0x2A00
005536  000480  #constant  Strings10StartH   0x0
005537  000480  #constant  Strings10StartH   0x0
005538  000481  #constant  Strings10StartL   0x2C00
005539  000481  #constant  Strings10StartL   0x2C00
005540  000482  #constant  Strings17StartH   0x0
005541  000482  #constant  Strings17StartH   0x0
005542  000483  #constant  Strings17StartL   0x2E00
005543  000483  #constant  Strings17StartL   0x2E00
005544  000484  #constant  Strings13StartH   0x0
005545  000484  #constant  Strings13StartH   0x0
005546  000485  #constant  Strings13StartL   0x3000
005547  000485  #constant  Strings13StartL   0x3000
005548  000486  #constant  Strings14StartH   0x0
005549  000486  #constant  Strings14StartH   0x0
005550  000487  #constant  Strings14StartL   0x3200
005551  000487  #constant  Strings14StartL   0x3200
005552  000488  #constant  Strings15StartH   0x0
005553  000488  #constant  Strings15StartH   0x0
005554  000489  #constant  Strings15StartL   0x3400
005555  000489  #constant  Strings15StartL   0x3400
005556  000490  #constant  Strings18StartH   0x0
005557  000490  #constant  Strings18StartH   0x0
005558  000491  #constant  Strings18StartL   0x3600
005559  000491  #constant  Strings18StartL   0x3600
005560  000492  #constant  Strings19StartH   0x0
005561  000492  #constant  Strings19StartH   0x0
005562  000493  #constant  Strings19StartL   0x3800
005563  000493  #constant  Strings19StartL   0x3800
005564  000494  #constant  Strings20StartH   0x0
005565  000494  #constant  Strings20StartH   0x0
005566  000495  #constant  Strings20StartL   0x3A00
005567  000495  #constant  Strings20StartL   0x3A00
005568  000496  #constant  Strings21StartH   0x0
005569  000496  #constant  Strings21StartH   0x0
005570  000497  #constant  Strings21StartL   0x3C00
005571  000497  #constant  Strings21StartL   0x3C00
005572  000498  #constant  Strings22StartH   0x0
005573  000498  #constant  Strings22StartH   0x0
005574  000499  #constant  Strings22StartL   0x3E00
005575  000499  #constant  Strings22StartL   0x3E00
005576  000500  #constant  Strings27StartH   0x0
005577  000500  #constant  Strings27StartH   0x0
005578  000501  #constant  Strings27StartL   0x4000
005579  000501  #constant  Strings27StartL   0x4000
005580  000502  #constant  Strings28StartH   0x0
005581  000502  #constant  Strings28StartH   0x0
005582  000503  #constant  Strings28StartL   0x4200
005583  000503  #constant  Strings28StartL   0x4200
005584  000504  #constant  Strings46StartH   0x0
005585  000504  #constant  Strings46StartH   0x0
005586  000505  #constant  Strings46StartL   0x4400
005587  000505  #constant  Strings46StartL   0x4400
005588  000506  #constant  Strings6StartH   0x0
005589  000506  #constant  Strings6StartH   0x0
005590  000507  #constant  Strings6StartL   0x4600
005591  000507  #constant  Strings6StartL   0x4600
005592  000508  #constant  Strings29StartH   0x0
005593  000508  #constant  Strings29StartH   0x0
005594  000509  #constant  Strings29StartL   0x4800
005595  000509  #constant  Strings29StartL   0x4800
005596  000510  #constant  Strings31StartH   0x0
005597  000510  #constant  Strings31StartH   0x0
005598  000511  #constant  Strings31StartL   0x4A00
005599  000511  #constant  Strings31StartL   0x4A00
005600  000512  #constant  Strings32StartH   0x0
005601  000512  #constant  Strings32StartH   0x0
005602  000513  #constant  Strings32StartL   0x4C00
005603  000513  #constant  Strings32StartL   0x4C00
005604  000514  #constant  Strings33StartH   0x0
005605  000514  #constant  Strings33StartH   0x0
005606  000515  #constant  Strings33StartL   0x4E00
005607  000515  #constant  Strings33StartL   0x4E00
005608  000516  #constant  Strings35StartH   0x0
005609  000516  #constant  Strings35StartH   0x0
005610  000517  #constant  Strings35StartL   0x5000
005611  000517  #constant  Strings35StartL   0x5000
005612  000518  #constant  Strings38StartH   0x0
005613  000518  #constant  Strings38StartH   0x0
005614  000519  #constant  Strings38StartL   0x5200
005615  000519  #constant  Strings38StartL   0x5200
005616  000520  #constant  Strings47StartH   0x0
005617  000520  #constant  Strings47StartH   0x0
005618  000521  #constant  Strings47StartL   0x5400
005619  000521  #constant  Strings47StartL   0x5400
005620  000522  #constant  Strings43StartH   0x0
005621  000522  #constant  Strings43StartH   0x0
005622  000523  #constant  Strings43StartL   0x5600
005623  000523  #constant  Strings43StartL   0x5600
005624  000524  #constant  Strings11StartH   0x0
005625  000524  #constant  Strings11StartH   0x0
005626  000525  #constant  Strings11StartL   0x5800
005627  000525  #constant  Strings11StartL   0x5800
005628  000526  #constant  Strings45StartH   0x0
005629  000526  #constant  Strings45StartH   0x0
005630  000527  #constant  Strings45StartL   0x5A00
005631  000527  #constant  Strings45StartL   0x5A00
005632  000528  #constant  Strings39StartH   0x0
005633  000528  #constant  Strings39StartH   0x0
005634  000529  #constant  Strings39StartL   0x5C00
005635  000529  #constant  Strings39StartL   0x5C00
005636  000530  #constant  Strings44StartH   0x0
005637  000530  #constant  Strings44StartH   0x0
005638  000531  #constant  Strings44StartL   0x5E00
005639  000531  #constant  Strings44StartL   0x5E00
005640  000532  #constant  Strings49StartH   0x0
005641  000532  #constant  Strings49StartH   0x0
005642  000533  #constant  Strings49StartL   0x6000
005643  000533  #constant  Strings49StartL   0x6000
005644  000534  #constant  Strings52StartH   0x0
005645  000534  #constant  Strings52StartH   0x0
005646  000535  #constant  Strings52StartL   0x6200
005647  000535  #constant  Strings52StartL   0x6200
005648  000536  #constant  Strings50StartH   0x0
005649  000536  #constant  Strings50StartH   0x0
005650  000537  #constant  Strings50StartL   0x6400
005651  000537  #constant  Strings50StartL   0x6400
005652  000538  #constant  Strings51StartH   0x0
005653  000538  #constant  Strings51StartH   0x0
005654  000539  #constant  Strings51StartL   0x6600
005655  000539  #constant  Strings51StartL   0x6600
005656  000540  #IFNOT EXISTS NOGLOBALS
005657  000541  var hndl ;
005658  000542  #ENDIF
005659  000013        
file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\CLPrintStrings.inc

005660  000014  #inherit "CLPrintStrings.inc"
005661  000014  #inherit "CLPrintStrings.inc"
005662  000001  func PrintStrings(var ID, var *msgid, var String)
005663  000002      var StringID, i, ch, offs32[2], res32[2];
005664  000003      StringID := oStringss[1+ID] ;
005665  000004      if (String)
005666  000005          stringsCV[ID] := -1 ;
005667  000006      else
005668  000007          stringsCV[ID] := msgid ;
005669  000008      endif
005670  000009      if ((StringID == -1) || (*(StringID + Ofs_String_Form) != CurrentForm)) return ;
005671  000010      txt_FontID(hFonts[ID]) ;
005672  000011      txt_Attributes(*(StringID + Ofs_String_FontAttribs)) ; // >> 4 fix for r25,6,7,8 PmmC
005673  000012  //    txt_Opacity(*(StringID + STTransparent)) ;
005674  000013        
005675  000014      if (*(StringID + Ofs_String_Transparent))
005676  000015          gfx_RectangleFilled(*(StringID + Ofs_String_x1), *(StringID + Ofs_String_y1), *(StringID + Ofs_String_x2), *(StringID + Ofs_String_y2), *(StringID + Ofs_String_BGColor));
005677  000016      else if (FormBGcolors[CurrentForm] != ColorBGimage)
005678  000017          gfx_RectangleFilled(*(StringID + Ofs_String_x1), *(StringID + Ofs_String_y1), *(StringID + Ofs_String_x2), *(StringID + Ofs_String_y2), FormBGcolors[CurrentForm]);
005679  000018      else
005680  000019          gfx_ClipWindow(*(StringID + Ofs_String_x1), *(StringID + Ofs_String_y1), *(StringID + Ofs_String_x2), *(StringID + Ofs_String_y2)) ;
005681  000020          gfx_Clipping(ON) ;
005682  000021          img_Show(hndl,FormStartIndex[CurrentForm]) ;
005683  000022          gfx_Clipping(OFF) ;
005684  000023        
005685  000024      endif
005686  000025        
005687  000026      txt_FGcolour(*(StringID + Ofs_String_FGColor)) ;
005688  000027      txt_BGcolour(*(StringID + Ofs_String_BGColor)) ;
005689  000028      txt_Opacity(TRANSPARENT);                // 8  text OPAQUE or TRANSPARENT
005690  000029        
005691  000030      gfx_MoveTo(*(StringID + Ofs_String_x1) , *(StringID + Ofs_String_y1)) ;
005692  000031        
005693  000032      if (String)
005694  000033          i := 0 ;
005695  000034          ch := msgid[i++] ;
005696  000035          while (ch != 0)
005697  000036              putch(ch) ;
005698  000037              ch := msgid[i++] ;
005699  000038          wend
005700  000039      else
005701  000040          umul_1616(offs32, *(StringID + Ofs_String_Size), msgid);
005702  000041          res32[1] := *(StringID + Ofs_String_StartH) ;
005703  000042          res32[0] := *(StringID + Ofs_String_StartL) ;
005704  000043          uadd_3232(res32,res32,offs32) ;
005705  000044          file_Seek(hstrings, res32[1], res32[0]);
005706  000045          repeat
005707  000046              if (*(StringID + Ofs_String_Ansi))
005708  000047                  ch := file_GetC(hstrings) ;
005709  000048              else
005710  000049                  ch := file_GetW(hstrings) ;
005711  000050              endif
005712  000051              putch(ch) ;
005713  000052          until (ch == 0) ;
005714  000053      endif
005715  000054        
005716  000055  endfunc
005717  000056        
005718  000015        
005719  000016  #constant IPDatasize 22
005720  000016  #constant IPDatasize 22
005721  000017        
005722  000018  #CONST
005723  000022  #END
005724  000023        
005725  000024  #CONST
005726  000131  #END
005727  000132        
005728  000672  #END
5729  3304
5730  3305
5731  3306
5732  3307
5733  3308
5734  3309
5735  330A
5736  330B
5737  330C
5738  330D
5739  330E
5740  330F
5741  3310
5742  3311
5743  3312
5744  3313
5745  3314
5746  3315
5747  3316
5748  3317
5749  3318
5750  3319
5751  331A
5752  331B
5753  331C
5754  331D
5755  331E
5756  331F
5757  3320
5758  3321
5759  3322
5760  3323
5761  3324
5762  3325
5763  3326
5764  3327
5765  3328
5766  3329
5767  332A
5768  332B
5769  332C
5770  332D
5771  332E
5772  332F
5773  3330
5774  3331
5775  3332
5776  3333
5777  3334
5778  3335
5779  3336
5780  3337
5781  3338
5782  3339
5783  333A
5784  333B
5785  333C
5786  333D
5787  333E
5788  333F
5789  3340
5790  3341
5791  3342
5792  3343
5793  3344
5794  3345
5795  3346
5796  3347
5797  3348
5798  3349
5799  334A
5800  334B
5801  334C
5802  334D
5803  334E
5804  334F
5805  3350
5806  3351
5807  3352
5808  3353
5809  3354
5810  3355
5811  3356
5812  3357
5813  3358
5814  3359
5815  335A
5816  335B
5817  335C
5818  335D
5819  335E
5820  335F
5821  3360
5822  3361
5823  3362
5824  3363
5825  3364
5826  3365
5827  3366
5828  3367
5829  3368
5830  3369
5831  336A
5832  336B
5833  336C
5834  336D
5835  336E
5836  336F
5837  3370
5838  3371
5839  3372
5840  3373
5841  3374
5842  3375
5843  3376
5844  3377
5845  3378
5846  3379
5847  337A
5848  337B
5849  337C
5850  337D
5851  337E
5852  337F
5853  3380
5854  3381
5855  3382
5856  3383
5857  3384
5858  3385
5859  3386
5860  3387
5861  3388
5862  3389
5863  338A
5864  338B
5865  338C
5866  338D
5867  338E
5868  338F
5869  3390
5870  3391
5871  3392
5872  3393
5873  3394
5874  3395
5875  3396
5876  3397
5877  3398
5878  3399
5879  339A
5880  339B
5881  339C
5882  339D
5883  339E
5884  339F
5885  33A0
5886  33A1
5887  33A2
5888  33A3
5889  33A4
5890  33A5
5891  33A6
5892  33A7
5893  33A8
5894  33A9
5895  33AA
5896  33AB
5897  33AC
5898  33AD
5899  33AE
5900  33AF
5901  33B0
5902  33B1
5903  33B2
5904  33B3
5905  33B4
5906  33B5
5907  33B6
5908  33B7
5909  33B8
5910  33B9
5911  33BA
5912  33BB
5913  33BC
5914  33BD
5915  33BE
5916  33BF
5917  33C0
5918  33C1
5919  33C2
5920  33C3
5921  33C4
5922  33C5
5923  33C6
5924  33C7
5925  33C8
5926  33C9
5927  33CA
5928  33CB
5929  33CC
5930  33CD
5931  33CE
5932  33CF
5933  33D0
5934  33D1
5935  33D2
5936  33D3
5937  33D4
5938  33D5
5939  33D6
5940  33D7
5941  33D8
5942  33D9
5943  33DA
5944  33DB
5945  33DC
5946  33DD
5947  33DE
5948  33DF
5949  33E0
5950  33E1
5951  33E2
5952  33E3
5953  33E4
5954  33E5
5955  33E6
5956  33E7
5957  33E8
5958  33E9
5959  33EA
5960  33EB
5961  33EC
5962  33ED
5963  33EE
5964  33EF
5965  33F0
5966  33F1
5967  33F2
5968  33F3
5969  33F4
5970  33F5
5971  33F6
5972  33F7
5973  33F8
5974  33F9
5975  33FA
5976  33FB
5977  33FC
5978  33FD
5979  33FE
5980  33FF
5981  3400
5982  3401
5983  3402
5984  3403
5985  3404
5986  3405
5987  3406
5988  3407
5989  3408
5990  3409
5991  340A
5992  340B
5993  340C
5994  340D
5995  340E
5996  340F
5997  3410
5998  3411
5999  3412
6000  3413
6001  3414
6002  3415
6003  3416
6004  3417
6005  3418
6006  3419
6007  341A
6008  341B
6009  341C
6010  341D
6011  341E
6012  341F
6013  3420
6014  3421
6015  3422
6016  3423
6017  3424
6018  3425
6019  3426
6020  3427
6021  3428
6022  3429
6023  342A
6024  342B
6025  342C
6026  342D
6027  342E
6028  342F
6029  3430
6030  3431
6031  3432
6032  3433
6033  3434
6034  3435
6035  3436
6036  3437
6037  3438
6038  3439
6039  343A
6040  343B
6041  343C
6042  343D
6043  343E
6044  343F
6045  3440
6046  3441
6047  3442
6048  3443
6049  3444
6050  3445
6051  3446
6052  3447
6053  3448
6054  3449
6055  344A
6056  344B
6057  344C
6058  344D
6059  344E
6060  344F
6061  3450
6062  3451
6063  3452
6064  3453
6065  3454
6066  3455
6067  3456
6068  3457
6069  3458
6070  3459
6071  345A
6072  345B
6073  345C
6074  345D
6075  345E
6076  345F
6077  3460
6078  3461
6079  3462
6080  3463
6081  3464
6082  3465
6083  3466
6084  3467
6085  3468
6086  3469
6087  346A
6088  346B
6089  346C
6090  346D
6091  346E
6092  346F
6093  3470
6094  3471
6095  3472
6096  3473
6097  3474
6098  3475
6099  3476
6100  3477
6101  3478
6102  3479
6103  347A
6104  347B
6105  347C
6106  347D
6107  347E
6108  347F
6109  3480
6110  3481
6111  3482
6112  3483
6113  3484
6114  3485
6115  3486
6116  3487
6117  3488
6118  3489
6119  348A
6120  348B
6121  348C
6122  348D
6123  348E
6124  348F
6125  3490
6126  3491
6127  3492
6128  3493
6129  3494
6130  3495
6131  3496
6132  3497
6133  3498
6134  3499
6135  349A
6136  349B
6137  349C
6138  349D
6139  349E
6140  349F
6141  34A0
6142  34A1
6143  34A2
6144  34A3
6145  34A4
6146  34A5
6147  34A6
6148  34A7
6149  34A8
6150  34A9
6151  34AA
6152  34AB
6153  34AC
6154  34AD
6155  34AE
6156  34AF
6157  34B0
6158  34B1
6159  34B2
6160  34B3
6161  34B4
6162  34B5
6163  34B6
6164  34B7
6165  34B8
6166  34B9
6167  34BA
6168  34BB
6169  34BC
6170  34BD
6171  34BE
6172  34BF
6173  34C0
6174  34C1
6175  34C2
6176  34C3
6177  34C4
6178  34C5
6179  34C6
6180  34C7
6181  34C8
6182  34C9
6183  34CA
6184  34CB
6185  34CC
6186  34CD
6187  34CE
6188  34CF
6189  34D0
6190  34D1
6191  34D2
6192  34D3
6193  34D4
6194  34D5
6195  34D6
6196  34D7
6197  34D8
6198  34D9
6199  34DA
6200  34DB
6201  34DC
6202  34DD
6203  34DE
6204  34DF
6205  34E0
6206  34E1
6207  34E2
6208  34E3
6209  34E4
6210  34E5
6211  34E6
6212  34E7
6213  34E8
6214  34E9
6215  34EA
6216  34EB
6217  34EC
6218  34ED
6219  34EE
6220  34EF
6221  34F0
6222  34F1
6223  34F2
6224  34F3
6225  34F4
6226  34F5
6227  34F6
6228  34F7
6229  34F8
6230  34F9
6231  34FA
6232  34FB
6233  34FC
6234  34FD
6235  34FE
6236  34FF
6237  3500
6238  3501
6239  3502
6240  3503
6241  3504
6242  3505
6243  3506
6244  3507
6245  3508
6246  3509
6247  350A
6248  350B
6249  350C
6250  350D
6251  350E
6252  350F
6253  3510
6254  3511
6255  3512
6256  3513
6257  3514
6258  3515
6259  3516
6260  3517
6261  3518
6262  3519
6263  351A
6264  351B
6265  351C
6266  351D
6267  351E
6268  351F
6269  3520
6270  3521
6271  3522
6272  3523
6273  3524
6274  3525
6275  3526
6276  3527
6277  3528
6278  3529
6279  352A
6280  352B
6281  352C
6282  352D
6283  352E
6284  352F
6285  3530
6286  3531
6287  3532
6288  3533
6289  3534
6290  3535
6291  3536
6292  3537
6293  3538
6294  3539
6295  353A
6296  353B
6297  353C
6298  353D
6299  353E
6300  353F
6301  3540
6302  3541
6303  3542
6304  3543
6305  3544
6306  3545
6307  3546
6308  3547
6309  3548
6310  3549
6311  354A
6312  354B
6313  354C
6314  354D
6315  354E
6316  354F
6317  3550
6318  3551
6319  3552
6320  3553
6321  3554
6322  3555
6323  3556
6324  3557
6325  3558
6326  3559
6327  355A
6328  355B
6329  355C
6330  355D
6331  355E
6332  355F
6333  3560
6334  3561
6335  3562
6336  3563
6337  3564
6338  3565
6339  3566
6340  3567
6341  3568
6342  3569
6343  356A
6344  356B
6345  356C
6346  356D
6347  356E
6348  356F
6349  3570
6350  3571
6351  3572
6352  3573
6353  3574
6354  3575
6355  3576
6356  3577
6357  3578
6358  3579
6359  357A
6360  357B
6361  357C
6362  357D
6363  357E
6364  357F
6365  3580
6366  3581
6367  3582
6368  3583
6369  3584
6370  3585
6371  3586
6372  3587
6373  3588
6374  3589
6375  358A
6376  358B
6377  358C
6378  358D
6379  358E
6380  358F
6381  3590
6382  3591
6383  3592
6384  3593
6385  3594
6386  3595
6387  3596
6388  3597
6389  3598
6390  3599
6391  359A
6392  359B
6393  359C
6394  359D
6395  359E
6396  359F
6397  35A0
6398  35A1
6399  35A2
6400  35A3
6401  35A4
6402  35A5
6403  35A6
6404  35A7
6405  35A8
6406  35A9
6407  35AA
6408  35AB
6409  35AC
6410  35AD
6411  35AE
6412  35AF
6413  35B0
6414  35B1
6415  35B2
6416  35B3
6417  35B4
6418  35B5
6419  35B6
6420  35B7
6421  35B8
6422  35B9
6423  35BA
6424  35BB
6425  35BC
6426  35BD
6427  35BE
6428  35BF
6429  35C0
6430  35C1
6431  35C2
6432  35C3
6433  35C4
6434  35C5
6435  35C6
6436  35C7
6437  35C8
6438  35C9
6439  35CA
6440  35CB
6441  35CC
6442  35CD
6443  35CE
6444  35CF
6445  35D0
6446  35D1
6447  35D2
6448  35D3
6449  35D4
6450  35D5
6451  35D6
6452  35D7
6453  35D8
6454  35D9
6455  35DA
6456  35DB
6457  35DC
6458  35DD
6459  35DE
6460  35DF
6461  35E0
6462  35E1
6463  35E2
6464  35E3
6465  35E4
6466  35E5
6467  35E6
6468  35E7
6469  35E8
6470  35E9
6471  35EA
6472  35EB
6473  35EC
6474  35ED
6475  35EE
6476  35EF
6477  35F0
6478  35F1
6479  35F2
6480  35F3
6481  35F4
6482  35F5
6483  35F6
6484  35F7
6485  35F8
6486  35F9
6487  35FA
6488  35FB
6489  35FC
6490  35FD
6491  35FE
6492  35FF
6493  3600
6494  3601
6495  3602
6496  3603
6497  3604
6498  3605
6499  3606
6500  3607
6501  3608
6502  3609
6503  360A
6504  360B
6505  360C
6506  360D
6507  360E
6508  360F
6509  3610
6510  3611
6511  3612
6512  3613
6513  3614
6514  3615
6515  3616
6516  3617
6517  3618
6518  3619
6519  361A
6520  361B
6521  361C
6522  361D
6523  361E
6524  361F
6525  3620
6526  3621
6527  3622
6528  3623
6529  3624
6530  3625
6531  3626
6532  3627
6533  3628
6534  3629
6535  362A
6536  362B
6537  362C
6538  362D
6539  362E
6540  362F
6541  3630
6542  3631
6543  3632
6544  3633
6545  3634
6546  3635
6547  3636
6548  3637
6549  3638
6550  3639
6551  363A
6552  363B
6553  363C
6554  363D
6555  363E
6556  363F
6557  3640
6558  3641
6559  3642
6560  3643
6561  3644
6562  3645
6563  3646
6564  3647
6565  3648
6566  3649
6567  364A
6568  364B
6569  364C
6570  364D
6571  364E
6572  364F
6573  3650
6574  3651
6575  3652
6576  3653
6577  3654
6578  3655
6579  3656
6580  3657
6581  3658
6582  3659
6583  365A
6584  365B
6585  365C
6586  365D
6587  365E
6588  365F
6589  3660
6590  3661
6591  3662
6592  3663
6593  3664
6594  3665
6595  3666
6596  3667
6597  3668
6598  3669
6599  366A
6600  366B
6601  366C
6602  366D
6603  366E
6604  366F
6605  3670
6606  3671
6607  3672
6608  3673
6609  3674
6610  3675
6611  3676
6612  3677
6613  3678
6614  3679
6615  367A
6616  367B
6617  367C
6618  367D
6619  367E
6620  367F
6621  3680
6622  3681
6623  3682
6624  3683
6625  3684
6626  3685
6627  3686
6628  3687
6629  3688
6630  3689
6631  368A
6632  368B
6633  368C
6634  368D
6635  368E
6636  368F
6637  3690
6638  3691
6639  3692
6640  3693
6641  3694
6642  3695
6643  3696
6644  3697
6645  3698
6646  3699
6647  369A
6648  369B
6649  369C
6650  369D
6651  369E
6652  369F
6653  36A0
6654  36A1
6655  36A2
6656  36A3
6657  36A4
6658  36A5
6659  36A6
6660  36A7
6661  36A8
6662  36A9
6663  36AA
6664  36AB
6665  36AC
6666  36AD
6667  36AE
6668  36AF
6669  36B0
6670  36B1
6671  36B2
6672  36B3
6673  36B4
6674  36B5
6675  36B6
6676  36B7
6677  36B8
6678  36B9
6679  36BA
6680  36BB
6681  36BC
6682  36BD
6683  36BE
6684  36BF
6685  36C0
6686  36C1
6687  36C2
6688  36C3
6689  36C4
6690  36C5
6691  36C6
6692  36C7
6693  36C8
6694  36C9
6695  36CA
6696  36CB
6697  36CC
6698  36CD
6699  36CE
6700  36CF
6701  36D0
6702  36D1
6703  36D2
6704  36D3
6705  36D4
6706  36D5
6707  36D6
6708  36D7
6709  36D8
6710  36D9
6711  36DA
6712  36DB
6713  36DC
6714  36DD
6715  36DE
6716  36DF
6717  36E0
6718  36E1
6719  36E2
6720  36E3
6721  36E4
6722  36E5
6723  36E6
6724  36E7
6725  36E8
6726  36E9
6727  36EA
6728  36EB
6729  36EC
6730  36ED
6731  36EE
6732  36EF
6733  36F0
6734  36F1
6735  36F2
6736  36F3
6737  36F4
6738  36F5
6739  36F6
6740  36F7
6741  36F8
6742  36F9
6743  36FA
6744  36FB
6745  36FC
6746  36FD
6747  36FE
6748  36FF
6749  3700
6750  3701
6751  3702
6752  3703
6753  3704
6754  3705
6755  3706
6756  3707
6757  3708
6758  3709
6759  370A
6760  370B
6761  370C
6762  370D
6763  370E
6764  370F
6765  3710
6766  3711
6767  3712
6768  3713
6769  3714
6770  3715
6771  3716
6772  3717
6773  3718
6774  3719
6775  371A
6776  371B
6777  371C
6778  371D
6779  371E
6780  371F
6781  3720
6782  3721
6783  3722
6784  3723
6785  3724
6786  3725
6787  3726
6788  3727
6789  3728
6790  3729
6791  372A
6792  372B
6793  372C
6794  372D
6795  372E
6796  372F
6797  3730
6798  3731
6799  3732
6800  3733
6801  3734
6802  3735
6803  3736
6804  3737
6805  3738
6806  3739
6807  373A
6808  373B
6809  373C
6810  373D
6811  373E
6812  373F
6813  3740
6814  3741
6815  3742
6816  3743
6817  3744
6818  3745
6819  3746
6820  3747
6821  3748
6822  3749
6823  374A
6824  374B
6825  374C
6826  374D
6827  374E
6828  374F
6829  3750
6830  3751
6831  3752
6832  3753
6833  3754
6834  3755
6835  3756
6836  3757
6837  3758
6838  3759
6839  375A
6840  375B
6841  375C
6842  375D
6843  375E
6844  375F
6845  3760
6846  3761
6847  3762
6848  3763
6849  3764
6850  3765
6851  3766
6852  3767
6853  3768
6854  3769
6855  376A
6856  376B
6857  376C
6858  376D
6859  376E
6860  376F
6861  3770
6862  3771
6863  3772
6864  3773
6865  3774
6866  3775
6867  3776
6868  3777
6869  3778
6870  3779
6871  377A
6872  377B
6873  377C
6874  377D
6875  377E
6876  377F
6877  3780
6878  3781
6879  3782
6880  3783
6881  3784
6882  3785
6883  3786
6884  3787
6885  3788
6886  3789
6887  378A
6888  378B
6889  378C
6890  378D
6891  378E
6892  378F
6893  3790
6894  3791
6895  3792
6896  3793
6897  3794
6898  3795
6899  3796
6900  3797
6901  3798
6902  3799
6903  379A
6904  379B
6905  379C
6906  379D
6907  379E
6908  379F
6909  37A0
6910  37A1
6911  37A2
6912  37A3
6913  37A4
6914  37A5
6915  37A6
6916  37A7
6917  37A8
6918  37A9
6919  37AA
6920  37AB
6921  37AC
6922  37AD
6923  37AE
6924  37AF
6925  37B0
6926  37B1
6927  37B2
6928  37B3
6929  37B4
6930  37B5
6931  37B6
6932  37B7
6933  37B8
6934  37B9
6935  37BA
6936  37BB
6937  37BC
6938  37BD
6939  37BE
6940  37BF
6941  37C0
6942  37C1
6943  37C2
6944  37C3
6945  37C4
6946  37C5
6947  37C6
6948  37C7
6949  37C8
6950  37C9
6951  37CA
6952  37CB
6953  37CC
6954  37CD
6955  37CE
6956  37CF
6957  37D0
6958  37D1
6959  37D2
6960  37D3
6961  37D4
6962  37D5
6963  37D6
6964  37D7
6965  37D8
6966  37D9
6967  37DA
6968  37DB
6969  37DC
6970  37DD
6971  37DE
6972  37DF
6973  37E0
6974  37E1
6975  37E2
6976  37E3
6977  37E4
6978  37E5
6979  37E6
6980  37E7
6981  37E8
6982  37E9
6983  37EA
6984  37EB
6985  37EC
6986  37ED
6987  37EE
6988  37EF
6989  37F0
6990  37F1
6991  37F2
6992  37F3
6993  37F4
6994  37F5
6995  37F6
6996  37F7
6997  37F8
6998  37F9
6999  37FA
7000  37FB
7001  37FC
7002  37FD
7003  37FE
7004  37FF
7005  3800
7006  3801
7007  3802
7008  3803
7009  3804
7010  3805
7011  3806
7012  3807
7013  3808
7014  3809
7015  380A
7016  380B
7017  380C
7018  380D
7019  380E
7020  380F
7021  3810
7022  3811
7023  3812
7024  3813
7025  3814
7026  3815
7027  3816
7028  3817
7029  3818
7030  3819
7031  381A
7032  381B
7033  381C
7034  381D
7035  381E
7036  381F
7037  3820
7038  3821
7039  3822
7040  3823
7041  3824
7042  3825
7043  3826
7044  3827
7045  3828
7046  3829
7047  382A
7048  382B
7049  382C
7050  382D
7051  382E
7052  382F
7053  3830
7054  3831
7055  3832
7056  3833
7057  3834
7058  3835
7059  3836
7060  3837
7061  3838
7062  3839
7063  383A
7064  383B
7065  383C
7066  383D
7067  383E
7068  383F
7069  3840
7070  3841
7071  3842
7072  3843
7073  3844
7074  3845
7075  3846
7076  3847
7077  3848
7078  3849
7079  384A
7080  384B
7081  384C
7082  384D
7083  384E
7084  384F
7085  3850
7086  3851
7087  3852
7088  3853
7089  3854
7090  3855
7091  3856
7092  3857
7093  3858
7094  3859
7095  385A
7096  385B
7097  385C
7098  385D
7099  385E
7100  385F
7101  3860
7102  3861
7103  3862
7104  3863
7105  3864
7106  3865
7107  3866
7108  3867
7109  3868
7110  3869
7111  386A
7112  386B
7113  386C
7114  386D
7115  386E
7116  386F
7117  3870
7118  3871
7119  3872
7120  3873
7121  3874
7122  3875
7123  3876
7124  3877
7125  3878
7126  3879
7127  387A
7128  387B
7129  387C
7130  387D
7131  387E
7132  387F
7133  3880
7134  3881
7135  3882
7136  3883
7137  3884
7138  3885
7139  3886
7140  3887
7141  3888
7142  3889
7143  388A
7144  388B
7145  388C
7146  388D
7147  388E
7148  388F
7149  3890
7150  3891
7151  3892
7152  3893
7153  3894
7154  3895
7155  3896
7156  3897
7157  3898
7158  3899
7159  389A
7160  389B
7161  389C
7162  389D
7163  389E
7164  389F
7165  38A0
7166  38A1
7167  38A2
7168  38A3
7169  38A4
7170  38A5
7171  38A6
7172  38A7
7173  38A8
7174  38A9
7175  38AA
7176  38AB
7177  38AC
7178  38AD
7179  38AE
7180  38AF
7181  38B0
7182  38B1
7183  38B2
7184  38B3
7185  38B4
7186  38B5
7187  38B6
7188  38B7
7189  38B8
7190  38B9
7191  38BA
7192  38BB
7193  38BC
7194  38BD
7195  38BE
7196  38BF
7197  38C0
7198  38C1
7199  38C2
7200  38C3
7201  38C4
7202  38C5
7203  38C6
7204  38C7
7205  38C8
7206  38C9
7207  38CA
7208  38CB
7209  38CC
7210  38CD
7211  38CE
7212  38CF
7213  38D0
7214  38D1
7215  38D2
7216  38D3
7217  38D4
7218  38D5
7219  38D6
7220  38D7
7221  38D8
7222  38D9
7223  38DA
7224  38DB
7225  38DC
7226  38DD
7227  38DE
7228  38DF
7229  38E0
7230  38E1
7231  38E2
7232  38E3
7233  38E4
7234  38E5
7235  38E6
7236  38E7
7237  38E8
7238  38E9
7239  38EA
7240  38EB
7241  38EC
7242  38ED
7243  38EE
7244  38EF
7245  38F0
7246  38F1
7247  38F2
7248  38F3
7249  38F4
7250  38F5
7251  38F6
7252  38F7
7253  38F8
7254  38F9
7255  38FA
7256  38FB
7257  38FC
7258  38FD
7259  38FE
7260  38FF
7261  3900
7262  3901
7263  3902
7264  3903
7265  3904
7266  3905
7267  3906
7268  3907
7269  3908
7270  3909
7271  390A
7272  390B
7273  390C
7274  390D
7275  390E
7276  390F
7277  3910
7278  3911
7279  3912
7280  3913
7281  3914
7282  3915
7283  3916
7284  3917
7285  3918
7286  3919
7287  391A
7288  391B
7289  391C
7290  391D
7291  391E
7292  391F
7293  3920
7294  3921
7295  3922
7296  3923
7297  3924
7298  3925
7299  3926
7300  3927
7301  3928
7302  3929
7303  392A
7304  392B
7305  392C
7306  392D
7307  392E
7308  392F
7309  3930
7310  3931
7311  3932
7312  3933
7313  3934
7314  3935
7315  3936
7316  3937
7317  3938
7318  3939
7319  393A
7320  393B
7321  393C
7322  393D
7323  393E
7324  393F
7325  3940
7326  3941
7327  3942
7328  3943
7329  3944
7330  3945
7331  3946
7332  3947
7333  3948
7334  3949
7335  394A
7336  394B
7337  394C
7338  394D
7339  394E
7340  394F
7341  3950
7342  3951
7343  3952
7344  3953
7345  3954
7346  3955
7347  3956
7348  3957
7349  3958
7350  3959
7351  395A
7352  395B
7353  395C
7354  395D
7355  395E
7356  395F
7357  3960
7358  3961
7359  3962
7360  3963
7361  3964
7362  3965
7363  3966
7364  3967
7365  3968
7366  3969
7367  396A
7368  396B
7369  396C
7370  396D
7371  396E
7372  396F
7373  3970
7374  3971
7375  3972
7376  3973
7377  3974
7378  3975
7379  3976
7380  3977
7381  3978
7382  3979
7383  397A
7384  397B
7385  397C
7386  397D
7387  397E
7388  397F
7389  3980
7390  3981
7391  3982
7392  3983
7393  3984
7394  3985
7395  3986
7396  3987
7397  3988
7398  3989
7399  398A
7400  398B
7401  398C
7402  398D
7403  398E
7404  398F
7405  3990
7406  3991
7407  3992
7408  3993
7409  3994
7410  3995
7411  3996
7412  3997
7413  3998
7414  3999
7415  399A
7416  399B
7417  399C
7418  399D
7419  399E
7420  399F
7421  39A0
7422  39A1
7423  39A2
7424  39A3
7425  39A4
7426  39A5
7427  39A6
7428  39A7
7429  39A8
7430  39A9
7431  39AA
7432  39AB
7433  39AC
7434  39AD
7435  39AE
7436  39AF
7437  39B0
7438  39B1
7439  39B2
7440  39B3
7441  39B4
7442  39B5
7443  39B6
7444  39B7
7445  39B8
7446  39B9
7447  39BA
7448  39BB
7449  39BC
7450  39BD
7451  39BE
7452  39BF
7453  39C0
7454  39C1
7455  39C2
7456  39C3
7457  39C4
7458  39C5
7459  39C6
7460  39C7
7461  39C8
7462  39C9
7463  39CA
7464  39CB
7465  39CC
7466  39CD
7467  39CE
7468  39CF
7469  39D0
7470  39D1
7471  39D2
7472  39D3
7473  39D4
7474  39D5
7475  39D6
7476  39D7
7477  39D8
7478  39D9
7479  39DA
7480  39DB
7481  39DC
7482  39DD
7483  39DE
7484  39DF
7485  39E0
7486  39E1
7487  39E2
7488  39E3
7489  39E4
7490  39E5
7491  39E6
7492  39E7
7493  39E8
7494  39E9
7495  39EA
7496  39EB
7497  39EC
7498  39ED
7499  39EE
7500  39EF
7501  39F0
7502  39F1
7503  39F2
7504  39F3
7505  39F4
7506  39F5
7507  39F6
7508  39F7
7509  39F8
7510  39F9
7511  39FA
7512  39FB
7513  39FC
7514  39FD
7515  39FE
7516  39FF
7517  3A00
7518  3A01
7519  3A02
7520  3A03
7521  3A04
7522  3A05
7523  3A06
7524  3A07
7525  3A08
7526  3A09
7527  3A0A
7528  3A0B
7529  3A0C
7530  3A0D
7531  3A0E
7532  3A0F
7533  3A10
7534  3A11
7535  3A12
7536  3A13
7537  3A14
7538  3A15
7539  3A16
7540  3A17
7541  3A18
7542  3A19
7543  3A1A
7544  3A1B
7545  3A1C
7546  3A1D
7547  3A1E
7548  3A1F
7549  3A20
7550  3A21
7551  3A22
7552  3A23
7553  3A24
7554  3A25
7555  3A26
7556  3A27
7557  3A28
7558  3A29
7559  3A2A
7560  3A2B
7561  3A2C
7562  3A2D
7563  3A2E
7564  3A2F
7565  3A30
7566  3A31
7567  3A32
7568  3A33
7569  3A34
7570  3A35
7571  3A36
7572  3A37
7573  3A38
7574  3A39
7575  3A3A
7576  3A3B
7577  3A3C
7578  3A3D
7579  3A3E
7580  3A3F
7581  3A40
7582  3A41
7583  3A42
7584  3A43
7585  3A44
7586  3A45
7587  3A46
7588  3A47
7589  3A48
7590  3A49
7591  3A4A
7592  3A4B
7593  3A4C
7594  3A4D
7595  3A4E
7596  3A4F
7597  3A50
7598  3A51
7599  3A52
7600  3A53
7601  3A54
7602  3A55
7603  3A56
7604  3A57
7605  3A58
7606  3A59
7607  3A5A
7608  3A5B
7609  3A5C
7610  3A5D
7611  3A5E
7612  3A5F
7613  3A60
7614  3A61
7615  3A62
7616  3A63
7617  3A64
7618  3A65
7619  3A66
7620  3A67
7621  3A68
7622  3A69
7623  3A6A
7624  3A6B
7625  3A6C
7626  3A6D
7627  3A6E
7628  3A6F
7629  3A70
7630  3A71
7631  3A72
7632  3A73
7633  3A74
7634  3A75
7635  3A76
7636  3A77
7637  3A78
7638  3A79
7639  3A7A
7640  3A7B
7641  3A7C
7642  3A7D
7643  3A7E
7644  3A7F
7645  3A80
7646  3A81
7647  3A82
7648  3A83
7649  3A84
7650  3A85
7651  3A86
7652  3A87
7653  3A88
7654  3A89
7655  3A8A
7656  3A8B
7657  3A8C
7658  3A8D
7659  3A8E
7660  3A8F
7661  3A90
7662  3A91
7663  3A92
7664  3A93
7665  3A94
7666  3A95
7667  3A96
7668  3A97
7669  3A98
7670  3A99
7671  3A9A
7672  3A9B
7673  3A9C
7674  3A9D
7675  3A9E
7676  3A9F
7677  3AA0
7678  3AA1
7679  3AA2
7680  3AA3
7681  3AA4
7682  3AA5
7683  3AA6
7684  3AA7
7685  3AA8
7686  3AA9
7687  3AAA
7688  3AAB
7689  3AAC
7690  3AAD
7691  3AAE
7692  3AAF
7693  3AB0
7694  3AB1
7695  3AB2
7696  3AB3
7697  3AB4
7698  3AB5
7699  3AB6
7700  3AB7
7701  3AB8
7702  3AB9
7703  3ABA
7704  3ABB
7705  3ABC
7706  3ABD
7707  3ABE
7708  3ABF
7709  3AC0
7710  3AC1
7711  3AC2
7712  3AC3
7713  3AC4
7714  3AC5
7715  3AC6
7716  3AC7
7717  3AC8
7718  3AC9
7719  3ACA
7720  3ACB
7721  3ACC
7722  3ACD
7723  3ACE
7724  3ACF
7725  3AD0
7726  3AD1
7727  3AD2
7728  3AD3
7729  3AD4
7730  3AD5
7731  3AD6
7732  3AD7
7733  3AD8
7734  3AD9
7735  3ADA
7736  3ADB
7737  3ADC
7738  3ADD
7739  3ADE
7740  3ADF
7741  3AE0
7742  3AE1
7743  3AE2
7744  3AE3
7745  3AE4
7746  3AE5
7747  3AE6
7748  3AE7
7749  3AE8
7750  3AE9
7751  3AEA
7752  3AEB
7753  3AEC
7754  3AED
7755  3AEE
7756  3AEF
7757  3AF0
7758  3AF1
7759  3AF2
7760  3AF3
7761  3AF4
7762  3AF5
7763  3AF6
7764  3AF7
7765  3AF8
7766  3AF9
7767  3AFA
7768  3AFB
7769  3AFC
7770  3AFD
7771  3AFE
7772  3AFF
7773  3B00
7774  3B01
7775  3B02
7776  3B03
7777  3B04
7778  3B05
7779  3B06
7780  3B07
7781  3B08
7782  3B09
7783  3B0A
7784  3B0B
7785  3B0C
7786  3B0D
7787  3B0E
7788  3B0F
7789  3B10
7790  3B11
7791  3B12
7792  3B13
7793  3B14
7794  3B15
7795  3B16
7796  3B17
7797  3B18
7798  3B19
7799  3B1A
7800  3B1B
7801  3B1C
7802  3B1D
7803  3B1E
7804  3B1F
7805  3B20
7806  3B21
7807  3B22
7808  3B23
7809  3B24
7810  3B25
7811  3B26
7812  3B27
7813  3B28
7814  3B29
7815  3B2A
7816  3B2B
7817  3B2C
7818  3B2D
7819  3B2E
7820  3B2F
7821  3B30
7822  3B31
7823  3B32
7824  3B33
7825  3B34
7826  3B35
7827  3B36
7828  3B37
7829  3B38
7830  3B39
7831  3B3A
7832  3B3B
7833  3B3C
7834  3B3D
7835  3B3E
7836  3B3F
7837  3B40
7838  3B41
7839  3B42
7840  3B43
7841  3B44
7842  3B45
7843  3B46
7844  3B47
7845  3B48
7846  3B49
7847  3B4A
7848  3B4B
7849  3B4C
7850  3B4D
7851  3B4E
7852  3B4F
7853  3B50
7854  3B51
7855  3B52
7856  3B53
7857  3B54
7858  3B55
7859  3B56
7860  3B57
7861  3B58
7862  3B59
7863  3B5A
7864  3B5B
7865  3B5C
7866  3B5D
7867  3B5E
7868  3B5F
7869  3B60
7870  3B61
7871  3B62
7872  3B63
7873  3B64
7874  3B65
7875  3B66
7876  3B67
7877  3B68
7878  3B69
7879  3B6A
7880  3B6B
7881  3B6C
7882  3B6D
7883  3B6E
7884  3B6F
7885  3B70
7886  3B71
7887  3B72
7888  3B73
7889  3B74
7890  3B75
7891  3B76
7892  3B77
7893  3B78
7894  3B79
7895  3B7A
7896  3B7B
7897  3B7C
7898  3B7D
7899  3B7E
7900  3B7F
7901  3B80
7902  3B81
7903  3B82
7904  3B83
7905  3B84
7906  3B85
7907  3B86
7908  3B87
7909  3B88
7910  3B89
7911  3B8A
7912  3B8B
7913  3B8C
7914  3B8D
7915  3B8E
7916  3B8F
7917  3B90
7918  3B91
7919  3B92
7920  3B93
7921  3B94
7922  3B95
7923  3B96
7924  3B97
7925  3B98
7926  3B99
7927  3B9A
7928  3B9B
7929  3B9C
7930  3B9D
7931  3B9E
7932  3B9F
7933  3BA0
7934  3BA1
7935  3BA2
7936  3BA3
7937  3BA4
7938  3BA5
7939  3BA6
7940  3BA7
7941  3BA8
7942  3BA9
7943  3BAA
7944  3BAB
7945  3BAC
7946  3BAD
7947  3BAE
7948  3BAF
7949  3BB0
7950  3BB1
7951  3BB2
7952  3BB3
7953  3BB4
7954  3BB5
7955  3BB6
7956  3BB7
7957  3BB8
7958  3BB9
7959  3BBA
7960  3BBB
7961  3BBC
7962  3BBD
7963  3BBE
7964  3BBF
7965  3BC0
7966  3BC1
7967  3BC2
7968  3BC3
7969  3BC4
7970  3BC5
7971  3BC6
7972  3BC7
7973  3BC8
7974  3BC9
7975  3BCA
7976  3BCB
7977  3BCC
7978  3BCD
7979  3BCE
7980  3BCF
7981  3BD0
7982  3BD1
7983  3BD2
7984  3BD3
7985  3BD4
7986  3BD5
7987  3BD6
7988  3BD7
7989  3BD8
7990  3BD9
7991  3BDA
7992  3BDB
7993  3BDC
7994  3BDD
7995  3BDE
7996  3BDF
7997  3BE0
7998  3BE1
7999  3BE2
8000  3BE3
8001  3BE4
8002  3BE5
8003  3BE6
8004  3BE7
8005  3BE8
8006  3BE9
8007  3BEA
8008  3BEB
8009  3BEC
8010  3BED
8011  3BEE
8012  3BEF
8013  3BF0
8014  3BF1
8015  3BF2
8016  3BF3
8017  3BF4
8018  3BF5
8019  3BF6
8020  3BF7
8021  3BF8
8022  3BF9
8023  3BFA
8024  3BFB
8025  3BFC
8026  3BFD
8027  3BFE
8028  3BFF
8029  3C00
8030  3C01
8031  3C02
8032  3C03
8033  3C04
8034  3C05
8035  3C06
8036  3C07
8037  3C08
8038  3C09
8039  3C0A
8040  3C0B
8041  3C0C
8042  3C0D
8043  3C0E
8044  3C0F
8045  3C10
8046  3C11
8047  3C12
8048  3C13
8049  3C14
8050  3C15
8051  3C16
8052  3C17
8053  3C18
8054  3C19
8055  3C1A
8056  3C1B
8057  3C1C
8058  3C1D
8059  3C1E
8060  3C1F
8061  3C20
8062  3C21
8063  3C22
8064  3C23
8065  3C24
8066  3C25
8067  3C26
8068  3C27
8069  3C28
8070  3C29
8071  3C2A
8072  3C2B
8073  3C2C
8074  3C2D
8075  3C2E
8076  3C2F
8077  3C30
8078  3C31
8079  3C32
8080  3C33
8081  3C34
8082  3C35
8083  3C36
8084  3C37
8085  3C38
8086  3C39
8087  3C3A
8088  3C3B
8089  3C3C
8090  3C3D
8091  3C3E
8092  3C3F
8093  3C40
8094  3C41
8095  3C42
8096  3C43
8097  3C44
8098  3C45
8099  3C46
8100  3C47
8101  3C48
8102  3C49
8103  3C4A
8104  3C4B
8105  3C4C
8106  3C4D
8107  3C4E
8108  3C4F
8109  3C50
8110  3C51
8111  3C52
8112  3C53
8113  3C54
8114  3C55
8115  3C56
8116  3C57
8117  3C58
8118  3C59
8119  3C5A
8120  3C5B
8121  3C5C
8122  3C5D
8123  3C5E
8124  3C5F
8125  3C60
8126  3C61
8127  3C62
8128  3C63
8129  3C64
8130  3C65
8131  3C66
8132  3C67
8133  3C68
8134  3C69
8135  3C6A
8136  3C6B
8137  3C6C
8138  3C6D
8139  3C6E
8140  3C6F
8141  3C70
8142  3C71
8143  3C72
8144  3C73
8145  3C74
8146  3C75
8147  3C76
8148  3C77
8149  3C78
8150  3C79
8151  3C7A
8152  3C7B
8153  3C7C
8154  3C7D
8155  3C7E
8156  3C7F
8157  3C80
8158  3C81
8159  3C82
8160  3C83
8161  3C84
8162  3C85
8163  3C86
8164  3C87
8165  3C88
8166  3C89
8167  3C8A
8168  3C8B
8169  3C8C
8170  3C8D
8171  3C8E
8172  3C8F
8173  3C90
8174  3C91
8175  3C92
8176  3C93
8177  3C94
8178  3C95
8179  3C96
8180  3C97
8181  3C98
8182  3C99
8183  3C9A
8184  3C9B
8185  3C9C
8186  3C9D
8187  3C9E
8188  3C9F
8189  3CA0
8190  3CA1
8191  3CA2
8192  3CA3
8193  3CA4
8194  3CA5
8195  3CA6
8196  3CA7
8197  3CA8
8198  3CA9
8199  3CAA
8200  3CAB
8201  3CAC
8202  3CAD
8203  3CAE
8204  3CAF
8205  3CB0
8206  3CB1
8207  3CB2
8208  3CB3
8209  3CB4
8210  3CB5
8211  3CB6
8212  3CB7
8213  3CB8
8214  3CB9
8215  3CBA
8216  3CBB
8217  3CBC
8218  3CBD
8219  3CBE
8220  3CBF
8221  3CC0
8222  3CC1
8223  3CC2
8224  3CC3
8225  3CC4
8226  3CC5
8227  3CC6
8228  3CC7
8229  3CC8
8230  3CC9
8231  3CCA
8232  3CCB
8233  3CCC
8234  3CCD
8235  3CCE
8236  3CCF
8237  3CD0
8238  3CD1
8239  3CD2
8240  3CD3
8241  3CD4
8242  3CD5
8243  3CD6
8244  3CD7
8245  3CD8
8246  3CD9
8247  3CDA
8248  3CDB
8249  3CDC
8250  3CDD
8251  3CDE
8252  3CDF
8253  3CE0
8254  3CE1
8255  3CE2
8256  3CE3
8257  3CE4
8258  3CE5
8259  3CE6
8260  3CE7
8261  3CE8
8262  3CE9
8263  3CEA
8264  3CEB
8265  3CEC
8266  3CED
8267  3CEE
8268  3CEF
8269  3CF0
8270  3CF1
8271  3CF2
8272  3CF3
8273  3CF4
8274  3CF5
8275  3CF6
8276  3CF7
8277  3CF8
8278  3CF9
8279  3CFA
8280  3CFB
8281  3CFC
8282  3CFD
8283  3CFE
8284  3CFF
8285  3D00
8286  3D01
8287  3D02
8288  3D03
8289  3D04
8290  3D05
8291  3D06
8292  3D07
8293  3D08
8294  3D09
8295  3D0A
8296  3D0B
8297  3D0C
8298  3D0D
8299  3D0E
8300  3D0F
8301  3D10
8302  3D11
8303  3D12
8304  3D13
8305  3D14
8306  3D15
8307  3D16
8308  3D17
8309  3D18
8310  3D19
8311  3D1A
8312  3D1B
8313  3D1C
8314  3D1D
8315  3D1E
8316  3D1F
8317  3D20
8318  3D21
8319  3D22
8320  3D23
8321  3D24
8322  3D25
8323  3D26
8324  3D27
8325  3D28
8326  3D29
8327  3D2A
8328  3D2B
8329  3D2C
8330  3D2D
8331  3D2E
8332  3D2F
8333  3D30
8334  3D31
8335  3D32
8336  3D33
8337  3D34
8338  3D35
8339  3D36
8340  3D37
8341  3D38
8342  3D39
8343  3D3A
8344  3D3B
8345  3D3C
8346  3D3D
8347  3D3E
8348  3D3F
8349  3D40
8350  3D41
8351  3D42
8352  3D43
8353  3D44
8354  3D45
8355  3D46
8356  3D47
8357  3D48
8358  3D49
8359  3D4A
8360  3D4B
8361  3D4C
8362  3D4D
8363  3D4E
8364  3D4F
8365  3D50
8366  3D51
8367  3D52
8368  3D53
8369  3D54
8370  3D55
8371  3D56
8372  3D57
8373  3D58
8374  3D59
8375  3D5A
8376  3D5B
8377  3D5C
8378  3D5D
8379  3D5E
8380  3D5F
8381  3D60
8382  3D61
8383  3D62
8384  3D63
8385  3D64
8386  3D65
8387  3D66
8388  3D67
8389  3D68
8390  3D69
8391  3D6A
8392  3D6B
8393  3D6C
8394  3D6D
8395  3D6E
8396  3D6F
8397  3D70
8398  3D71
8399  3D72
8400  3D73
8401  3D74
8402  3D75
8403  3D76
8404  3D77
8405  3D78
8406  3D79
8407  3D7A
8408  3D7B
8409  3D7C
8410  3D7D
8411  3D7E
8412  3D7F
8413  3D80
8414  3D81
8415  3D82
8416  3D83
8417  3D84
8418  3D85
8419  3D86
8420  3D87
8421  3D88
8422  3D89
8423  3D8A
8424  3D8B
8425  3D8C
8426  3D8D
8427  3D8E
8428  3D8F
8429  3D90
8430  3D91
8431  3D92
8432  3D93
8433  3D94
8434  3D95
8435  3D96
8436  3D97
8437  3D98
8438  3D99
8439  3D9A
8440  3D9B
8441  3D9C
8442  3D9D
8443  3D9E
8444  3D9F
8445  3DA0
8446  3DA1
8447  3DA2
8448  3DA3
8449  3DA4
8450  3DA5
8451  3DA6
8452  3DA7
8453  3DA8
8454  3DA9
8455  3DAA
8456  3DAB
8457  3DAC
8458  3DAD
8459  3DAE
8460  3DAF
8461  3DB0
8462  3DB1
8463  3DB2
8464  3DB3
8465  3DB4
8466  3DB5
8467  3DB6
8468  3DB7
8469  3DB8
8470  3DB9
8471  3DBA
8472  3DBB
8473  3DBC
8474  3DBD
8475  3DBE
8476  3DBF
8477  3DC0
8478  3DC1
8479  3DC2
8480  3DC3
8481  3DC4
8482  3DC5
8483  3DC6
8484  3DC7
8485  3DC8
8486  3DC9
8487  3DCA
8488  3DCB
8489  3DCC
8490  3DCD
8491  3DCE
8492  3DCF
8493  3DD0
8494  3DD1
8495  3DD2
8496  3DD3
8497  3DD4
8498  3DD5
8499  3DD6
8500  3DD7
8501  3DD8
8502  3DD9
8503  3DDA
8504  3DDB
8505  3DDC
8506  3DDD
8507  3DDE
8508  3DDF
8509  3DE0
8510  3DE1
8511  3DE2
8512  3DE3
8513  3DE4
8514  3DE5
8515  3DE6
8516  3DE7
8517  3DE8
8518  3DE9
8519  3DEA
8520  3DEB
8521  3DEC
8522  3DED
8523  3DEE
8524  3DEF
8525  3DF0
8526  3DF1
8527  3DF2
8528  3DF3
8529  3DF4
8530  3DF5
8531  3DF6
8532  3DF7
8533  3DF8
8534  3DF9
8535  3DFA
8536  3DFB
8537  3DFC
8538  3DFD
8539  3DFE
8540  3DFF
8541  3E00
8542  3E01
8543  3E02
8544  3E03
8545  3E04
8546  3E05
8547  3E06
8548  3E07
8549  3E08
8550  3E09
8551  3E0A
8552  3E0B
8553  3E0C
8554  3E0D
8555  3E0E
8556  3E0F
8557  3E10
8558  3E11
8559  3E12
8560  3E13
8561  3E14
8562  3E15
8563  3E16
8564  3E17
8565  3E18
8566  3E19
8567  3E1A
8568  3E1B
8569  3E1C
8570  3E1D
8571  3E1E
8572  3E1F
8573  3E20
8574  3E21
8575  3E22
8576  3E23
8577  3E24
8578  3E25
8579  3E26
8580  3E27
8581  3E28
8582  3E29
8583  3E2A
8584  3E2B
8585  3E2C
8586  3E2D
8587  3E2E
8588  3E2F
8589  3E30
8590  3E31
8591  3E32
8592  3E33
8593  3E34
8594  3E35
8595  3E36
8596  3E37
8597  3E38
8598  3E39
8599  3E3A
8600  3E3B
8601  3E3C
8602  3E3D
8603  3E3E
8604  3E3F
8605  3E40
8606  3E41
8607  3E42
8608  3E43
8609  3E44
8610  3E45
8611  3E46
8612  3E47
8613  3E48
8614  3E49
8615  3E4A
8616  3E4B
8617  3E4C
8618  3E4D
8619  3E4E
8620  3E4F
8621  3E50
8622  3E51
8623  3E52
8624  3E53
8625  3E54
8626  3E55
8627  3E56
8628  3E57
8629  3E58
8630  3E59
8631  3E5A
8632  3E5B
8633  3E5C
8634  3E5D
8635  3E5E
8636  3E5F
8637  3E60
8638  3E61
8639  3E62
8640  3E63
8641  3E64
8642  3E65
8643  3E66
8644  3E67
8645  3E68
8646  3E69
8647  3E6A
8648  3E6B
8649  3E6C
8650  3E6D
8651  3E6E
8652  3E6F
8653  3E70
8654  3E71
8655  3E72
8656  3E73
8657  3E74
8658  3E75
8659  3E76
8660  3E77
8661  3E78
8662  3E79
8663  3E7A
8664  3E7B
8665  3E7C
8666  3E7D
8667  3E7E
8668  3E7F
8669  3E80
8670  3E81
8671  3E82
8672  3E83
8673  3E84
8674  3E85
8675  3E86
8676  3E87
8677  3E88
8678  3E89
8679  3E8A
8680  3E8B
8681  3E8C
8682  3E8D
8683  3E8E
8684  3E8F
8685  3E90
8686  3E91
8687  3E92
8688  3E93
8689  3E94
8690  3E95
8691  3E96
8692  3E97
8693  3E98
8694  3E99
8695  3E9A
8696  3E9B
8697  3E9C
8698  3E9D
8699  3E9E
8700  3E9F
8701  3EA0
8702  3EA1
8703  3EA2
8704  3EA3
8705  3EA4
8706  3EA5
8707  3EA6
8708  3EA7
8709  3EA8
8710  3EA9
8711  3EAA
8712  3EAB
8713  3EAC
8714  3EAD
8715  3EAE
8716  3EAF
8717  3EB0
8718  3EB1
8719  3EB2
8720  3EB3
8721  3EB4
8722  3EB5
8723  3EB6
8724  3EB7
8725  3EB8
8726  3EB9
8727  3EBA
8728  3EBB
8729  3EBC
8730  3EBD
8731  3EBE
8732  3EBF
8733  3EC0
8734  3EC1
8735  3EC2
8736  3EC3
8737  3EC4
8738  3EC5
8739  3EC6
8740  3EC7
8741  3EC8
8742  3EC9
8743  3ECA
8744  3ECB
8745  3ECC
8746  3ECD
8747  3ECE
8748  3ECF
8749  3ED0
8750  3ED1
8751  3ED2
8752  3ED3
8753  3ED4
8754  3ED5
8755  3ED6
8756  3ED7
8757  3ED8
8758  3ED9
8759  3EDA
8760  3EDB
8761  3EDC
8762  3EDD
8763  3EDE
8764  3EDF
8765  3EE0
8766  3EE1
8767  3EE2
8768  3EE3
8769  3EE4
8770  3EE5
8771  3EE6
8772  3EE7
8773  3EE8
8774  3EE9
8775  3EEA
8776  3EEB
8777  3EEC
8778  3EED
8779  3EEE
8780  3EEF
8781  3EF0
8782  3EF1
8783  3EF2
8784  3EF3
8785  3EF4
8786  3EF5
8787  3EF6
8788  3EF7
8789  3EF8
8790  3EF9
8791  3EFA
8792  3EFB
8793  3EFC
8794  3EFD
8795  3EFE
8796  3EFF
8797  3F00
8798  3F01
8799  3F02
8800  3F03
8801  3F04
8802  3F05
8803  3F06
8804  3F07
8805  3F08
8806  3F09
8807  3F0A
8808  3F0B
8809  3F0C
8810  3F0D
8811  3F0E
8812  3F0F
8813  3F10
8814  3F11
8815  3F12
8816  3F13
8817  3F14
8818  3F15
8819  3F16
8820  3F17
8821  3F18
8822  3F19
8823  3F1A
8824  3F1B
8825  3F1C
8826  3F1D
8827  3F1E
8828  3F1F
8829  3F20
8830  3F21
8831  3F22
8832  3F23
8833  3F24
8834  3F25
8835  3F26
8836  3F27
8837  3F28
8838  3F29
8839  3F2A
8840  3F2B
8841  3F2C
8842  3F2D
8843  3F2E
8844  3F2F
8845  3F30
8846  3F31
8847  3F32
8848  3F33
8849  3F34
8850  3F35
8851  3F36
8852  3F37
8853  3F38
8854  3F39
8855  3F3A
8856  3F3B
8857  3F3C
8858  3F3D
8859  3F3E
8860  3F3F
8861  3F40
8862  3F41
8863  3F42
8864  3F43
8865  3F44
8866  3F45
8867  3F46
8868  3F47
8869  3F48
8870  3F49
8871  3F4A
8872  3F4B
8873  3F4C
8874  3F4D
8875  3F4E
8876  3F4F
8877  3F50
8878  3F51
8879  3F52
8880  3F53
8881  3F54
8882  3F55
8883  3F56
8884  3F57
8885  3F58
8886  3F59
8887  3F5A
8888  3F5B
8889  3F5C
8890  3F5D
8891  3F5E
8892  3F5F
8893  3F60
8894  3F61
8895  3F62
8896  3F63
8897  3F64
8898  3F65
8899  3F66
8900  3F67
8901  3F68
8902  3F69
8903  3F6A
8904  3F6B
8905  3F6C
8906  3F6D
8907  3F6E
8908  3F6F
8909  3F70
8910  3F71
8911  3F72
8912  3F73
8913  3F74
8914  3F75
8915  3F76
8916  3F77
8917  3F78
8918  3F79
8919  3F7A
8920  3F7B
8921  3F7C
8922  3F7D
8923  3F7E
8924  3F7F
8925  3F80
8926  3F81
8927  3F82
8928  3F83
8929  3F84
8930  3F85
8931  3F86
8932  3F87
8933  3F88
8934  3F89
8935  3F8A
8936  3F8B
8937  3F8C
8938  3F8D
8939  3F8E
8940  3F8F
8941  3F90
8942  3F91
8943  3F92
8944  3F93
8945  3F94
8946  3F95
8947  3F96
8948  3F97
8949  3F98
8950  3F99
8951  3F9A
8952  3F9B
8953  3F9C
8954  3F9D
8955  3F9E
8956  3F9F
8957  3FA0
8958  3FA1
8959  3FA2
8960  3FA3
8961  3FA4
8962  3FA5
8963  3FA6
8964  3FA7
8965  3FA8
8966  3FA9
8967  3FAA
8968  3FAB
8969  3FAC
8970  3FAD
8971  3FAE
8972  3FAF
8973  3FB0
8974  3FB1
8975  3FB2
8976  3FB3
8977  3FB4
8978  3FB5
8979  3FB6
8980  3FB7
8981  3FB8
8982  3FB9
8983  3FBA
8984  3FBB
8985  3FBC
8986  3FBD
8987  3FBE
8988  3FBF
8989  3FC0
8990  3FC1
8991  3FC2
8992  3FC3
8993  3FC4
8994  3FC5
8995  3FC6
8996  3FC7
8997  3FC8
8998  3FC9
8999  3FCA
9000  3FCB
9001  3FCC
9002  3FCD
9003  3FCE
9004  3FCF
9005  3FD0
9006  3FD1
9007  3FD2
9008  3FD3
9009  3FD4
9010  3FD5
9011  3FD6
9012  3FD7
9013  3FD8
9014  3FD9
9015  3FDA
9016  3FDB
9017  3FDC
9018  3FDD
9019  3FDE
9020  3FDF
9021  3FE0
9022  3FE1
9023  3FE2
9024  3FE3
9025  3FE4
9026  3FE5
9027  3FE6
9028  3FE7
9029  3FE8
9030  3FE9
9031  3FEA
9032  3FEB
9033  3FEC
9034  3FED
9035  3FEE
9036  3FEF
9037  3FF0
9038  3FF1
9039  3FF2
9040  3FF3
9041  3FF4
9042  3FF5
9043  3FF6
9044  3FF7
9045  3FF8
9046  3FF9
9047  3FFA
9048  3FFB
9049  3FFC
9050  3FFD
9051  3FFE
9052  3FFF
9053  4000
9054  4001
9055  4002
9056  4003
9057  4004
9058  4005
9059  4006
9060  4007
9061  4008
9062  4009
9063  400A
9064  400B
9065  400C
9066  400D
9067  400E
9068  400F
9069  4010
9070  4011
9071  4012
9072  4013
9073  4014
9074  4015
9075  4016
9076  4017
9077  4018
9078  4019
9079  401A
9080  401B
9081  401C
9082  401D
9083  401E
9084  401F
9085  4020
9086  4021
9087  4022
9088  4023
9089  4024
9090  4025
9091  4026
9092  4027
9093  4028
9094  4029
9095  402A
9096  402B
9097  402C
9098  402D
9099  402E
9100  402F
9101  4030
9102  4031
9103  4032
9104  4033
9105  4034
9106  4035
9107  4036
9108  4037
9109  4038
9110  4039
9111  403A
9112  403B
9113  403C
9114  403D
9115  403E
9116  403F
9117  4040
9118  4041
9119  4042
9120  4043
9121  4044
9122  4045
9123  4046
9124  4047
9125  4048
9126  4049
9127  404A
9128  404B
9129  404C
9130  404D
9131  404E
9132  404F
9133  4050
9134  4051
9135  4052
9136  4053
9137  4054
9138  4055
9139  4056
9140  4057
9141  4058
9142  4059
9143  405A
9144  405B
9145  405C
9146  405D
9147  405E
9148  405F
9149  4060
9150  4061
9151  4062
9152  4063
9153  4064
9154  4065
9155  4066
9156  4067
9157  4068
9158  4069
9159  406A
9160  406B
9161  406C
9162  406D
9163  406E
9164  406F
9165  4070
9166  4071
9167  4072
9168  4073
9169  4074
9170  4075
9171  4076
9172  4077
9173  4078
9174  4079
9175  407A
9176  407B
9177  407C
9178  407D
9179  407E
9180  407F
9181  4080
9182  4081
9183  4082
9184  4083
9185  4084
9186  4085
9187  4086
9188  4087
9189  4088
9190  4089
9191  408A
9192  408B
9193  408C
9194  408D
9195  408E
9196  408F
9197  4090
9198  4091
9199  4092
9200  4093
9201  4094
9202  4095
9203  4096
9204  4097
9205  4098
9206  4099
9207  409A
9208  409B
9209  409C
9210  409D
9211  409E
9212  409F
9213  40A0
9214  40A1
9215  40A2
9216  40A3
9217  40A4
9218  40A5
9219  40A6
9220  40A7
9221  40A8
9222  40A9
9223  40AA
9224  40AB
9225  40AC
9226  40AD
9227  40AE
9228  40AF
9229  40B0
9230  40B1
9231  40B2
9232  40B3
9233  40B4
9234  40B5
9235  40B6
9236  40B7
9237  40B8
9238  40B9
9239  40BA
9240  40BB
9241  40BC
9242  40BD
9243  40BE
9244  40BF
9245  40C0
9246  40C1
9247  40C2
9248  40C3
9249  40C4
9250  40C5
9251  40C6
9252  40C7
9253  40C8
9254  40C9
9255  40CA
9256  40CB
9257  40CC
9258  40CD
9259  40CE
9260  40CF
9261  40D0
9262  40D1
9263  40D2
9264  40D3
9265  40D4
9266  40D5
9267  40D6
9268  40D7
9269  40D8
9270  40D9
9271  40DA
9272  40DB
9273  40DC
9274  40DD
9275  40DE
9276  40DF
9277  40E0
9278  40E1
9279  40E2
9280  40E3
9281  40E4
9282  40E5
9283  40E6
9284  40E7
9285  40E8
9286  40E9
9287  40EA
9288  40EB
9289  40EC
9290  40ED
9291  40EE
9292  40EF
9293  40F0
9294  40F1
9295  40F2
9296  40F3
9297  40F4
9298  40F5
9299  40F6
9300  40F7
9301  40F8
9302  40F9
9303  40FA
9304  40FB
9305  40FC
9306  40FD
9307  40FE
9308  40FF
9309  4100
9310  4101
9311  4102
9312  4103
9313  4104
9314  4105
9315  4106
9316  4107
9317  4108
9318  4109
9319  410A
9320  410B
9321  410C
9322  410D
9323  410E
9324  410F
9325  4110
9326  4111
9327  4112
9328  4113
9329  4114
9330  4115
9331  4116
9332  4117
9333  4118
9334  4119
9335  411A
9336  411B
9337  411C
9338  411D
9339  411E
9340  411F
9341  4120
9342  4121
9343  4122
9344  4123
9345  4124
9346  4125
9347  4126
9348  4127
9349  4128
9350  4129
9351  412A
9352  412B
9353  412C
9354  412D
9355  412E
9356  412F
9357  4130
9358  4131
9359  4132
9360  4133
9361  4134
9362  4135
9363  4136
9364  4137
9365  4138
9366  4139
9367  413A
9368  413B
9369  413C
9370  413D
9371  413E
9372  413F
9373  4140
9374  4141
9375  4142
9376  4143
9377  4144
9378  4145
9379  4146
9380  4147
9381  4148
9382  4149
9383  414A
9384  414B
9385  414C
9386  414D
9387  414E
9388  414F
9389  4150
9390  4151
9391  4152
9392  4153
9393  4154
9394  4155
9395  4156
9396  4157
9397  4158
9398  4159
9399  415A
9400  415B
9401  415C
9402  415D
9403  415E
9404  415F
9405  4160
9406  4161
9407  4162
9408  4163
9409  4164
9410  4165
9411  4166
9412  4167
9413  4168
9414  4169
9415  416A
9416  416B
9417  416C
9418  416D
9419  416E
9420  416F
9421  4170
9422  4171
9423  4172
9424  4173
9425  4174
9426  4175
9427  4176
9428  4177
9429  4178
9430  4179
9431  417A
9432  417B
9433  417C
9434  417D
9435  417E
9436  417F
9437  4180
9438  4181
9439  4182
9440  4183
9441  4184
9442  4185
9443  4186
9444  4187
9445  4188
9446  4189
9447  418A
9448  418B
9449  418C
9450  418D
9451  418E
9452  418F
9453  4190
9454  4191
9455  4192
9456  4193
9457  4194
9458  4195
9459  4196
9460  4197
9461  4198
9462  4199
9463  419A
9464  419B
9465  419C
9466  419D
9467  419E
9468  419F
9469  41A0
9470  41A1
9471  41A2
9472  41A3
9473  41A4
9474  41A5
9475  41A6
9476  41A7
9477  41A8
9478  41A9
9479  41AA
9480  41AB
9481  41AC
9482  41AD
9483  41AE
9484  41AF
9485  41B0
9486  41B1
9487  41B2
9488  41B3
9489  41B4
9490  41B5
9491  41B6
9492  41B7
9493  41B8
9494  41B9
9495  41BA
9496  41BB
9497  41BC
9498  41BD
9499  41BE
9500  41BF
9501  41C0
9502  41C1
9503  41C2
9504  41C3
9505  41C4
9506  41C5
9507  41C6
9508  41C7
9509  41C8
9510  41C9
9511  41CA
9512  41CB
9513  41CC
9514  41CD
9515  41CE
9516  41CF
9517  41D0
9518  41D1
9519  41D2
9520  41D3
9521  41D4
9522  41D5
9523  41D6
9524  41D7
9525  41D8
9526  41D9
9527  41DA
9528  41DB
9529  41DC
9530  41DD
9531  41DE
9532  41DF
9533  41E0
9534  41E1
9535  41E2
9536  41E3
9537  41E4
9538  41E5
9539  41E6
9540  41E7
9541  41E8
9542  41E9
9543  41EA
9544  41EB
9545  41EC
9546  41ED
9547  41EE
9548  41EF
9549  41F0
9550  41F1
9551  41F2
9552  41F3
9553  41F4
9554  41F5
9555  41F6
9556  41F7
9557  41F8
9558  41F9
9559  41FA
9560  41FB
9561  41FC
9562  41FD
9563  41FE
9564  41FF
9565  4200
9566  4201
9567  4202
9568  4203
9569  4204
9570  4205
9571  4206
9572  4207
9573  4208
9574  4209
9575  420A
9576  420B
9577  420C
9578  420D
9579  420E
9580  420F
9581  4210
9582  4211
9583  4212
9584  4213
9585  4214
9586  4215
9587  4216
9588  4217
9589  4218
9590  4219
9591  421A
9592  421B
9593  421C
9594  421D
9595  421E
9596  421F
9597  4220
9598  4221
9599  4222
9600  4223
9601  4224
9602  4225
9603  4226
9604  4227
9605  4228
9606  4229
9607  422A
9608  422B
9609  422C
9610  422D
9611  422E
9612  422F
9613  4230
9614  4231
9615  4232
9616  4233
9617  4234
9618  4235
9619  4236
9620  4237
9621  4238
9622  4239
9623  423A
9624  423B
9625  423C
9626  423D
9627  423E
9628  423F
9629  4240
9630  4241
9631  4242
9632  4243
9633  4244
9634  4245
9635  4246
9636  4247
9637  4248
9638  4249
9639  424A
9640  424B
9641  424C
9642  424D
9643  424E
9644  424F
9645  4250
9646  4251
9647  4252
9648  4253
9649  4254
9650  4255
9651  4256
9652  4257
9653  4258
9654  4259
9655  425A
9656  425B
9657  425C
9658  425D
9659  425E
9660  425F
9661  4260
9662  4261
9663  4262
9664  4263
9665  4264
9666  4265
9667  4266
9668  4267
9669  4268
9670  4269
9671  426A
9672  426B
9673  426C
9674  426D
9675  426E
9676  426F
9677  4270
9678  4271
9679  4272
9680  4273
9681  4274
9682  4275
9683  4276
9684  4277
9685  4278
9686  4279
9687  427A
9688  427B
9689  427C
9690  427D
9691  427E
9692  427F
9693  4280
9694  4281
9695  4282
9696  4283
9697  4284
9698  4285
9699  4286
9700  4287
9701  4288
9702  4289
9703  428A
9704  428B
9705  428C
9706  428D
9707  428E
9708  428F
9709  4290
9710  4291
9711  4292
9712  4293
9713  4294
9714  4295
9715  4296
9716  4297
9717  4298
9718  4299
9719  429A
9720  429B
9721  429C
9722  429D
9723  429E
9724  429F
9725  42A0
9726  42A1
9727  42A2
9728  42A3
9729  42A4
9730  42A5
9731  42A6
9732  42A7
9733  42A8
9734  42A9
9735  42AA
9736  42AB
9737  42AC
9738  42AD
9739  42AE
9740  42AF
9741  42B0
9742  42B1
9743  42B2
9744  42B3
9745  42B4
9746  42B5
9747  42B6
9748  42B7
9749  42B8
9750  42B9
9751  42BA
9752  42BB
9753  42BC
9754  42BD
9755  42BE
9756  42BF
9757  42C0
9758  42C1
9759  42C2
9760  42C3
9761  42C4
9762  42C5
9763  42C6
9764  42C7
9765  42C8
9766  42C9
9767  42CA
9768  42CB
9769  42CC
9770  42CD
9771  42CE
9772  42CF
9773  42D0
9774  42D1
9775  42D2
9776  42D3
9777  42D4
9778  42D5
9779  42D6
9780  42D7
9781  42D8
9782  42D9
9783  42DA
9784  42DB
9785  42DC
9786  42DD
9787  42DE
9788  42DF
9789  42E0
9790  42E1
9791  42E2
9792  42E3
9793  42E4
9794  42E5
9795  42E6
9796  42E7
9797  42E8
9798  42E9
9799  42EA
9800  42EB
9801  42EC
9802  42ED
9803  42EE
9804  42EF
9805  42F0
9806  42F1
9807  42F2
9808  42F3
9809  42F4
9810  42F5
9811  42F6
9812  42F7
9813  42F8
9814  42F9
9815  42FA
9816  42FB
9817  42FC
9818  42FD
9819  42FE
9820  42FF
9821  4300
9822  4301
9823  4302
9824  4303
9825  4304
9826  4305
9827  4306
9828  4307
9829  4308
9830  4309
9831  430A
9832  430B
9833  430C
9834  430D
9835  430E
9836  430F
9837  4310
9838  4311
9839  4312
9840  4313
9841  4314
9842  4315
9843  4316
9844  4317
9845  4318
9846  4319
9847  431A
9848  431B
9849  431C
9850  431D
9851  431E
9852  431F
9853  4320
9854  4321
9855  4322
9856  4323
9857  4324
9858  4325
9859  4326
9860  4327
9861  4328
9862  4329
9863  432A
9864  432B
9865  432C
9866  432D
9867  432E
9868  432F
9869  4330
9870  4331
9871  4332
9872  4333
9873  4334
9874  4335
9875  4336
9876  4337
9877  4338
9878  4339
9879  433A
9880  433B
9881  433C
9882  433D
9883  433E
9884  433F
9885  4340
9886  4341
9887  4342
9888  4343
9889  4344
9890  4345
9891  4346
9892  4347
9893  4348
9894  4349
9895  434A
9896  434B
9897  434C
9898  434D
9899  434E
9900  434F
9901  4350
9902  4351
9903  4352
9904  4353
9905  4354
9906  4355
9907  4356
9908  4357
9909  4358
9910  4359
9911  435A
9912  435B
9913  435C
9914  435D
9915  435E
9916  435F
9917  4360
9918  4361
9919  4362
9920  4363
9921  4364
9922  4365
9923  4366
9924  4367
9925  4368
9926  4369
9927  436A
9928  436B
9929  436C
9930  436D
9931  436E
9932  436F
9933  4370
9934  4371
9935  4372
9936  4373
9937  4374
9938  4375
9939  4376
9940  4377
9941  4378
9942  4379
9943  437A
9944  437B
9945  437C
9946  437D
9947  437E
9948  437F
9949  4380
9950  4381
9951  4382
9952  4383
9953  4384
9954  4385
9955  4386
9956  4387
9957  4388
9958  4389
9959  438A
9960  438B
9961  438C
9962  438D
9963  438E
9964  438F
9965  4390
9966  4391
9967  4392
9968  4393
9969  4394
9970  4395
9971  4396
9972  4397
9973  4398
9974  4399
9975  439A
9976  439B
9977  439C
9978  439D
9979  439E
9980  439F
9981  43A0
9982  43A1
9983  43A2
9984  43A3
9985  43A4
9986  43A5
9987  43A6
9988  43A7
9989  43A8
9990  43A9
9991  43AA
9992  43AB
9993  43AC
9994  43AD
9995  43AE
9996  43AF
9997  43B0
9998  43B1
9999  43B2
10000  43B3
10001  43B4
10002  43B5
10003  43B6
10004  43B7
10005  43B8
10006  43B9
10007  43BA
10008  43BB
10009  43BC
10010  43BD
10011  43BE
10012  43BF
10013  43C0
10014  43C1
10015  43C2
10016  43C3
10017  43C4
10018  43C5
10019  43C6
10020  43C7
10021  43C8
10022  43C9
10023  43CA
10024  43CB
10025  43CC
10026  43CD
10027  43CE
10028  43CF
10029  43D0
10030  43D1
10031  43D2
10032  43D3
10033  43D4
10034  43D5
10035  43D6
10036  43D7
10037  43D8
10038  43D9
10039  43DA
10040  43DB
10041  43DC
10042  43DD
10043  43DE
10044  43DF
10045  43E0
10046  43E1
10047  43E2
10048  43E3
10049  43E4
10050  43E5
10051  43E6
10052  43E7
10053  43E8
10054  43E9
10055  43EA
10056  43EB
10057  43EC
10058  43ED
10059  43EE
10060  43EF
10061  43F0
10062  43F1
10063  43F2
10064  43F3
10065  43F4
10066  43F5
10067  43F6
10068  43F7
10069  43F8
10070  43F9
10071  43FA
10072  43FB
10073  43FC
10074  43FD
10075  43FE
10076  43FF
10077  4400
10078  4401
10079  4402
10080  4403
10081  4404
10082  4405
10083  4406
10084  4407
10085  4408
10086  4409
10087  440A
10088  440B
10089  440C
10090  440D
10091  440E
10092  440F
10093  4410
10094  4411
10095  4412
10096  4413
10097  4414
10098  4415
10099  4416
10100  4417
10101  4418
10102  4419
10103  441A
10104  441B
10105  441C
10106  441D
10107  441E
10108  441F
10109  4420
10110  4421
10111  4422
10112  4423
10113  4424
10114  4425
10115  4426
10116  4427
10117  4428
10118  4429
10119  442A
10120  442B
10121  442C
10122  442D
10123  442E
10124  442F
10125  4430
10126  4431
10127  4432
10128  4433
10129  4434
10130  4435
10131  4436
10132  4437
10133  4438
10134  4439
10135  443A
10136  443B
10137  443C
10138  443D
10139  443E
10140  443F
10141  4440
10142  4441
10143  4442
10144  4443
10145  4444
10146  4445
10147  4446
10148  4447
10149  4448
10150  4449
10151  444A
10152  444B
10153  444C
10154  444D
10155  444E
10156  444F
10157  4450
10158  4451
10159  4452
10160  4453
10161  4454
10162  4455
10163  4456
10164  4457
10165  4458
10166  4459
10167  445A
10168  445B
10169  445C
10170  445D
10171  445E
10172  445F
10173  4460
10174  4461
10175  4462
10176  4463
10177  4464
10178  4465
10179  4466
10180  4467
10181  4468
10182  4469
10183  446A
10184  446B
10185  446C
10186  446D
10187  446E
10188  446F
10189  4470
10190  4471
10191  4472
10192  4473
10193  4474
10194  4475
10195  4476
10196  4477
10197  4478
10198  4479
10199  447A
10200  447B
10201  447C
10202  447D
10203  447E
10204  447F
10205  4480
10206  4481
10207  4482
10208  4483
10209  4484
10210  4485
10211  4486
10212  4487
10213  4488
10214  4489
10215  448A
10216  448B
10217  448C
10218  448D
10219  448E
10220  448F
10221  4490
10222  4491
10223  4492
10224  4493
10225  4494
10226  4495
10227  4496
10228  4497
10229  4498
10230  4499
10231  449A
10232  449B
10233  449C
10234  449D
10235  449E
10236  449F
10237  44A0
10238  44A1
10239  44A2
10240  44A3
10241  44A4
10242  44A5
10243  44A6
10244  44A7
10245  44A8
10246  44A9
10247  44AA
10248  44AB
10249  44AC
10250  44AD
10251  44AE
10252  44AF
10253  44B0
10254  44B1
10255  44B2
10256  44B3
10257  44B4
10258  44B5
10259  44B6
10260  44B7
10261  44B8
10262  44B9
10263  44BA
10264  44BB
10265  44BC
10266  44BD
10267  44BE
10268  44BF
10269  44C0
10270  44C1
10271  44C2
10272  44C3
10273  44C4
10274  44C5
10275  44C6
10276  44C7
10277  44C8
10278  44C9
10279  44CA
10280  44CB
10281  44CC
10282  44CD
10283  44CE
10284  44CF
10285  44D0
10286  44D1
10287  44D2
10288  44D3
10289  44D4
10290  44D5
10291  44D6
10292  44D7
10293  44D8
10294  44D9
10295  44DA
10296  44DB
10297  44DC
10298  44DD
10299  44DE
10300  44DF
10301  44E0
10302  44E1
10303  44E2
10304  44E3
10305  44E4
10306  44E5
10307  44E6
10308  44E7
10309  44E8
10310  44E9
10311  44EA
10312  44EB
10313  44EC
10314  44ED
10315  44EE
10316  44EF
10317  44F0
10318  44F1
10319  44F2
10320  44F3
10321  44F4
10322  44F5
10323  44F6
10324  44F7
10325  44F8
10326  44F9
10327  44FA
10328  44FB
10329  44FC
10330  44FD
10331  44FE
10332  44FF
10333  4500
10334  4501
10335  4502
10336  4503
10337  4504
10338  4505
10339  4506
10340  4507
10341  4508
10342  4509
10343  450A
10344  450B
10345  450C
10346  450D
10347  450E
10348  450F
10349  4510
10350  4511
10351  4512
10352  4513
10353  4514
10354  4515
10355  4516
10356  4517
10357  4518
10358  4519
10359  451A
10360  451B
10361  451C
10362  451D
10363  451E
10364  451F
10365  4520
10366  4521
10367  4522
10368  4523
10369  4524
10370  4525
10371  4526
10372  4527
10373  4528
10374  4529
10375  452A
10376  452B
10377  452C
10378  452D
10379  452E
10380  452F
10381  4530
10382  4531
10383  4532
10384  4533
10385  4534
10386  4535
10387  4536
10388  4537
10389  4538
10390  4539
10391  453A
10392  453B
10393  453C
10394  453D
10395  453E
10396  453F
10397  4540
10398  4541
10399  4542
10400  4543
10401  4544
10402  4545
10403  4546
10404  4547
10405  4548
10406  4549
10407  454A
10408  454B
10409  454C
10410  454D
10411  454E
10412  454F
10413  4550
10414  4551
10415  4552
10416  4553
10417  4554
10418  4555
10419  4556
10420  4557
10421  4558
10422  4559
10423  455A
10424  455B
10425  455C
10426  455D
10427  455E
10428  455F
10429  4560
10430  4561
10431  4562
10432  4563
10433  4564
10434  4565
10435  4566
10436  4567
10437  4568
10438  4569
10439  456A
10440  456B
10441  456C
10442  456D
10443  456E
10444  456F
10445  4570
10446  4571
10447  4572
10448  4573
10449  4574
10450  4575
10451  4576
10452  4577
10453  4578
10454  4579
10455  457A
10456  457B
10457  457C
10458  457D
10459  457E
10460  457F
10461  4580
10462  4581
10463  4582
10464  4583
10465  4584
10466  4585
10467  4586
10468  4587
10469  4588
10470  4589
10471  458A
10472  458B
10473  458C
10474  458D
10475  458E
10476  458F
10477  4590
10478  4591
10479  4592
10480  4593
10481  4594
10482  4595
10483  4596
10484  4597
10485  4598
10486  4599
10487  459A
10488  459B
10489  459C
10490  459D
10491  459E
10492  459F
10493  45A0
10494  45A1
10495  45A2
10496  45A3
10497  45A4
10498  45A5
10499  45A6
10500  45A7
10501  45A8
10502  45A9
10503  45AA
10504  45AB
10505  45AC
10506  45AD
10507  45AE
10508  45AF
10509  45B0
10510  45B1
10511  45B2
10512  45B3
10513  45B4
10514  45B5
10515  45B6
10516  45B7
10517  45B8
10518  45B9
10519  45BA
10520  45BB
10521  45BC
10522  45BD
10523  45BE
10524  45BF
10525  45C0
10526  45C1
10527  45C2
10528  45C3
10529  45C4
10530  45C5
10531  45C6
10532  45C7
10533  45C8
10534  45C9
10535  45CA
10536  45CB
10537  45CC
10538  45CD
10539  45CE
10540  45CF
10541  45D0
10542  45D1
10543  45D2
10544  45D3
10545  45D4
10546  45D5
10547  45D6
10548  45D7
10549  45D8
10550  45D9
10551  45DA
10552  45DB
10553  45DC
10554  45DD
10555  45DE
10556  45DF
10557  45E0
10558  45E1
10559  45E2
10560  45E3
10561  45E4
10562  45E5
10563  45E6
10564  45E7
10565  45E8
10566  45E9
10567  45EA
10568  45EB
10569  45EC
10570  45ED
10571  45EE
10572  45EF
10573  45F0
10574  45F1
10575  45F2
10576  45F3
10577  45F4
10578  45F5
10579  45F6
10580  45F7
10581  45F8
10582  45F9
10583  45FA
10584  45FB
10585  45FC
10586  45FD
10587  45FE
10588  45FF
10589  4600
10590  4601
10591  4602
10592  4603
10593  4604
10594  4605
10595  4606
10596  4607
10597  4608
10598  4609
10599  460A
10600  460B
10601  460C
10602  460D
10603  460E
10604  460F
10605  4610
10606  4611
10607  4612
10608  4613
10609  4614
10610  4615
10611  4616
10612  4617
10613  4618
10614  4619
10615  461A
10616  461B
10617  461C
10618  461D
10619  461E
10620  461F
10621  4620
10622  4621
10623  4622
10624  4623
10625  4624
10626  4625
10627  4626
10628  4627
10629  4628
10630  4629
10631  462A
10632  462B
10633  462C
10634  462D
10635  462E
10636  462F
10637  4630
10638  4631
10639  4632
10640  4633
10641  4634
10642  4635
10643  4636
10644  4637
10645  4638
10646  4639
10647  463A
10648  463B
10649  463C
10650  463D
10651  463E
10652  463F
10653  4640
10654  4641
10655  4642
10656  4643
10657  4644
10658  4645
10659  4646
10660  4647
10661  4648
10662  4649
10663  464A
10664  464B
10665  464C
10666  464D
10667  464E
10668  464F
10669  4650
10670  4651
10671  4652
10672  4653
10673  4654
10674  4655
10675  4656
10676  4657
10677  4658
10678  4659
10679  465A
10680  465B
10681  465C
10682  465D
10683  465E
10684  465F
10685  4660
10686  4661
10687  4662
10688  4663
10689  4664
10690  4665
10691  4666
10692  4667
10693  4668
10694  4669
10695  466A
10696  466B
10697  466C
10698  466D
10699  466E
10700  466F
10701  4670
10702  4671
10703  4672
10704  4673
10705  4674
10706  4675
10707  4676
10708  4677
10709  4678
10710  4679
10711  467A
10712  467B
10713  467C
10714  467D
10715  467E
10716  467F
10717  4680
10718  4681
10719  4682
10720  4683
10721  4684
10722  4685
10723  4686
10724  4687
10725  4688
10726  4689
10727  468A
10728  468B
10729  468C
10730  468D
10731  468E
10732  468F
10733  4690
10734  4691
10735  4692
10736  4693
10737  4694
10738  4695
10739  4696
10740  4697
10741  4698
10742  4699
10743  469A
10744  469B
10745  469C
10746  469D
10747  469E
10748  469F
10749  46A0
10750  46A1
10751  46A2
10752  46A3
10753  46A4
10754  46A5
10755  46A6
10756  46A7
10757  46A8
10758  46A9
10759  46AA
10760  46AB
10761  46AC
10762  46AD
10763  46AE
10764  46AF
10765  46B0
10766  46B1
10767  46B2
10768  46B3
10769  46B4
10770  46B5
10771  46B6
10772  46B7
10773  46B8
10774  46B9
10775  46BA
10776  46BB
10777  46BC
10778  46BD
10779  46BE
10780  46BF
10781  46C0
10782  46C1
10783  46C2
10784  46C3
10785  46C4
10786  46C5
10787  46C6
10788  46C7
10789  46C8
10790  46C9
10791  46CA
10792  46CB
10793  46CC
10794  46CD
10795  46CE
10796  46CF
10797  46D0
10798  46D1
10799  46D2
10800  46D3
10801  46D4
10802  46D5
10803  46D6
10804  46D7
10805  46D8
10806  46D9
10807  46DA
10808  46DB
10809  46DC
10810  46DD
10811  46DE
10812  46DF
10813  46E0
10814  46E1
10815  46E2
10816  46E3
10817  46E4
10818  46E5
10819  46E6
10820  46E7
10821  46E8
10822  46E9
10823  46EA
10824  46EB
10825  46EC
10826  46ED
10827  46EE
10828  46EF
10829  46F0
10830  46F1
10831  46F2
10832  46F3
10833  46F4
10834  46F5
10835  46F6
10836  46F7
10837  46F8
10838  46F9
10839  46FA
10840  46FB
10841  46FC
10842  46FD
10843  46FE
10844  46FF
10845  4700
10846  4701
10847  4702
10848  4703
10849  4704
10850  4705
10851  4706
10852  4707
10853  4708
10854  4709
10855  470A
10856  470B
10857  470C
10858  470D
10859  470E
10860  470F
10861  4710
10862  4711
10863  4712
10864  4713
10865  4714
10866  4715
10867  4716
10868  4717
10869  4718
10870  4719
10871  471A
10872  471B
10873  471C
10874  471D
10875  471E
10876  471F
10877  4720
10878  4721
10879  4722
10880  4723
10881  4724
10882  4725
10883  4726
10884  4727
10885  4728
10886  4729
10887  472A
10888  472B
10889  472C
10890  472D
10891  472E
10892  472F
10893  4730
10894  4731
10895  4732
10896  4733
10897  4734
10898  4735
10899  4736
10900  4737
10901  4738
10902  4739
10903  473A
10904  473B
10905  473C
10906  473D
10907  473E
10908  473F
10909  4740
10910  4741
10911  4742
10912  4743
10913  4744
10914  4745
10915  4746
10916  4747
10917  4748
10918  4749
10919  474A
10920  474B
10921  474C
10922  474D
10923  474E
10924  474F
10925  4750
10926  4751
10927  4752
10928  4753
10929  4754
10930  4755
10931  4756
10932  4757
10933  4758
10934  4759
10935  475A
10936  475B
10937  475C
10938  475D
10939  475E
10940  475F
10941  4760
10942  4761
10943  4762
10944  4763
10945  4764
10946  4765
10947  4766
10948  4767
10949  4768
10950  4769
10951  476A
10952  476B
10953  476C
10954  476D
10955  476E
10956  476F
10957  4770
10958  4771
10959  4772
10960  4773
10961  4774
10962  4775
10963  4776
10964  4777
10965  4778
10966  4779
10967  477A
10968  477B
10969  477C
10970  477D
10971  477E
10972  477F
10973  4780
10974  4781
10975  4782
10976  4783
10977  4784
10978  4785
10979  4786
10980  4787
10981  4788
10982  4789
10983  478A
10984  478B
10985  478C
10986  478D
10987  478E
10988  478F
10989  4790
10990  4791
10991  4792
10992  4793
10993  4794
10994  4795
10995  4796
10996  4797
10997  4798
10998  4799
10999  479A
11000  479B
11001  479C
11002  479D
11003  479E
11004  479F
11005  47A0
11006  47A1
11007  47A2
11008  47A3
11009  47A4
11010  47A5
11011  47A6
11012  47A7
11013  47A8
11014  47A9
11015  47AA
11016  47AB
11017  47AC
11018  47AD
11019  47AE
11020  47AF
11021  47B0
11022  47B1
11023  47B2
11024  47B3
11025  47B4
11026  47B5
11027  47B6
11028  47B7
11029  47B8
11030  47B9
11031  47BA
11032  47BB
11033  47BC
11034  47BD
11035  47BE
11036  47BF
11037  47C0
11038  47C1
11039  47C2
11040  47C3
11041  47C4
11042  47C5
11043  47C6
11044  47C7
11045  47C8
11046  47C9
11047  47CA
11048  47CB
11049  47CC
11050  47CD
11051  47CE
11052  47CF
11053  47D0
11054  47D1
11055  47D2
11056  47D3
11057  47D4
11058  47D5
11059  47D6
11060  47D7
11061  47D8
11062  47D9
11063  47DA
11064  47DB
11065  47DC
11066  47DD
11067  47DE
11068  47DF
11069  47E0
11070  47E1
11071  47E2
11072  47E3
11073  47E4
11074  47E5
11075  47E6
11076  47E7
11077  47E8
11078  47E9
11079  47EA
11080  47EB
11081  47EC
11082  47ED
11083  47EE
11084  47EF
11085  47F0
11086  47F1
11087  47F2
11088  47F3
11089  47F4
11090  47F5
11091  47F6
11092  47F7
11093  47F8
11094  47F9
11095  47FA
11096  47FB
11097  47FC
11098  47FD
11099  47FE
11100  47FF
11101  4800
11102  4801
11103  4802
11104  4803
11105  4804
11106  4805
11107  4806
11108  4807
11109  4808
11110  4809
11111  480A
11112  480B
11113  480C
11114  480D
11115  480E
11116  480F
11117  4810
11118  4811
11119  4812
11120  4813
11121  4814
11122  4815
11123  4816
11124  4817
11125  4818
11126  4819
11127  481A
11128  481B
11129  481C
11130  481D
11131  481E
11132  481F
11133  4820
11134  4821
11135  4822
11136  4823
11137  4824
11138  4825
11139  4826
11140  4827
11141  4828
11142  4829
11143  482A
11144  482B
11145  482C
11146  482D
11147  482E
11148  482F
11149  4830
11150  4831
11151  4832
11152  4833
11153  4834
11154  4835
11155  4836
11156  4837
11157  4838
11158  4839
11159  483A
11160  483B
11161  483C
11162  483D
11163  483E
11164  483F
11165  4840
11166  4841
11167  4842
11168  4843
11169  4844
11170  4845
11171  4846
11172  4847
11173  4848
11174  4849
11175  484A
11176  484B
11177  484C
11178  484D
11179  484E
11180  484F
11181  4850
11182  4851
11183  4852
11184  4853
11185  4854
11186  4855
11187  4856
11188  4857
11189  4858
11190  4859
11191  485A
11192  485B
11193  485C
11194  485D
11195  485E
11196  485F
11197  4860
11198  4861
11199  4862
11200  4863
11201  4864
11202  4865
11203  4866
11204  4867
11205  4868
11206  4869
11207  486A
11208  486B
11209  486C
11210  486D
11211  486E
11212  486F
11213  4870
11214  4871
11215  4872
11216  4873
11217  4874
11218  4875
11219  4876
11220  4877
11221  4878
11222  4879
11223  487A
11224  487B
11225  487C
11226  487D
11227  487E
11228  487F
11229  4880
11230  4881
11231  4882
11232  4883
11233  4884
11234  4885
11235  4886
11236  4887
11237  4888
11238  4889
11239  488A
11240  488B
11241  488C
11242  488D
11243  488E
11244  488F
11245  4890
11246  4891
11247  4892
11248  4893
11249  4894
11250  4895
11251  4896
11252  4897
11253  4898
11254  4899
11255  489A
11256  489B
11257  489C
11258  489D
11259  489E
11260  489F
11261  48A0
11262  48A1
11263  48A2
11264  48A3
11265  48A4
11266  48A5
11267  48A6
11268  48A7
11269  48A8
11270  48A9
11271  48AA
11272  48AB
11273  48AC
11274  48AD
11275  48AE
11276  48AF
11277  48B0
11278  48B1
11279  48B2
11280  48B3
11281  48B4
11282  48B5
11283  48B6
11284  48B7
11285  48B8
11286  48B9
11287  48BA
11288  48BB
11289  48BC
11290  48BD
11291  48BE
11292  48BF
11293  48C0
11294  48C1
11295  48C2
11296  48C3
11297  48C4
11298  48C5
11299  48C6
11300  48C7
11301  48C8
11302  48C9
11303  48CA
11304  48CB
11305  48CC
11306  48CD
11307  48CE
11308  48CF
11309  48D0
11310  48D1
11311  48D2
11312  48D3
11313  48D4
11314  48D5
11315  48D6
11316  48D7
11317  48D8
11318  48D9
11319  48DA
11320  48DB
11321  48DC
11322  48DD
11323  48DE
11324  48DF
11325  48E0
11326  48E1
11327  48E2
11328  48E3
11329  48E4
11330  48E5
11331  48E6
11332  48E7
11333  48E8
11334  48E9
11335  48EA
11336  48EB
11337  48EC
11338  48ED
11339  48EE
11340  48EF
11341  48F0
11342  48F1
11343  48F2
11344  48F3
11345  48F4
11346  48F5
11347  48F6
11348  48F7
11349  48F8
11350  48F9
11351  48FA
11352  48FB
11353  48FC
11354  48FD
11355  48FE
11356  48FF
11357  4900
11358  4901
11359  4902
11360  4903
11361  4904
11362  4905
11363  4906
11364  4907
11365  4908
11366  4909
11367  490A
11368  490B
11369  490C
11370  490D
11371  490E
11372  490F
11373  4910
11374  4911
11375  4912
11376  4913
11377  4914
11378  4915
11379  4916
11380  4917
11381  4918
11382  4919
11383  491A
11384  491B
11385  491C
11386  491D
11387  491E
11388  491F
11389  4920
11390  4921
11391  4922
11392  4923
11393  4924
11394  4925
11395  4926
11396  4927
11397  4928
11398  4929
11399  492A
11400  492B
11401  492C
11402  492D
11403  492E
11404  492F
11405  4930
11406  4931
11407  4932
11408  4933
11409  4934
11410  4935
11411  4936
11412  4937
11413  4938
11414  4939
11415  493A
11416  493B
11417  493C
11418  493D
11419  493E
11420  493F
11421  4940
11422  4941
11423  4942
11424  4943
11425  4944
11426  4945
11427  4946
11428  4947
11429  4948
11430  4949
11431  494A
11432  494B
11433  494C
11434  494D
11435  494E
11436  494F
11437  4950
11438  4951
11439  4952
11440  4953
11441  4954
11442  4955
11443  4956
11444  4957
11445  4958
11446  4959
11447  495A
11448  495B
11449  495C
11450  495D
11451  495E
11452  495F
11453  4960
11454  4961
11455  4962
11456  4963
11457  4964
11458  4965
11459  4966
11460  4967
11461  4968
11462  4969
11463  496A
11464  496B
11465  496C
11466  496D
11467  496E
11468  496F
11469  4970
11470  4971
11471  4972
11472  4973
11473  4974
11474  4975
11475  4976
11476  4977
11477  4978
11478  4979
11479  497A
11480  497B
11481  497C
11482  497D
11483  497E
11484  497F
11485  4980
11486  4981
11487  4982
11488  4983
11489  4984
11490  4985
11491  4986
11492  4987
11493  4988
11494  4989
11495  498A
11496  498B
11497  498C
11498  498D
11499  498E
11500  498F
11501  4990
11502  4991
11503  4992
11504  4993
11505  4994
11506  4995
11507  4996
11508  4997
11509  4998
11510  4999
11511  499A
11512  499B
11513  499C
11514  499D
11515  499E
11516  499F
11517  49A0
11518  49A1
11519  49A2
11520  49A3
11521  49A4
11522  49A5
11523  49A6
11524  49A7
11525  49A8
11526  49A9
11527  49AA
11528  49AB
11529  49AC
11530  49AD
11531  49AE
11532  49AF
11533  49B0
11534  49B1
11535  49B2
11536  49B3
11537  49B4
11538  49B5
11539  49B6
11540  49B7
11541  49B8
11542  49B9
11543  49BA
11544  49BB
11545  49BC
11546  49BD
11547  49BE
11548  49BF
11549  49C0
11550  49C1
11551  49C2
11552  49C3
11553  49C4
11554  49C5
11555  49C6
11556  49C7
11557  49C8
11558  49C9
11559  49CA
11560  49CB
11561  49CC
11562  49CD
11563  49CE
11564  49CF
11565  49D0
11566  49D1
11567  49D2
11568  49D3
11569  49D4
11570  49D5
11571  49D6
11572  49D7
11573  49D8
11574  49D9
11575  49DA
11576  49DB
11577  49DC
11578  49DD
11579  49DE
11580  49DF
11581  49E0
11582  49E1
11583  49E2
11584  49E3
11585  49E4
11586  49E5
11587  49E6
11588  49E7
11589  49E8
11590  49E9
11591  49EA
11592  49EB
11593  49EC
11594  49ED
11595  49EE
11596  49EF
11597  49F0
11598  49F1
11599  49F2
11600  49F3
11601  49F4
11602  49F5
11603  49F6
11604  49F7
11605  49F8
11606  49F9
11607  49FA
11608  49FB
11609  49FC
11610  49FD
11611  49FE
11612  49FF
11613  4A00
11614  4A01
11615  4A02
11616  4A03
11617  4A04
11618  4A05
11619  4A06
11620  4A07
11621  4A08
11622  4A09
11623  4A0A
11624  4A0B
11625  4A0C
11626  4A0D
11627  4A0E
11628  4A0F
11629  4A10
11630  4A11
11631  4A12
11632  4A13
11633  4A14
11634  4A15
11635  4A16
11636  4A17
11637  4A18
11638  4A19
11639  4A1A
11640  4A1B
11641  4A1C
11642  4A1D
11643  4A1E
11644  4A1F
11645  4A20
11646  4A21
11647  4A22
11648  4A23
11649  4A24
11650  4A25
11651  4A26
11652  4A27
11653  4A28
11654  4A29
11655  4A2A
11656  4A2B
11657  4A2C
11658  4A2D
11659  4A2E
11660  4A2F
11661  4A30
11662  4A31
11663  4A32
11664  4A33
11665  4A34
11666  4A35
11667  4A36
11668  4A37
11669  4A38
11670  4A39
11671  4A3A
11672  4A3B
11673  4A3C
11674  4A3D
11675  4A3E
11676  4A3F
11677  4A40
11678  4A41
11679  4A42
11680  4A43
11681  4A44
11682  4A45
11683  4A46
11684  4A47
11685  4A48
11686  4A49
11687  4A4A
11688  4A4B
11689  4A4C
11690  4A4D
11691  4A4E
11692  4A4F
11693  4A50
11694  4A51
11695  4A52
11696  4A53
11697  4A54
11698  4A55
11699  4A56
11700  4A57
11701  4A58
11702  4A59
11703  4A5A
11704  4A5B
11705  4A5C
11706  4A5D
11707  4A5E
11708  4A5F
11709  4A60
11710  4A61
11711  4A62
11712  4A63
11713  4A64
11714  4A65
11715  4A66
11716  4A67
11717  4A68
11718  4A69
11719  4A6A
11720  4A6B
11721  4A6C
11722  4A6D
11723  4A6E
11724  4A6F
11725  4A70
11726  4A71
11727  4A72
11728  4A73
11729  4A74
11730  4A75
11731  4A76
11732  4A77
11733  4A78
11734  4A79
11735  4A7A
11736  4A7B
11737  4A7C
11738  4A7D
11739  4A7E
11740  4A7F
11741  4A80
11742  4A81
11743  4A82
11744  4A83
11745  4A84
11746  4A85
11747  4A86
11748  4A87
11749  4A88
11750  4A89
11751  4A8A
11752  4A8B
11753  4A8C
11754  4A8D
11755  4A8E
11756  4A8F
11757  4A90
11758  4A91
11759  4A92
11760  4A93
11761  4A94
11762  4A95
11763  4A96
11764  4A97
11765  4A98
11766  4A99
11767  4A9A
11768  4A9B
11769  4A9C
11770  4A9D
11771  4A9E
11772  4A9F
11773  4AA0
11774  4AA1
11775  4AA2
11776  4AA3
11777  4AA4
11778  4AA5
11779  4AA6
11780  4AA7
11781  4AA8
11782  4AA9
11783  4AAA
11784  4AAB
11785  4AAC
11786  4AAD
11787  4AAE
11788  4AAF
11789  4AB0
11790  4AB1
11791  4AB2
11792  4AB3
11793  4AB4
11794  4AB5
11795  4AB6
11796  4AB7
11797  4AB8
11798  4AB9
11799  4ABA
11800  4ABB
11801  4ABC
11802  4ABD
11803  4ABE
11804  4ABF
11805  4AC0
11806  4AC1
11807  4AC2
11808  4AC3
11809  4AC4
11810  4AC5
11811  4AC6
11812  4AC7
11813  4AC8
11814  4AC9
11815  4ACA
11816  4ACB
11817  4ACC
11818  4ACD
11819  4ACE
11820  4ACF
11821  4AD0
11822  4AD1
11823  4AD2
11824  4AD3
11825  4AD4
11826  4AD5
11827  4AD6
11828  4AD7
11829  4AD8
11830  4AD9
11831  4ADA
11832  4ADB
11833  4ADC
11834  4ADD
11835  4ADE
11836  4ADF
11837  4AE0
11838  4AE1
11839  4AE2
11840  4AE3
11841  4AE4
11842  4AE5
11843  4AE6
11844  4AE7
11845  4AE8
11846  4AE9
11847  4AEA
11848  4AEB
11849  4AEC
11850  4AED
11851  4AEE
11852  4AEF
11853  4AF0
11854  4AF1
11855  4AF2
11856  4AF3
11857  4AF4
11858  4AF5
11859  4AF6
11860  4AF7
11861  4AF8
11862  4AF9
11863  4AFA
11864  4AFB
11865  4AFC
11866  4AFD
11867  4AFE
11868  4AFF
11869  4B00
11870  4B01
11871  4B02
11872  4B03
11873  4B04
11874  4B05
11875  4B06
11876  4B07
11877  4B08
11878  4B09
11879  4B0A
11880  4B0B
11881  4B0C
11882  4B0D
11883  4B0E
11884  4B0F
11885  4B10
11886  4B11
11887  4B12
11888  4B13
11889  4B14
11890  4B15
11891  4B16
11892  4B17
11893  4B18
11894  4B19
11895  4B1A
11896  4B1B
11897  4B1C
11898  4B1D
11899  4B1E
11900  4B1F
11901  4B20
11902  4B21
11903  4B22
11904  4B23
11905  4B24
11906  4B25
11907  4B26
11908  4B27
11909  4B28
11910  4B29
11911  4B2A
11912  4B2B
11913  4B2C
11914  4B2D
11915  4B2E
11916  4B2F
11917  4B30
11918  4B31
11919  4B32
11920  4B33
11921  4B34
11922  4B35
11923  4B36
11924  4B37
11925  4B38
11926  4B39
11927  4B3A
11928  4B3B
11929  4B3C
11930  4B3D
11931  4B3E
11932  4B3F
11933  4B40
11934  4B41
11935  4B42
11936  4B43
11937  4B44
11938  4B45
11939  4B46
11940  4B47
11941  4B48
11942  4B49
11943  4B4A
11944  4B4B
11945  4B4C
11946  4B4D
11947  4B4E
11948  4B4F
11949  4B50
11950  4B51
11951  4B52
11952  4B53
11953  4B54
11954  4B55
11955  4B56
11956  4B57
11957  4B58
11958  4B59
11959  4B5A
11960  4B5B
11961  4B5C
11962  4B5D
11963  4B5E
11964  4B5F
11965  4B60
11966  4B61
11967  4B62
11968  4B63
11969  4B64
11970  4B65
11971  4B66
11972  4B67
11973  4B68
11974  4B69
11975  4B6A
11976  4B6B
11977  4B6C
11978  4B6D
11979  4B6E
11980  4B6F
11981  4B70
11982  4B71
11983  4B72
11984  4B73
11985  4B74
11986  4B75
11987  4B76
11988  4B77
11989  4B78
11990  4B79
11991  4B7A
11992  4B7B
11993  4B7C
11994  4B7D
11995  4B7E
11996  4B7F
11997  4B80
11998  4B81
11999  4B82
12000  4B83
12001  4B84
12002  4B85
12003  4B86
12004  4B87
12005  4B88
12006  4B89
12007  4B8A
12008  4B8B
12009  4B8C
12010  4B8D
12011  4B8E
12012  4B8F
12013  4B90
12014  4B91
12015  4B92
12016  4B93
12017  4B94
12018  4B95
12019  4B96
12020  4B97
12021  4B98
12022  4B99
12023  4B9A
12024  4B9B
12025  4B9C
12026  4B9D
12027  4B9E
12028  4B9F
12029  4BA0
12030  4BA1
12031  4BA2
12032  4BA3
12033  4BA4
12034  4BA5
12035  4BA6
12036  4BA7
12037  4BA8
12038  4BA9
12039  4BAA
12040  4BAB
12041  4BAC
12042  4BAD
12043  4BAE
12044  4BAF
12045  4BB0
12046  4BB1
12047  4BB2
12048  4BB3
12049  4BB4
12050  4BB5
12051  4BB6
12052  4BB7
12053  4BB8
12054  4BB9
12055  4BBA
12056  4BBB
12057  4BBC
12058  4BBD
12059  4BBE
12060  4BBF
12061  4BC0
12062  4BC1
12063  4BC2
12064  4BC3
12065  4BC4
12066  4BC5
12067  4BC6
12068  4BC7
12069  4BC8
12070  4BC9
12071  4BCA
12072  4BCB
12073  4BCC
12074  4BCD
12075  4BCE
12076  4BCF
12077  4BD0
12078  4BD1
12079  4BD2
12080  4BD3
12081  4BD4
12082  4BD5
12083  4BD6
12084  4BD7
12085  4BD8
12086  4BD9
12087  4BDA
12088  4BDB
12089  4BDC
12090  4BDD
12091  4BDE
12092  4BDF
12093  4BE0
12094  4BE1
12095  4BE2
12096  4BE3
12097  4BE4
12098  4BE5
12099  4BE6
12100  4BE7
12101  4BE8
12102  4BE9
12103  4BEA
12104  4BEB
12105  4BEC
12106  4BED
12107  4BEE
12108  4BEF
12109  4BF0
12110  4BF1
12111  4BF2
12112  4BF3
12113  4BF4
12114  4BF5
12115  4BF6
12116  4BF7
12117  4BF8
12118  4BF9
12119  4BFA
12120  4BFB
12121  4BFC
12122  4BFD
12123  4BFE
12124  4BFF
12125  4C00
12126  4C01
12127  4C02
12128  4C03
12129  4C04
12130  4C05
12131  4C06
12132  4C07
12133  4C08
12134  4C09
12135  4C0A
12136  4C0B
12137  4C0C
12138  4C0D
12139  4C0E
12140  4C0F
12141  4C10
12142  4C11
12143  4C12
12144  4C13
12145  4C14
12146  4C15
12147  4C16
12148  4C17
12149  4C18
12150  4C19
12151  4C1A
12152  4C1B
12153  4C1C
12154  4C1D
12155  4C1E
12156  4C1F
12157  4C20
12158  4C21
12159  4C22
12160  4C23
12161  4C24
12162  4C25
12163  4C26
12164  4C27
12165  4C28
12166  4C29
12167  4C2A
12168  4C2B
12169  4C2C
12170  4C2D
12171  4C2E
12172  4C2F
12173  4C30
12174  4C31
12175  4C32
12176  4C33
12177  4C34
12178  4C35
12179  4C36
12180  4C37
12181  4C38
12182  4C39
12183  4C3A
12184  4C3B
12185  4C3C
12186  4C3D
12187  4C3E
12188  4C3F
12189  4C40
12190  4C41
12191  4C42
12192  4C43
12193  4C44
12194  4C45
12195  4C46
12196  4C47
12197  4C48
12198  4C49
12199  4C4A
12200  4C4B
12201  4C4C
12202  4C4D
12203  4C4E
12204  4C4F
12205  4C50
12206  4C51
12207  4C52
12208  4C53
12209  4C54
12210  4C55
12211  4C56
12212  4C57
12213  4C58
12214  4C59
12215  4C5A
12216  4C5B
12217  4C5C
12218  4C5D
12219  4C5E
12220  4C5F
12221  4C60
12222  4C61
12223  4C62
12224  4C63
12225  4C64
12226  4C65
12227  4C66
12228  4C67
12229  4C68
12230  4C69
12231  4C6A
12232  4C6B
12233  4C6C
12234  4C6D
12235  4C6E
12236  4C6F
12237  4C70
12238  4C71
12239  4C72
12240  4C73
12241  4C74
12242  4C75
12243  4C76
12244  4C77
12245  4C78
12246  4C79
12247  4C7A
12248  4C7B
12249  4C7C
12250  4C7D
12251  4C7E
12252  4C7F
12253  4C80
12254  4C81
12255  4C82
12256  4C83
12257  4C84
12258  4C85
12259  4C86
12260  4C87
12261  4C88
12262  4C89
12263  4C8A
12264  4C8B
12265  4C8C
12266  4C8D
12267  4C8E
12268  4C8F
12269  4C90
12270  4C91
12271  4C92
12272  4C93
12273  4C94
12274  4C95
12275  4C96
12276  4C97
12277  4C98
12278  4C99
12279  4C9A
12280  4C9B
12281  4C9C
12282  4C9D
12283  4C9E
12284  4C9F
12285  4CA0
12286  4CA1
12287  4CA2
12288  4CA3
12289  4CA4
12290  4CA5
12291  4CA6
12292  4CA7
12293  4CA8
12294  4CA9
12295  4CAA
12296  4CAB
12297  4CAC
12298  4CAD
12299  4CAE
12300  4CAF
12301  4CB0
12302  4CB1
12303  4CB2
12304  4CB3
12305  4CB4
12306  4CB5
12307  4CB6
12308  4CB7
12309  4CB8
12310  4CB9
12311  4CBA
12312  4CBB
12313  4CBC
12314  4CBD
12315  4CBE
12316  4CBF
12317  4CC0
12318  4CC1
12319  4CC2
12320  4CC3
12321  4CC4
12322  4CC5
12323  4CC6
12324  4CC7
12325  4CC8
12326  4CC9
12327  4CCA
12328  4CCB
12329  4CCC
12330  4CCD
12331  4CCE
12332  4CCF
12333  4CD0
12334  4CD1
12335  4CD2
12336  4CD3
12337  4CD4
12338  4CD5
12339  4CD6
12340  4CD7
12341  4CD8
12342  4CD9
12343  4CDA
12344  4CDB
12345  4CDC
12346  4CDD
12347  4CDE
12348  4CDF
12349  4CE0
12350  4CE1
12351  4CE2
12352  4CE3
12353  4CE4
12354  4CE5
12355  4CE6
12356  4CE7
12357  4CE8
12358  4CE9
12359  4CEA
12360  4CEB
12361  4CEC
12362  4CED
12363  4CEE
12364  4CEF
12365  4CF0
12366  4CF1
12367  4CF2
12368  4CF3
12369  4CF4
12370  4CF5
12371  4CF6
12372  4CF7
12373  4CF8
12374  4CF9
12375  4CFA
12376  4CFB
12377  4CFC
12378  4CFD
12379  4CFE
12380  4CFF
12381  4D00
12382  4D01
12383  4D02
12384  4D03
12385  4D04
12386  4D05
12387  4D06
12388  4D07
12389  4D08
12390  4D09
12391  4D0A
12392  4D0B
12393  4D0C
12394  4D0D
12395  4D0E
12396  4D0F
12397  4D10
12398  4D11
12399  4D12
12400  4D13
12401  4D14
12402  4D15
12403  4D16
12404  4D17
12405  4D18
12406  4D19
12407  4D1A
12408  4D1B
12409  4D1C
12410  4D1D
12411  4D1E
12412  4D1F
12413  4D20
12414  4D21
12415  4D22
12416  4D23
12417  4D24
12418  4D25
12419  4D26
12420  4D27
12421  4D28
12422  4D29
12423  4D2A
12424  4D2B
12425  4D2C
12426  4D2D
12427  4D2E
12428  4D2F
12429  4D30
12430  4D31
12431  4D32
12432  4D33
12433  4D34
12434  4D35
12435  4D36
12436  4D37
12437  4D38
12438  4D39
12439  4D3A
12440  4D3B
12441  4D3C
12442  4D3D
12443  4D3E
12444  4D3F
12445  4D40
12446  4D41
12447  4D42
12448  4D43
12449  4D44
12450  4D45
12451  4D46
12452  4D47
12453  4D48
12454  4D49
12455  4D4A
12456  4D4B
12457  4D4C
12458  4D4D
12459  4D4E
12460  4D4F
12461  4D50
12462  4D51
12463  4D52
12464  4D53
12465  4D54
12466  4D55
12467  4D56
12468  4D57
12469  4D58
12470  4D59
12471  4D5A
12472  4D5B
12473  4D5C
12474  4D5D
12475  4D5E
12476  4D5F
12477  4D60
12478  4D61
12479  4D62
12480  4D63
12481  4D64
12482  4D65
12483  4D66
12484  4D67
12485  4D68
12486  4D69
12487  4D6A
12488  4D6B
12489  4D6C
12490  4D6D
12491  4D6E
12492  4D6F
12493  4D70
12494  4D71
12495  4D72
12496  4D73
12497  4D74
12498  4D75
12499  4D76
12500  4D77
12501  4D78
12502  4D79
12503  4D7A
12504  4D7B
12505  4D7C
12506  4D7D
12507  4D7E
12508  4D7F
12509  4D80
12510  4D81
12511  4D82
12512  4D83
12513  4D84
12514  4D85
12515  4D86
12516  4D87
12517  4D88
12518  4D89
12519  4D8A
12520  4D8B
12521  4D8C
12522  4D8D
12523  4D8E
12524  4D8F
12525  4D90
12526  4D91
12527  4D92
12528  4D93
12529  4D94
12530  4D95
12531  4D96
12532  4D97
12533  4D98
12534  4D99
12535  4D9A
12536  4D9B
12537  4D9C
12538  4D9D
12539  4D9E
12540  4D9F
12541  4DA0
12542  4DA1
12543  4DA2
12544  4DA3
12545  4DA4
12546  4DA5
12547  4DA6
12548  4DA7
12549  4DA8
12550  4DA9
12551  4DAA
12552  4DAB
12553  4DAC
12554  4DAD
12555  4DAE
12556  4DAF
12557  4DB0
12558  4DB1
12559  4DB2
12560  4DB3
12561  4DB4
12562  4DB5
12563  4DB6
12564  4DB7
12565  4DB8
12566  4DB9
12567  4DBA
12568  4DBB
12569  4DBC
12570  4DBD
12571  4DBE
12572  4DBF
12573  4DC0
12574  4DC1
12575  4DC2
12576  4DC3
12577  4DC4
12578  4DC5
12579  4DC6
12580  4DC7
12581  4DC8
12582  4DC9
12583  4DCA
12584  4DCB
12585  4DCC
12586  4DCD
12587  4DCE
12588  4DCF
12589  4DD0
12590  4DD1
12591  4DD2
12592  4DD3
12593  4DD4
12594  4DD5
12595  4DD6
12596  4DD7
12597  4DD8
12598  4DD9
12599  4DDA
12600  4DDB
12601  4DDC
12602  4DDD
12603  4DDE
12604  4DDF
12605  4DE0
12606  4DE1
12607  4DE2
12608  4DE3
12609  4DE4
12610  4DE5
12611  4DE6
12612  4DE7
12613  4DE8
12614  4DE9
12615  4DEA
12616  4DEB
12617  4DEC
12618  4DED
12619  4DEE
12620  4DEF
12621  4DF0
12622  4DF1
12623  4DF2
12624  4DF3
12625  4DF4
12626  4DF5
12627  4DF6
12628  4DF7
12629  4DF8
12630  4DF9
12631  4DFA
12632  4DFB
12633  4DFC
12634  4DFD
12635  4DFE
12636  4DFF
12637  4E00
12638  4E01
12639  4E02
12640  4E03
12641  4E04
12642  4E05
12643  4E06
12644  4E07
12645  4E08
12646  4E09
12647  4E0A
12648  4E0B
12649  4E0C
12650  4E0D
12651  4E0E
12652  4E0F
12653  4E10
12654  4E11
12655  4E12
12656  4E13
12657  4E14
12658  4E15
12659  4E16
12660  4E17
12661  4E18
12662  4E19
12663  4E1A
12664  4E1B
12665  4E1C
12666  4E1D
12667  4E1E
12668  4E1F
12669  4E20
12670  4E21
12671  4E22
12672  4E23
12673  4E24
12674  4E25
12675  4E26
12676  4E27
12677  4E28
12678  4E29
12679  4E2A
12680  4E2B
12681  4E2C
12682  4E2D
12683  4E2E
12684  4E2F
12685  4E30
12686  4E31
12687  4E32
12688  4E33
12689  4E34
12690  4E35
12691  4E36
12692  4E37
12693  4E38
12694  4E39
12695  4E3A
12696  4E3B
12697  4E3C
12698  4E3D
12699  4E3E
12700  4E3F
12701  4E40
12702  4E41
12703  4E42
12704  4E43
12705  4E44
12706  4E45
12707  4E46
12708  4E47
12709  4E48
12710  4E49
12711  4E4A
12712  4E4B
12713  4E4C
12714  4E4D
12715  4E4E
12716  4E4F
12717  4E50
12718  4E51
12719  4E52
12720  4E53
12721  4E54
12722  4E55
12723  4E56
12724  4E57
12725  4E58
12726  4E59
12727  4E5A
12728  4E5B
12729  4E5C
12730  4E5D
12731  4E5E
12732  4E5F
12733  4E60
12734  4E61
12735  4E62
12736  4E63
12737  4E64
12738  4E65
12739  4E66
12740  4E67
12741  4E68
12742  4E69
12743  4E6A
12744  4E6B
12745  4E6C
12746  4E6D
12747  4E6E
12748  4E6F
12749  4E70
12750  4E71
12751  4E72
12752  4E73
12753  4E74
12754  4E75
12755  4E76
12756  4E77
12757  4E78
12758  4E79
12759  4E7A
12760  4E7B
12761  4E7C
12762  4E7D
12763  4E7E
12764  4E7F
12765  4E80
12766  4E81
12767  4E82
12768  4E83
12769  4E84
12770  4E85
12771  4E86
12772  4E87
12773  4E88
12774  4E89
12775  4E8A
12776  4E8B
12777  4E8C
12778  4E8D
12779  4E8E
12780  4E8F
12781  4E90
12782  4E91
12783  4E92
12784  4E93
12785  4E94
12786  4E95
12787  4E96
12788  4E97
12789  4E98
12790  4E99
12791  4E9A
12792  4E9B
12793  4E9C
12794  4E9D
12795  4E9E
12796  4E9F
12797  4EA0
12798  4EA1
12799  4EA2
12800  4EA3
12801  4EA4
12802  4EA5
12803  4EA6
12804  4EA7
12805  4EA8
12806  4EA9
12807  4EAA
12808  4EAB
12809  4EAC
12810  4EAD
12811  4EAE
12812  4EAF
12813  4EB0
12814  4EB1
12815  4EB2
12816  4EB3
12817  4EB4
12818  4EB5
12819  4EB6
12820  4EB7
12821  4EB8
12822  4EB9
12823  4EBA
12824  4EBB
12825  4EBC
12826  4EBD
12827  4EBE
12828  4EBF
12829  4EC0
12830  4EC1
12831  4EC2
12832  4EC3
12833  4EC4
12834  4EC5
12835  4EC6
12836  4EC7
12837  4EC8
12838  4EC9
12839  4ECA
12840  4ECB
12841  4ECC
12842  4ECD
12843  4ECE
12844  4ECF
12845  4ED0
12846  4ED1
12847  4ED2
12848  4ED3
12849  4ED4
12850  4ED5
12851  4ED6
12852  4ED7
12853  4ED8
12854  4ED9
12855  4EDA
12856  4EDB
12857  4EDC
12858  4EDD
12859  4EDE
12860  4EDF
12861  4EE0
12862  4EE1
12863  4EE2
12864  4EE3
12865  4EE4
12866  4EE5
12867  4EE6
12868  4EE7
12869  4EE8
12870  4EE9
12871  4EEA
12872  4EEB
12873  4EEC
12874  4EED
12875  4EEE
12876  4EEF
12877  4EF0
12878  4EF1
12879  4EF2
12880  4EF3
12881  4EF4
12882  4EF5
12883  4EF6
12884  4EF7
12885  4EF8
12886  4EF9
12887  4EFA
12888  4EFB
12889  4EFC
12890  4EFD
12891  4EFE
12892  4EFF
12893  4F00
12894  4F01
12895  4F02
12896  4F03
12897  4F04
12898  4F05
12899  4F06
12900  4F07
12901  4F08
12902  4F09
12903  4F0A
12904  4F0B
12905  4F0C
12906  4F0D
12907  4F0E
12908  4F0F
12909  4F10
12910  4F11
12911  4F12
12912  4F13
12913  4F14
12914  4F15
12915  4F16
12916  4F17
12917  4F18
12918  4F19
12919  4F1A
12920  4F1B
12921  4F1C
12922  4F1D
12923  4F1E
12924  4F1F
12925  4F20
12926  4F21
12927  4F22
12928  4F23
12929  4F24
12930  4F25
12931  4F26
12932  4F27
12933  4F28
12934  4F29
12935  4F2A
12936  4F2B
12937  4F2C
12938  4F2D
12939  4F2E
12940  4F2F
12941  4F30
12942  4F31
12943  4F32
12944  4F33
12945  4F34
12946  4F35
12947  4F36
12948  4F37
12949  4F38
12950  4F39
12951  4F3A
12952  4F3B
12953  4F3C
12954  4F3D
12955  4F3E
12956  4F3F
12957  4F40
12958  4F41
12959  4F42
12960  4F43
12961  4F44
12962  4F45
12963  4F46
12964  4F47
12965  4F48
12966  4F49
12967  4F4A
12968  4F4B
12969  4F4C
12970  4F4D
12971  4F4E
12972  4F4F
12973  4F50
12974  4F51
12975  4F52
12976  4F53
12977  4F54
12978  4F55
12979  4F56
12980  4F57
12981  4F58
12982  4F59
12983  4F5A
12984  4F5B
12985  4F5C
12986  4F5D
12987  4F5E
12988  4F5F
12989  4F60
12990  4F61
12991  4F62
12992  4F63
12993  4F64
12994  4F65
12995  4F66
12996  4F67
12997  4F68
12998  4F69
12999  4F6A
13000  4F6B
13001  4F6C
13002  4F6D
13003  4F6E
13004  4F6F
13005  4F70
13006  4F71
13007  4F72
13008  4F73
13009  4F74
13010  4F75
13011  4F76
13012  4F77
13013  4F78
13014  4F79
13015  4F7A
13016  4F7B
13017  4F7C
13018  4F7D
13019  4F7E
13020  4F7F
13021  4F80
13022  4F81
13023  4F82
13024  4F83
13025  4F84
13026  4F85
13027  4F86
13028  4F87
13029  4F88
13030  4F89
13031  4F8A
13032  4F8B
13033  4F8C
13034  4F8D
13035  4F8E
13036  4F8F
13037  4F90
13038  4F91
13039  4F92
13040  4F93
13041  4F94
13042  4F95
13043  4F96
13044  4F97
13045  4F98
13046  4F99
13047  4F9A
13048  4F9B
13049  4F9C
13050  4F9D
13051  4F9E
13052  4F9F
13053  4FA0
13054  4FA1
13055  4FA2
13056  4FA3
13057  4FA4
13058  4FA5
13059  4FA6
13060  4FA7
13061  4FA8
13062  4FA9
13063  4FAA
13064  4FAB
13065  4FAC
13066  4FAD
13067  4FAE
13068  4FAF
13069  4FB0
13070  4FB1
13071  4FB2
13072  4FB3
13073  4FB4
13074  4FB5
13075  4FB6
13076  4FB7
13077  4FB8
13078  4FB9
13079  4FBA
13080  4FBB
13081  4FBC
13082  4FBD
13083  4FBE
13084  4FBF
13085  4FC0
13086  4FC1
13087  4FC2
13088  4FC3
13089  4FC4
13090  4FC5
13091  4FC6
13092  4FC7
13093  4FC8
13094  4FC9
13095  4FCA
13096  4FCB
13097  4FCC
13098  4FCD
13099  4FCE
13100  4FCF
13101  4FD0
13102  4FD1
13103  4FD2
13104  4FD3
13105  4FD4
13106  4FD5
13107  4FD6
13108  4FD7
13109  4FD8
13110  4FD9
13111  4FDA
13112  4FDB
13113  4FDC
13114  4FDD
13115  4FDE
13116  4FDF
13117  4FE0
13118  4FE1
13119  4FE2
13120  4FE3
13121  4FE4
13122  4FE5
13123  4FE6
13124  4FE7
13125  4FE8
13126  4FE9
13127  4FEA
13128  4FEB
13129  4FEC
13130  4FED
13131  4FEE
13132  4FEF
13133  4FF0
13134  4FF1
13135  4FF2
13136  4FF3
13137  4FF4
13138  4FF5
13139  4FF6
13140  4FF7
13141  4FF8
13142  4FF9
13143  4FFA
13144  4FFB
13145  4FFC
13146  4FFD
13147  4FFE
13148  4FFF
13149  5000
13150  5001
13151  5002
13152  5003
13153  5004
13154  5005
13155  5006
13156  5007
13157  5008
13158  5009
13159  500A
13160  500B
13161  500C
13162  500D
13163  500E
13164  500F
13165  5010
13166  5011
13167  5012
13168  5013
13169  5014
13170  5015
13171  5016
13172  5017
13173  5018
13174  5019
13175  501A
13176  501B
13177  501C
13178  501D
13179  501E
13180  501F
13181  5020
13182  5021
13183  5022
13184  5023
13185  5024
13186  5025
13187  5026
13188  5027
13189  5028
13190  5029
13191  502A
13192  502B
13193  502C
13194  502D
13195  502E
13196  502F
13197  5030
13198  5031
13199  5032
13200  5033
13201  5034
13202  5035
13203  5036
13204  5037
13205  5038
13206  5039
13207  503A
13208  503B
13209  503C
13210  503D
13211  503E
13212  503F
13213  5040
13214  5041
13215  5042
13216  5043
13217  5044
13218  5045
13219  5046
13220  5047
13221  5048
13222  5049
13223  504A
13224  504B
13225  504C
13226  504D
13227  504E
13228  504F
13229  5050
13230  5051
13231  5052
13232  5053
13233  5054
13234  5055
13235  5056
13236  5057
13237  5058
13238  5059
13239  505A
13240  505B
13241  505C
13242  505D
13243  505E
13244  505F
13245  5060
13246  5061
13247  5062
13248  5063
13249  5064
13250  5065
13251  5066
13252  5067
13253  5068
13254  5069
13255  506A
13256  506B
13257  506C
13258  506D
13259  506E
13260  506F
13261  5070
13262  5071
13263  5072
13264  5073
13265  5074
13266  5075
13267  5076
13268  5077
13269  5078
13270  5079
13271  507A
13272  507B
13273  507C
13274  507D
13275  507E
13276  507F
13277  5080
13278  5081
13279  5082
13280  5083
13281  5084
13282  5085
13283  5086
13284  5087
13285  5088
13286  5089
13287  508A
13288  508B
13289  508C
13290  508D
13291  508E
13292  508F
13293  5090
13294  5091
13295  5092
13296  5093
13297  5094
13298  5095
13299  5096
13300  5097
13301  5098
13302  5099
13303  509A
13304  509B
13305  509C
13306  509D
13307  509E
13308  509F
13309  50A0
13310  50A1
13311  50A2
13312  50A3
13313  50A4
13314  50A5
13315  50A6
13316  50A7
13317  50A8
13318  50A9
13319  50AA
13320  50AB
13321  50AC
13322  50AD
13323  50AE
13324  50AF
13325  50B0
13326  50B1
13327  50B2
13328  50B3
13329  50B4
13330  50B5
13331  50B6
13332  50B7
13333  50B8
13334  50B9
13335  50BA
13336  50BB
13337  50BC
13338  50BD
13339  50BE
13340  50BF
13341  50C0
13342  50C1
13343  50C2
13344  50C3
13345  50C4
13346  50C5
13347  50C6
13348  50C7
13349  50C8
13350  50C9
13351  50CA
13352  50CB
13353  50CC
13354  50CD
13355  50CE
13356  50CF
13357  50D0
13358  50D1
13359  50D2
13360  50D3
13361  50D4
13362  50D5
13363  50D6
13364  50D7
13365  50D8
13366  50D9
13367  50DA
13368  50DB
13369  50DC
13370  50DD
13371  50DE
13372  50DF
13373  50E0
13374  50E1
13375  50E2
13376  50E3
13377  50E4
13378  50E5
13379  50E6
13380  50E7
13381  50E8
13382  50E9
13383  50EA
13384  50EB
13385  50EC
13386  50ED
13387  50EE
13388  50EF
13389  50F0
13390  50F1
13391  50F2
13392  50F3
13393  50F4
13394  50F5
13395  50F6
13396  50F7
13397  50F8
13398  50F9
13399  50FA
13400  50FB
13401  50FC
13402  50FD
13403  50FE
13404  50FF
13405  5100
13406  5101
13407  5102
13408  5103
13409  5104
13410  5105
13411  5106
13412  5107
13413  5108
13414  5109
13415  510A
13416  510B
13417  510C
13418  510D
13419  510E
13420  510F
13421  5110
13422  5111
13423  5112
13424  5113
13425  5114
13426  5115
13427  5116
13428  5117
13429  5118
13430  5119
13431  511A
13432  511B
13433  511C
13434  511D
13435  511E
13436  511F
13437  5120
13438  5121
13439  5122
13440  5123
13441  5124
13442  5125
13443  5126
13444  5127
13445  5128
13446  5129
13447  512A
13448  512B
13449  512C
13450  512D
13451  512E
13452  512F
13453  5130
13454  5131
13455  5132
13456  5133
13457  5134
13458  5135
13459  5136
13460  5137
13461  5138
13462  5139
13463  513A
13464  513B
13465  513C
13466  513D
13467  513E
13468  513F
13469  5140
13470  5141
13471  5142
13472  5143
13473  5144
13474  5145
13475  5146
13476  5147
13477  5148
13478  5149
13479  514A
13480  514B
13481  514C
13482  514D
13483  514E
13484  514F
13485  5150
13486  5151
13487  5152
13488  5153
13489  5154
13490  5155
13491  5156
13492  5157
13493  5158
13494  5159
13495  515A
13496  515B
13497  515C
13498  515D
13499  515E
13500  515F
13501  5160
13502  5161
13503  5162
13504  5163
13505  5164
13506  5165
13507  5166
13508  5167
13509  5168
13510  5169
13511  516A
13512  516B
13513  516C
13514  516D
13515  516E
13516  516F
13517  5170
13518  5171
13519  5172
13520  5173
13521  5174
13522  5175
13523  5176
13524  5177
13525  5178
13526  5179
13527  517A
13528  517B
13529  517C
13530  517D
13531  517E
13532  517F
13533  5180
13534  5181
13535  5182
13536  5183
13537  5184
13538  5185
13539  5186
13540  5187
13541  5188
13542  5189
13543  518A
13544  518B
13545  518C
13546  518D
13547  518E
13548  518F
13549  5190
13550  5191
13551  5192
13552  5193
13553  5194
13554  5195
13555  5196
13556  5197
13557  5198
13558  5199
13559  519A
13560  519B
13561  519C
13562  519D
13563  519E
13564  519F
13565  51A0
13566  51A1
13567  51A2
13568  51A3
13569  51A4
13570  51A5
13571  51A6
13572  51A7
13573  51A8
13574  51A9
13575  51AA
13576  51AB
13577  51AC
13578  51AD
13579  51AE
13580  51AF
13581  51B0
13582  51B1
13583  51B2
13584  51B3
13585  51B4
13586  51B5
13587  51B6
13588  51B7
13589  51B8
13590  51B9
13591  51BA
13592  51BB
13593  51BC
13594  51BD
13595  51BE
13596  51BF
13597  51C0
13598  51C1
13599  51C2
13600  51C3
13601  51C4
13602  51C5
13603  51C6
13604  51C7
13605  51C8
13606  51C9
13607  51CA
13608  51CB
13609  51CC
13610  51CD
13611  51CE
13612  51CF
13613  51D0
13614  51D1
13615  51D2
13616  51D3
13617  51D4
13618  51D5
13619  51D6
13620  51D7
13621  51D8
13622  51D9
13623  51DA
13624  51DB
13625  51DC
13626  51DD
13627  51DE
13628  51DF
13629  51E0
13630  51E1
13631  51E2
13632  51E3
13633  51E4
13634  51E5
13635  51E6
13636  51E7
13637  51E8
13638  51E9
13639  51EA
13640  51EB
13641  51EC
13642  51ED
13643  51EE
13644  51EF
13645  51F0
13646  51F1
13647  51F2
13648  51F3
13649  51F4
13650  51F5
13651  51F6
13652  51F7
13653  51F8
13654  51F9
13655  51FA
13656  51FB
13657  51FC
13658  51FD
13659  51FE
13660  51FF
13661  5200
13662  5201
13663  5202
13664  5203
13665  5204
13666  5205
13667  5206
13668  5207
13669  5208
13670  5209
13671  520A
13672  520B
13673  520C
13674  520D
13675  520E
13676  520F
13677  5210
13678  5211
13679  5212
13680  5213
13681  5214
13682  5215
13683  5216
13684  5217
13685  5218
13686  5219
13687  521A
13688  521B
13689  521C
13690  521D
13691  521E
13692  521F
13693  5220
13694  5221
13695  5222
13696  5223
13697  5224
13698  5225
13699  5226
13700  5227
13701  5228
13702  5229
13703  522A
13704  522B
13705  522C
13706  522D
13707  522E
13708  522F
13709  5230
13710  5231
13711  5232
13712  5233
13713  5234
13714  5235
13715  5236
13716  5237
13717  5238
13718  5239
13719  523A
13720  523B
13721  523C
13722  523D
13723  523E
13724  523F
13725  5240
13726  5241
13727  5242
13728  5243
13729  5244
13730  5245
13731  5246
13732  5247
13733  5248
13734  5249
13735  524A
13736  524B
13737  524C
13738  524D
13739  524E
13740  524F
13741  5250
13742  5251
13743  5252
13744  5253
13745  5254
13746  5255
13747  5256
13748  5257
13749  5258
13750  5259
13751  525A
13752  525B
13753  525C
13754  525D
13755  525E
13756  525F
13757  5260
13758  5261
13759  5262
13760  5263
13761  5264
13762  5265
13763  5266
13764  5267
13765  5268
13766  5269
13767  526A
13768  526B
13769  526C
13770  526D
13771  526E
13772  526F
13773  5270
13774  5271
13775  5272
13776  5273
13777  5274
13778  5275
13779  5276
13780  5277
13781  5278
13782  5279
13783  527A
13784  527B
13785  527C
13786  527D
13787  527E
13788  527F
13789  5280
13790  5281
13791  5282
13792  5283
13793  5284
13794  5285
13795  5286
13796  5287
13797  5288
13798  5289
13799  528A
13800  528B
13801  528C
13802  528D
13803  528E
13804  528F
13805  5290
13806  5291
13807  5292
13808  5293
13809  5294
13810  5295
13811  5296
13812  5297
13813  5298
13814  5299
13815  529A
13816  529B
13817  529C
13818  529D
13819  529E
13820  529F
13821  52A0
13822  52A1
13823  52A2
13824  52A3
13825  52A4
13826  52A5
13827  52A6
13828  52A7
13829  52A8
13830  52A9
13831  52AA
13832  52AB
13833  52AC
13834  52AD
13835  52AE
13836  52AF
13837  52B0
13838  52B1
13839  52B2
13840  52B3
13841  52B4
13842  52B5
13843  52B6
13844  52B7
13845  52B8
13846  52B9
13847  52BA
13848  52BB
13849  52BC
13850  52BD
13851  52BE
13852  52BF
13853  52C0
13854  52C1
13855  52C2
13856  52C3
13857  52C4
13858  52C5
13859  52C6
13860  52C7
13861  52C8
13862  52C9
13863  52CA
13864  52CB
13865  52CC
13866  52CD
13867  52CE
13868  52CF
13869  52D0
13870  52D1
13871  52D2
13872  52D3
13873  52D4
13874  52D5
13875  52D6
13876  52D7
13877  52D8
13878  52D9
13879  52DA
13880  52DB
13881  52DC
13882  52DD
13883  52DE
13884  52DF
13885  52E0
13886  52E1
13887  52E2
13888  52E3
13889  52E4
13890  52E5
13891  52E6
13892  52E7
13893  52E8
13894  52E9
13895  52EA
13896  52EB
13897  52EC
13898  52ED
13899  52EE
13900  52EF
13901  52F0
13902  52F1
13903  52F2
13904  52F3
13905  52F4
13906  52F5
13907  52F6
13908  52F7
13909  52F8
13910  52F9
13911  52FA
13912  52FB
13913  52FC
13914  52FD
13915  52FE
13916  52FF
13917  5300
13918  5301
13919  5302
13920  5303
13921  5304
13922  5305
13923  5306
13924  5307
13925  5308
13926  5309
13927  530A
13928  530B
13929  530C
13930  530D
13931  530E
13932  530F
13933  5310
13934  5311
13935  5312
13936  5313
13937  5314
13938  5315
13939  5316
13940  5317
13941  5318
13942  5319
13943  531A
13944  531B
13945  531C
13946  531D
13947  531E
13948  531F
13949  5320
13950  5321
13951  5322
13952  5323
13953  5324
13954  5325
13955  5326
13956  5327
13957  5328
13958  5329
13959  532A
13960  532B
13961  532C
13962  532D
13963  532E
13964  532F
13965  5330
13966  5331
13967  5332
13968  5333
13969  5334
13970  5335
13971  5336
13972  5337
13973  5338
13974  5339
13975  533A
13976  533B
13977  533C
13978  533D
13979  533E
13980  533F
13981  5340
13982  5341
13983  5342
13984  5343
13985  5344
13986  5345
13987  5346
13988  5347
13989  5348
13990  5349
13991  534A
13992  534B
13993  534C
13994  534D
13995  534E
13996  534F
13997  5350
13998  5351
13999  5352
14000  5353
14001  5354
14002  5355
14003  5356
14004  5357
14005  5358
14006  5359
14007  535A
14008  535B
14009  535C
14010  535D
14011  535E
14012  535F
14013  5360
14014  5361
14015  5362
14016  5363
14017  5364
14018  5365
14019  5366
14020  5367
14021  5368
14022  5369
14023  536A
14024  536B
14025  536C
14026  536D
14027  536E
14028  536F
14029  5370
14030  5371
14031  5372
14032  5373
14033  5374
14034  5375
14035  5376
14036  5377
14037  5378
14038  5379
14039  537A
14040  537B
14041  537C
14042  537D
14043  537E
14044  537F
14045  5380
14046  5381
14047  5382
14048  5383
14049  5384
14050  5385
14051  5386
14052  5387
14053  5388
14054  5389
14055  538A
14056  538B
14057  538C
14058  538D
14059  538E
14060  538F
14061  5390
14062  5391
14063  5392
14064  5393
14065  5394
14066  5395
14067  5396
14068  5397
14069  5398
14070  5399
14071  539A
14072  539B
14073  539C
14074  539D
14075  539E
14076  539F
14077  53A0
14078  53A1
14079  53A2
14080  53A3
14081  53A4
14082  53A5
14083  53A6
14084  53A7
14085  53A8
14086  53A9
14087  53AA
14088  53AB
14089  53AC
14090  53AD
14091  53AE
14092  53AF
14093  53B0
14094  53B1
14095  53B2
14096  53B3
14097  53B4
14098  53B5
14099  53B6
14100  53B7
14101  53B8
14102  53B9
14103  53BA
14104  53BB
14105  53BC
14106  53BD
14107  53BE
14108  53BF
14109  53C0
14110  53C1
14111  53C2
14112  53C3
14113  53C4
14114  53C5
14115  53C6
14116  53C7
14117  53C8
14118  53C9
14119  53CA
14120  53CB
14121  53CC
14122  53CD
14123  53CE
14124  53CF
14125  53D0
14126  53D1
14127  53D2
14128  53D3
14129  53D4
14130  53D5
14131  53D6
14132  53D7
14133  53D8
14134  53D9
14135  53DA
14136  53DB
14137  53DC
14138  53DD
14139  53DE
14140  53DF
14141  53E0
14142  53E1
14143  53E2
14144  53E3
14145  53E4
14146  53E5
14147  53E6
14148  53E7
14149  53E8
14150  53E9
14151  53EA
14152  53EB
14153  53EC
14154  53ED
14155  53EE
14156  53EF
14157  53F0
14158  53F1
14159  53F2
14160  53F3
14161  53F4
14162  53F5
14163  53F6
14164  53F7
14165  53F8
14166  53F9
14167  53FA
14168  53FB
14169  53FC
14170  53FD
14171  53FE
14172  53FF
14173  5400
14174  5401
14175  5402
14176  5403
14177  5404
14178  5405
14179  5406
14180  5407
14181  5408
14182  5409
14183  540A
14184  540B
14185  540C
14186  540D
14187  540E
14188  540F
14189  5410
14190  5411
14191  5412
14192  5413
14193  5414
14194  5415
14195  5416
14196  5417
14197  5418
14198  5419
14199  541A
14200  541B
14201  541C
14202  541D
14203  541E
14204  541F
14205  5420
14206  5421
14207  5422
14208  5423
14209  5424
14210  5425
14211  5426
14212  5427
14213  5428
14214  5429
14215  542A
14216  542B
14217  542C
14218  542D
14219  542E
14220  542F
14221  5430
14222  5431
14223  5432
14224  5433
14225  5434
14226  5435
14227  5436
14228  5437
14229  5438
14230  5439
14231  543A
14232  543B
14233  543C
14234  543D
14235  543E
14236  543F
14237  5440
14238  5441
14239  5442
14240  5443
14241  5444
14242  5445
14243  5446
14244  5447
14245  5448
14246  5449
14247  544A
14248  544B
14249  544C
14250  544D
14251  544E
14252  544F
14253  5450
14254  5451
14255  5452
14256  5453
14257  5454
14258  5455
14259  5456
14260  5457
14261  5458
14262  5459
14263  545A
14264  545B
14265  545C
14266  545D
14267  545E
14268  545F
14269  5460
14270  5461
14271  5462
14272  5463
14273  5464
14274  5465
14275  5466
14276  5467
14277  5468
14278  5469
14279  546A
14280  546B
14281  546C
14282  546D
14283  546E
14284  546F
14285  5470
14286  5471
14287  5472
14288  5473
14289  5474
14290  5475
14291  5476
14292  5477
14293  5478
14294  5479
14295  547A
14296  547B
14297  547C
14298  547D
14299  547E
14300  547F
14301  5480
14302  5481
14303  5482
14304  5483
14305  5484
14306  5485
14307  5486
14308  5487
14309  5488
14310  5489
14311  548A
14312  548B
14313  548C
14314  548D
14315  548E
14316  548F
14317  5490
14318  5491
14319  5492
14320  5493
14321  5494
14322  5495
14323  5496
14324  5497
14325  5498
14326  5499
14327  549A
14328  549B
14329  549C
14330  549D
14331  549E
14332  549F
14333  54A0
14334  54A1
14335  54A2
14336  54A3
14337  54A4
14338  54A5
14339  54A6
14340  54A7
14341  54A8
14342  54A9
14343  54AA
14344  54AB
14345  54AC
14346  54AD
14347  54AE
14348  54AF
14349  54B0
14350  54B1
14351  54B2
14352  54B3
14353  54B4
14354  54B5
14355  54B6
14356  54B7
14357  54B8
14358  54B9
14359  54BA
14360  54BB
14361  54BC
14362  54BD
14363  54BE
14364  54BF
14365  54C0
14366  54C1
14367  54C2
14368  54C3
14369  54C4
14370  54C5
14371  54C6
14372  54C7
14373  54C8
14374  54C9
14375  54CA
14376  54CB
14377  54CC
14378  54CD
14379  54CE
14380  54CF
14381  54D0
14382  54D1
14383  54D2
14384  54D3
14385  54D4
14386  54D5
14387  54D6
14388  54D7
14389  54D8
14390  54D9
14391  54DA
14392  54DB
14393  54DC
14394  54DD
14395  54DE
14396  54DF
14397  54E0
14398  54E1
14399  54E2
14400  54E3
14401  54E4
14402  54E5
14403  54E6
14404  54E7
14405  54E8
14406  54E9
14407  54EA
14408  54EB
14409  54EC
14410  54ED
14411  54EE
14412  54EF
14413  54F0
14414  54F1
14415  54F2
14416  54F3
14417  54F4
14418  54F5
14419  54F6
14420  54F7
14421  54F8
14422  54F9
14423  54FA
14424  54FB
14425  54FC
14426  54FD
14427  54FE
14428  54FF
14429  5500
14430  5501
14431  5502
14432  5503
14433  5504
14434  5505
14435  5506
14436  5507
14437  5508
14438  5509
14439  550A
14440  550B
14441  550C
14442  550D
14443  550E
14444  550F
14445  5510
14446  5511
14447  5512
14448  5513
14449  5514
14450  5515
14451  5516
14452  5517
14453  5518
14454  5519
14455  551A
14456  551B
14457  551C
14458  551D
14459  551E
14460  551F
14461  5520
14462  5521
14463  5522
14464  5523
14465  5524
14466  5525
14467  5526
14468  5527
14469  5528
14470  5529
14471  552A
14472  552B
14473  552C
14474  552D
14475  552E
14476  552F
14477  5530
14478  5531
14479  5532
14480  5533
14481  5534
14482  5535
14483  5536
14484  5537
14485  5538
14486  5539
14487  553A
14488  553B
14489  553C
14490  553D
14491  553E
14492  553F
14493  5540
14494  5541
14495  5542
14496  5543
14497  5544
14498  5545
14499  5546
14500  5547
14501  5548
14502  5549
14503  554A
14504  554B
14505  554C
14506  554D
14507  554E
14508  554F
14509  5550
14510  5551
14511  5552
14512  5553
14513  5554
14514  5555
14515  5556
14516  5557
14517  5558
14518  5559
14519  555A
14520  555B
14521  555C
14522  555D
14523  555E
14524  555F
14525  5560
14526  5561
14527  5562
14528  5563
14529  5564
14530  5565
14531  5566
14532  5567
14533  5568
14534  5569
14535  556A
14536  556B
14537  556C
14538  556D
14539  556E
14540  556F
14541  5570
14542  5571
14543  5572
14544  5573
14545  5574
14546  5575
14547  5576
14548  5577
14549  5578
14550  5579
14551  557A
14552  557B
14553  557C
14554  557D
14555  557E
14556  557F
14557  5580
14558  5581
14559  5582
14560  5583
14561  5584
14562  5585
14563  5586
14564  5587
14565  5588
14566  5589
14567  558A
14568  558B
14569  558C
14570  558D
14571  558E
14572  558F
14573  5590
14574  5591
14575  5592
14576  5593
14577  5594
14578  5595
14579  5596
14580  5597
14581  5598
14582  5599
14583  559A
14584  559B
14585  559C
14586  559D
14587  559E
14588  559F
14589  55A0
14590  55A1
14591  55A2
14592  55A3
14593  55A4
14594  55A5
14595  55A6
14596  55A7
14597  55A8
14598  55A9
14599  55AA
14600  55AB
14601  55AC
14602  55AD
14603  55AE
14604  55AF
14605  55B0
14606  55B1
14607  55B2
14608  55B3
14609  55B4
14610  55B5
14611  55B6
14612  55B7
14613  55B8
14614  55B9
14615  55BA
14616  55BB
14617  55BC
14618  55BD
14619  55BE
14620  55BF
14621  55C0
14622  55C1
14623  55C2
14624  55C3
14625  55C4
14626  55C5
14627  55C6
14628  55C7
14629  55C8
14630  55C9
14631  55CA
14632  55CB
14633  55CC
14634  55CD
14635  55CE
14636  55CF
14637  55D0
14638  55D1
14639  55D2
14640  55D3
14641  55D4
14642  55D5
14643  55D6
14644  55D7
14645  55D8
14646  55D9
14647  55DA
14648  55DB
14649  55DC
14650  55DD
14651  55DE
14652  55DF
14653  55E0
14654  55E1
14655  55E2
14656  55E3
14657  55E4
14658  55E5
14659  55E6
14660  55E7
14661  55E8
14662  55E9
14663  55EA
14664  55EB
14665  55EC
14666  55ED
14667  55EE
14668  55EF
14669  55F0
14670  55F1
14671  55F2
14672  55F3
14673  55F4
14674  55F5
14675  55F6
14676  55F7
14677  55F8
14678  55F9
14679  55FA
14680  55FB
14681  55FC
14682  55FD
14683  55FE
14684  55FF
14685  5600
14686  5601
14687  5602
14688  5603
14689  5604
14690  5605
14691  5606
14692  5607
14693  5608
14694  5609
14695  560A
14696  560B
14697  560C
14698  560D
14699  560E
14700  560F
14701  5610
14702  5611
14703  5612
14704  5613
14705  5614
14706  5615
14707  5616
14708  5617
14709  5618
14710  5619
14711  561A
14712  561B
14713  561C
14714  561D
14715  561E
14716  561F
14717  5620
14718  5621
14719  5622
14720  5623
14721  5624
14722  5625
14723  5626
14724  5627
14725  5628
14726  5629
14727  562A
14728  562B
14729  562C
14730  562D
14731  562E
14732  562F
14733  5630
14734  5631
14735  5632
14736  5633
14737  5634
14738  5635
14739  5636
14740  5637
14741  5638
14742  5639
14743  563A
14744  563B
14745  563C
14746  563D
14747  563E
14748  563F
14749  5640
14750  5641
14751  5642
14752  5643
14753  5644
14754  5645
14755  5646
14756  5647
14757  5648
14758  5649
14759  564A
14760  564B
14761  564C
14762  564D
14763  564E
14764  564F
14765  5650
14766  5651
14767  5652
14768  5653
14769  5654
14770  5655
14771  5656
14772  5657
14773  5658
14774  5659
14775  565A
14776  565B
14777  565C
14778  565D
14779  565E
14780  565F
14781  5660
14782  5661
14783  5662
14784  5663
14785  5664
14786  5665
14787  5666
14788  5667
14789  5668
14790  5669
14791  566A
14792  566B
14793  566C
14794  566D
14795  566E
14796  566F
14797  5670
14798  5671
14799  5672
14800  5673
14801  5674
14802  5675
14803  5676
14804  5677
14805  5678
14806  5679
14807  567A
14808  567B
14809  567C
14810  567D
14811  567E
14812  567F
14813  5680
14814  5681
14815  5682
14816  5683
14817  5684
14818  5685
14819  5686
14820  5687
14821  5688
14822  5689
14823  568A
14824  568B
14825  568C
14826  568D
14827  568E
14828  568F
14829  5690
14830  5691
14831  5692
14832  5693
14833  5694
14834  5695
14835  5696
14836  5697
14837  5698
14838  5699
14839  569A
14840  569B
14841  569C
14842  569D
14843  569E
14844  569F
14845  56A0
14846  56A1
14847  56A2
14848  56A3
14849  56A4
14850  56A5
14851  56A6
14852  56A7
14853  56A8
14854  56A9
14855  56AA
14856  56AB
14857  56AC
14858  56AD
14859  56AE
14860  56AF
14861  56B0
14862  56B1
14863  56B2
14864  56B3
14865  56B4
14866  56B5
14867  56B6
14868  56B7
14869  56B8
14870  56B9
14871  56BA
14872  56BB
14873  56BC
14874  56BD
14875  56BE
14876  56BF
14877  56C0
14878  56C1
14879  56C2
14880  56C3
14881  56C4
14882  56C5
14883  56C6
14884  56C7
14885  56C8
14886  56C9
14887  56CA
14888  56CB
14889  56CC
14890  56CD
14891  56CE
14892  56CF
14893  56D0
14894  56D1
14895  56D2
14896  56D3
14897  56D4
14898  56D5
14899  56D6
14900  56D7
14901  56D8
14902  56D9
14903  56DA
14904  56DB
14905  56DC
14906  56DD
14907  56DE
14908  56DF
14909  56E0
14910  56E1
14911  56E2
14912  56E3
14913  56E4
14914  56E5
14915  56E6
14916  56E7
14917  56E8
14918  56E9
14919  56EA
14920  56EB
14921  56EC
14922  56ED
14923  56EE
14924  56EF
14925  56F0
14926  56F1
14927  56F2
14928  56F3
14929  56F4
14930  56F5
14931  56F6
14932  56F7
14933  56F8
14934  56F9
14935  56FA
14936  56FB
14937  56FC
14938  56FD
14939  56FE
14940  56FF
14941  5700
14942  5701
14943  5702
14944  5703
14945  5704
14946  5705
14947  5706
14948  5707
14949  5708
14950  5709
14951  570A
14952  570B
14953  570C
14954  570D
14955  570E
14956  570F
14957  5710
14958  5711
14959  5712
14960  5713
14961  5714
14962  5715
14963  5716
14964  5717
14965  5718
14966  5719
14967  571A
14968  571B
14969  571C
14970  571D
14971  571E
14972  571F
14973  5720
14974  5721
14975  5722
14976  5723
14977  5724
14978  5725
14979  5726
14980  5727
14981  5728
14982  5729
14983  572A
14984  572B
14985  572C
14986  572D
14987  572E
14988  572F
14989  5730
14990  5731
14991  5732
14992  5733
14993  5734
14994  5735
14995  5736
14996  5737
14997  5738
14998  5739
14999  573A
15000  573B
15001  573C
15002  573D
15003  573E
15004  573F
15005  5740
15006  5741
15007  5742
15008  5743
15009  5744
15010  5745
15011  5746
15012  5747
15013  5748
15014  5749
15015  574A
15016  574B
15017  574C
15018  574D
15019  574E
15020  574F
15021  5750
15022  5751
15023  5752
15024  5753
15025  5754
15026  5755
15027  5756
15028  5757
15029  5758
15030  5759
15031  575A
15032  575B
15033  575C
15034  575D
15035  575E
15036  575F
15037  5760
15038  5761
15039  5762
15040  5763
15041  5764
15042  5765
15043  5766
15044  5767
15045  5768
15046  5769
15047  576A
15048  576B
15049  576C
15050  576D
15051  576E
15052  576F
15053  5770
15054  5771
15055  5772
15056  5773
15057  5774
15058  5775
15059  5776
15060  5777
15061  5778
15062  5779
15063  577A
15064  577B
15065  577C
15066  577D
15067  577E
15068  577F
15069  5780
15070  5781
15071  5782
15072  5783
15073  5784
15074  5785
15075  5786
15076  5787
15077  5788
15078  5789
15079  578A
15080  578B
15081  578C
15082  578D
15083  578E
15084  578F
15085  5790
15086  5791
15087  5792
15088  5793
15089  5794
15090  5795
15091  5796
15092  5797
15093  5798
15094  5799
15095  579A
15096  579B
15097  579C
15098  579D
15099  579E
15100  579F
15101  57A0
15102  57A1
15103  57A2
15104  57A3
15105  57A4
15106  57A5
15107  57A6
15108  57A7
15109  57A8
15110  57A9
15111  57AA
15112  57AB
15113  57AC
15114  57AD
15115  57AE
15116  57AF
15117  57B0
15118  57B1
15119  57B2
15120  57B3
15121  57B4
15122  57B5
15123  57B6
15124  57B7
15125  57B8
15126  57B9
15127  57BA
15128  57BB
15129  57BC
15130  57BD
15131  57BE
15132  57BF
15133  57C0
15134  57C1
15135  57C2
15136  57C3
15137  57C4
15138  57C5
15139  57C6
15140  57C7
15141  57C8
15142  57C9
15143  57CA
15144  57CB
15145  57CC
15146  57CD
15147  57CE
15148  57CF
15149  57D0
15150  57D1
15151  57D2
15152  57D3
15153  57D4
15154  57D5
15155  57D6
15156  57D7
15157  57D8
15158  57D9
15159  57DA
15160  57DB
15161  57DC
15162  57DD
15163  57DE
15164  57DF
15165  57E0
15166  57E1
15167  57E2
15168  57E3
15169  57E4
15170  57E5
15171  57E6
15172  57E7
15173  57E8
15174  57E9
15175  57EA
15176  57EB
15177  57EC
15178  57ED
15179  57EE
15180  57EF
15181  57F0
15182  57F1
15183  57F2
15184  57F3
15185  57F4
15186  57F5
15187  57F6
15188  57F7
15189  57F8
15190  57F9
15191  57FA
15192  57FB
15193  57FC
15194  57FD
15195  57FE
15196  57FF
15197  5800
15198  5801
15199  5802
15200  5803
15201  5804
15202  5805
15203  5806
15204  5807
15205  5808
15206  5809
15207  580A
15208  580B
15209  580C
15210  580D
15211  580E
15212  580F
15213  5810
15214  5811
15215  5812
15216  5813
15217  5814
15218  5815
15219  5816
15220  5817
15221  5818
15222  5819
15223  581A
15224  581B
15225  581C
15226  581D
15227  581E
15228  581F
15229  5820
15230  5821
15231  5822
15232  5823
15233  5824
15234  5825
15235  5826
15236  5827
15237  5828
15238  5829
15239  582A
15240  582B
15241  582C
15242  582D
15243  582E
15244  582F
15245  5830
15246  5831
15247  5832
15248  5833
15249  5834
15250  5835
15251  5836
15252  5837
15253  5838
15254  5839
15255  583A
15256  583B
15257  583C
15258  583D
15259  583E
15260  583F
15261  5840
15262  5841
15263  5842
15264  5843
15265  5844
15266  5845
15267  5846
15268  5847
15269  5848
15270  5849
15271  584A
15272  584B
15273  584C
15274  584D
15275  584E
15276  584F
15277  5850
15278  5851
15279  5852
15280  5853
15281  5854
15282  5855
15283  5856
15284  5857
15285  5858
15286  5859
15287  585A
15288  585B
15289  585C
15290  585D
15291  585E
15292  585F
15293  5860
15294  5861
15295  5862
15296  5863
15297  5864
15298  5865
15299  5866
15300  5867
15301  5868
15302  5869
15303  586A
15304  586B
15305  586C
15306  586D
15307  586E
15308  586F
15309  5870
15310  5871
15311  5872
15312  5873
15313  5874
15314  5875
15315  5876
15316  5877
15317  5878
15318  5879
15319  587A
15320  587B
15321  587C
15322  587D
15323  587E
15324  587F
15325  5880
15326  5881
15327  5882
15328  5883
15329  5884
15330  5885
15331  5886
15332  5887
15333  5888
15334  5889
15335  588A
15336  588B
15337  588C
15338  588D
15339  588E
15340  588F
15341  5890
15342  5891
15343  5892
15344  5893
15345  5894
15346  5895
15347  5896
15348  5897
15349  5898
15350  5899
15351  589A
15352  589B
15353  589C
15354  589D
15355  589E
15356  589F
15357  58A0
15358  58A1
15359  58A2
15360  58A3
15361  58A4
15362  58A5
15363  58A6
15364  58A7
15365  58A8
15366  58A9
15367  58AA
15368  58AB
15369  58AC
15370  58AD
15371  58AE
15372  58AF
15373  58B0
15374  58B1
15375  58B2
15376  58B3
15377  58B4
15378  58B5
15379  58B6
15380  58B7
15381  58B8
15382  58B9
15383  58BA
15384  58BB
15385  58BC
15386  58BD
15387  58BE
15388  58BF
15389  58C0
15390  58C1
15391  58C2
15392  58C3
15393  58C4
15394  58C5
15395  58C6
15396  58C7
15397  58C8
15398  58C9
15399  58CA
15400  58CB
15401  58CC
15402  58CD
15403  58CE
15404  58CF
15405  58D0
15406  58D1
15407  58D2
15408  58D3
15409  58D4
15410  58D5
15411  58D6
15412  58D7
15413  58D8
15414  58D9
15415  58DA
15416  58DB
15417  58DC
15418  58DD
15419  58DE
15420  58DF
15421  58E0
15422  58E1
15423  58E2
15424  58E3
15425  58E4
15426  58E5
15427  58E6
15428  58E7
15429  58E8
15430  58E9
15431  58EA
15432  58EB
15433  58EC
15434  58ED
15435  58EE
15436  58EF
15437  58F0
15438  58F1
15439  58F2
15440  58F3
15441  58F4
15442  58F5
15443  58F6
15444  58F7
15445  58F8
15446  58F9
15447  58FA
15448  58FB
15449  58FC
15450  58FD
15451  58FE
15452  58FF
15453  5900
15454  5901
15455  5902
15456  5903
15457  5904
15458  5905
15459  5906
15460  5907
15461  5908
15462  5909
15463  590A
15464  590B
15465  590C
15466  590D
15467  590E
15468  590F
15469  5910
15470  5911
15471  5912
15472  5913
15473  5914
15474  5915
15475  5916
15476  5917
15477  5918
15478  5919
15479  591A
15480  591B
15481  591C
15482  591D
15483  591E
15484  591F
15485  5920
15486  5921
15487  5922
15488  5923
15489  5924
15490  5925
15491  5926
15492  5927
15493  5928
15494  5929
15495  592A
15496  592B
15497  592C
15498  592D
15499  592E
15500  592F
15501  5930
15502  5931
15503  5932
15504  5933
15505  5934
15506  5935
15507  5936
15508  5937
15509  5938
15510  5939
15511  593A
15512  593B
15513  593C
15514  593D
15515  593E
15516  593F
15517  5940
15518  5941
15519  5942
15520  5943
15521  5944
15522  5945
15523  5946
15524  5947
15525  5948
15526  5949
15527  594A
15528  594B
15529  594C
15530  594D
15531  594E
15532  594F
15533  5950
15534  5951
15535  5952
15536  5953
15537  5954
15538  5955
15539  5956
15540  5957
15541  5958
15542  5959
15543  595A
15544  595B
15545  595C
15546  595D
15547  595E
15548  595F
15549  5960
15550  5961
15551  5962
15552  5963
15553  5964
15554  5965
15555  5966
15556  5967
15557  5968
15558  5969
15559  596A
15560  596B
15561  596C
15562  596D
15563  596E
15564  596F
15565  5970
15566  5971
15567  5972
15568  5973
15569  5974
15570  5975
15571  5976
15572  5977
15573  5978
15574  5979
15575  597A
15576  597B
15577  597C
15578  597D
15579  597E
15580  597F
15581  5980
15582  5981
15583  5982
15584  5983
15585  5984
15586  5985
15587  5986
15588  5987
15589  5988
15590  5989
15591  598A
15592  598B
15593  598C
15594  598D
15595  598E
15596  598F
15597  5990
15598  5991
15599  5992
15600  5993
15601  5994
15602  5995
15603  5996
15604  5997
15605  5998
15606  5999
15607  599A
15608  599B
15609  599C
15610  599D
15611  599E
15612  599F
15613  59A0
15614  59A1
15615  59A2
15616  59A3
15617  59A4
15618  59A5
15619  59A6
15620  59A7
15621  59A8
15622  59A9
15623  59AA
15624  59AB
15625  59AC
15626  59AD
15627  59AE
15628  59AF
15629  59B0
15630  59B1
15631  59B2
15632  59B3
15633  59B4
15634  59B5
15635  59B6
15636  59B7
15637  59B8
15638  59B9
15639  59BA
15640  59BB
15641  59BC
15642  59BD
15643  59BE
15644  59BF
15645  59C0
15646  59C1
15647  59C2
15648  59C3
15649  59C4
15650  59C5
15651  59C6
15652  59C7
15653  59C8
15654  59C9
15655  59CA
15656  59CB
15657  59CC
15658  59CD
15659  59CE
15660  59CF
15661  59D0
15662  59D1
15663  59D2
15664  59D3
15665  59D4
15666  59D5
15667  59D6
15668  59D7
15669  59D8
15670  59D9
15671  59DA
15672  59DB
15673  59DC
15674  59DD
15675  59DE
15676  59DF
15677  59E0
15678  59E1
15679  59E2
15680  59E3
15681  59E4
15682  59E5
15683  59E6
15684  59E7
15685  59E8
15686  59E9
15687  59EA
15688  59EB
15689  59EC
15690  59ED
15691  59EE
15692  59EF
15693  59F0
15694  59F1
15695  59F2
15696  59F3
15697  59F4
15698  59F5
15699  59F6
15700  59F7
15701  59F8
15702  59F9
15703  59FA
15704  59FB
15705  59FC
15706  59FD
15707  59FE
15708  59FF
15709  5A00
15710  5A01
15711  5A02
15712  5A03
15713  5A04
15714  5A05
15715  5A06
15716  5A07
15717  5A08
15718  5A09
15719  5A0A
15720  5A0B
15721  5A0C
15722  5A0D
15723  5A0E
15724  5A0F
15725  5A10
15726  5A11
15727  5A12
15728  5A13
15729  5A14
15730  5A15
15731  5A16
15732  5A17
15733  5A18
15734  5A19
15735  5A1A
15736  5A1B
15737  5A1C
15738  5A1D
15739  5A1E
15740  5A1F
15741  5A20
15742  5A21
15743  5A22
15744  5A23
15745  5A24
15746  5A25
15747  5A26
15748  5A27
15749  5A28
15750  5A29
15751  5A2A
15752  5A2B
15753  5A2C
15754  5A2D
15755  5A2E
15756  5A2F
15757  5A30
15758  5A31
15759  5A32
15760  5A33
15761  5A34
15762  5A35
15763  5A36
15764  5A37
15765  5A38
15766  5A39
15767  5A3A
15768  5A3B
15769  5A3C
15770  5A3D
15771  5A3E
15772  5A3F
15773  5A40
15774  5A41
15775  5A42
15776  5A43
15777  5A44
15778  5A45
15779  5A46
15780  5A47
15781  5A48
15782  5A49
15783  5A4A
15784  5A4B
15785  5A4C
15786  5A4D
15787  5A4E
15788  5A4F
15789  5A50
15790  5A51
15791  5A52
15792  5A53
15793  5A54
15794  5A55
15795  5A56
15796  5A57
15797  5A58
15798  5A59
15799  5A5A
15800  5A5B
15801  5A5C
15802  5A5D
15803  5A5E
15804  5A5F
15805  5A60
15806  5A61
15807  5A62
15808  5A63
15809  5A64
15810  5A65
15811  5A66
15812  5A67
15813  5A68
15814  5A69
15815  5A6A
15816  5A6B
15817  5A6C
15818  5A6D
15819  5A6E
15820  5A6F
15821  5A70
15822  5A71
15823  5A72
15824  5A73
15825  5A74
15826  5A75
15827  5A76
15828  5A77
15829  5A78
15830  5A79
15831  5A7A
15832  5A7B
15833  5A7C
15834  5A7D
15835  5A7E
15836  5A7F
15837  5A80
15838  5A81
15839  5A82
15840  5A83
15841  5A84
15842  5A85
15843  5A86
15844  5A87
15845  5A88
15846  5A89
15847  5A8A
15848  5A8B
15849  5A8C
15850  5A8D
15851  5A8E
15852  5A8F
15853  5A90
15854  5A91
15855  5A92
15856  5A93
15857  5A94
15858  5A95
15859  5A96
15860  5A97
15861  5A98
15862  5A99
15863  5A9A
15864  5A9B
15865  5A9C
15866  5A9D
15867  5A9E
15868  5A9F
15869  5AA0
15870  5AA1
15871  5AA2
15872  5AA3
15873  5AA4
15874  5AA5
15875  5AA6
15876  5AA7
15877  5AA8
15878  5AA9
15879  5AAA
15880  5AAB
15881  5AAC
15882  5AAD
15883  5AAE
15884  5AAF
15885  5AB0
15886  5AB1
15887  5AB2
15888  5AB3
15889  5AB4
15890  5AB5
15891  5AB6
15892  5AB7
15893  5AB8
15894  5AB9
15895  5ABA
15896  5ABB
15897  5ABC
15898  5ABD
15899  5ABE
15900  5ABF
15901  5AC0
15902  5AC1
15903  5AC2
15904  5AC3
15905  5AC4
15906  5AC5
15907  5AC6
15908  5AC7
15909  5AC8
15910  5AC9
15911  5ACA
15912  5ACB
15913  5ACC
15914  5ACD
15915  5ACE
15916  5ACF
15917  5AD0
15918  5AD1
15919  5AD2
15920  5AD3
15921  5AD4
15922  5AD5
15923  5AD6
15924  5AD7
15925  5AD8
15926  5AD9
15927  5ADA
15928  5ADB
15929  5ADC
15930  5ADD
15931  5ADE
15932  5ADF
15933  5AE0
15934  5AE1
15935  5AE2
15936  5AE3
15937  5AE4
15938  5AE5
15939  5AE6
15940  5AE7
15941  5AE8
15942  5AE9
15943  5AEA
15944  5AEB
15945  5AEC
15946  5AED
15947  5AEE
15948  5AEF
15949  5AF0
15950  5AF1
15951  5AF2
15952  5AF3
15953  5AF4
15954  5AF5
15955  5AF6
15956  5AF7
15957  5AF8
15958  5AF9
15959  5AFA
15960  5AFB
15961  5AFC
15962  5AFD
15963  5AFE
15964  5AFF
15965  5B00
15966  5B01
15967  5B02
15968  5B03
15969  5B04
15970  5B05
15971  5B06
15972  5B07
15973  5B08
15974  5B09
15975  5B0A
15976  5B0B
15977  5B0C
15978  5B0D
15979  5B0E
15980  5B0F
15981  5B10
15982  5B11
15983  5B12
15984  5B13
15985  5B14
15986  5B15
15987  5B16
15988  5B17
15989  5B18
15990  5B19
15991  5B1A
15992  5B1B
15993  5B1C
15994  5B1D
15995  5B1E
15996  5B1F
15997  5B20
15998  5B21
15999  5B22
16000  5B23
16001  5B24
16002  5B25
16003  5B26
16004  5B27
16005  5B28
16006  5B29
16007  5B2A
16008  5B2B
16009  5B2C
16010  5B2D
16011  5B2E
16012  5B2F
16013  5B30
16014  5B31
16015  5B32
16016  5B33
16017  5B34
16018  5B35
16019  5B36
16020  5B37
16021  5B38
16022  5B39
16023  5B3A
16024  5B3B
16025  5B3C
16026  5B3D
16027  5B3E
16028  5B3F
16029  5B40
16030  5B41
16031  5B42
16032  5B43
16033  5B44
16034  5B45
16035  5B46
16036  5B47
16037  5B48
16038  5B49
16039  5B4A
16040  5B4B
16041  5B4C
16042  5B4D
16043  5B4E
16044  5B4F
16045  5B50
16046  5B51
16047  5B52
16048  5B53
16049  5B54
16050  5B55
16051  5B56
16052  5B57
16053  5B58
16054  5B59
16055  5B5A
16056  5B5B
16057  5B5C
16058  5B5D
16059  5B5E
16060  5B5F
16061  5B60
16062  5B61
16063  5B62
16064  5B63
16065  5B64
16066  5B65
16067  5B66
16068  5B67
16069  5B68
16070  5B69
16071  5B6A
16072  5B6B
16073  5B6C
16074  5B6D
16075  5B6E
16076  5B6F
16077  5B70
16078  5B71
16079  5B72
16080  5B73
16081  5B74
16082  5B75
16083  5B76
16084  5B77
16085  5B78
16086  5B79
16087  5B7A
16088  5B7B
16089  5B7C
16090  5B7D
16091  5B7E
16092  5B7F
16093  5B80
16094  5B81
16095  5B82
16096  5B83
16097  5B84
16098  5B85
16099  5B86
16100  5B87
16101  5B88
16102  5B89
16103  5B8A
16104  5B8B
16105  5B8C
16106  5B8D
16107  5B8E
16108  5B8F
16109  5B90
16110  5B91
16111  5B92
16112  5B93
16113  5B94
16114  5B95
16115  5B96
16116  5B97
16117  5B98
16118  5B99
16119  5B9A
16120  5B9B
16121  5B9C
16122  5B9D
16123  5B9E
16124  5B9F
16125  5BA0
16126  5BA1
16127  5BA2
16128  5BA3
16129  5BA4
16130  5BA5
16131  5BA6
16132  5BA7
16133  5BA8
16134  5BA9
16135  5BAA
16136  5BAB
16137  5BAC
16138  5BAD
16139  5BAE
16140  5BAF
16141  5BB0
16142  5BB1
16143  5BB2
16144  5BB3
16145  5BB4
16146  5BB5
16147  5BB6
16148  5BB7
16149  5BB8
16150  5BB9
16151  5BBA
16152  5BBB
16153  5BBC
16154  5BBD
16155  5BBE
16156  5BBF
16157  5BC0
16158  5BC1
16159  5BC2
16160  5BC3
16161  5BC4
16162  5BC5
16163  5BC6
16164  5BC7
16165  5BC8
16166  5BC9
16167  5BCA
16168  5BCB
16169  5BCC
16170  5BCD
16171  5BCE
16172  5BCF
16173  5BD0
16174  5BD1
16175  5BD2
16176  5BD3
16177  5BD4
16178  5BD5
16179  5BD6
16180  5BD7
16181  5BD8
16182  5BD9
16183  5BDA
16184  5BDB
16185  5BDC
16186  5BDD
16187  5BDE
16188  5BDF
16189  5BE0
16190  5BE1
16191  5BE2
16192  5BE3
16193  5BE4
16194  5BE5
16195  5BE6
16196  5BE7
16197  5BE8
16198  5BE9
16199  5BEA
16200  5BEB
16201  5BEC
16202  5BED
16203  5BEE
16204  5BEF
16205  5BF0
16206  5BF1
16207  5BF2
16208  5BF3
16209  5BF4
16210  5BF5
16211  5BF6
16212  5BF7
16213  5BF8
16214  5BF9
16215  5BFA
16216  5BFB
16217  5BFC
16218  5BFD
16219  5BFE
16220  5BFF
16221  5C00
16222  5C01
16223  5C02
16224  5C03
16225  5C04
16226  5C05
16227  5C06
16228  5C07
16229  5C08
16230  5C09
16231  5C0A
16232  5C0B
16233  5C0C
16234  5C0D
16235  5C0E
16236  5C0F
16237  5C10
16238  5C11
16239  5C12
16240  5C13
16241  5C14
16242  5C15
16243  5C16
16244  5C17
16245  5C18
16246  5C19
16247  5C1A
16248  5C1B
16249  5C1C
16250  5C1D
16251  5C1E
16252  5C1F
16253  5C20
16254  5C21
16255  5C22
16256  5C23
16257  5C24
16258  5C25
16259  5C26
16260  5C27
16261  5C28
16262  5C29
16263  5C2A
16264  5C2B
16265  5C2C
16266  5C2D
16267  5C2E
16268  5C2F
16269  5C30
16270  5C31
16271  5C32
16272  5C33
16273  5C34
16274  5C35
16275  5C36
16276  5C37
16277  5C38
16278  5C39
16279  5C3A
16280  5C3B
16281  5C3C
16282  5C3D
16283  5C3E
16284  5C3F
16285  5C40
16286  5C41
16287  5C42
16288  5C43
16289  5C44
16290  5C45
16291  5C46
16292  5C47
16293  5C48
16294  5C49
16295  5C4A
16296  5C4B
16297  5C4C
16298  5C4D
16299  5C4E
16300  5C4F
16301  5C50
16302  5C51
16303  5C52
16304  5C53
16305  5C54
16306  5C55
16307  5C56
16308  5C57
16309  5C58
16310  5C59
16311  5C5A
16312  5C5B
16313  5C5C
16314  5C5D
16315  5C5E
16316  5C5F
16317  5C60
16318  5C61
16319  5C62
16320  5C63
16321  5C64
16322  5C65
16323  5C66
16324  5C67
16325  5C68
16326  5C69
16327  5C6A
16328  5C6B
16329  5C6C
16330  5C6D
16331  5C6E
16332  5C6F
16333  5C70
16334  5C71
16335  5C72
16336  5C73
16337  5C74
16338  5C75
16339  5C76
16340  5C77
16341  5C78
16342  5C79
16343  5C7A
16344  5C7B
16345  5C7C
16346  5C7D
16347  5C7E
16348  5C7F
16349  5C80
16350  5C81
16351  5C82
16352  5C83
16353  5C84
16354  5C85
16355  5C86
16356  5C87
16357  5C88
16358  5C89
16359  5C8A
16360  5C8B
16361  5C8C
16362  5C8D
16363  5C8E
16364  5C8F
16365  5C90
16366  5C91
16367  5C92
16368  5C93
16369  5C94
16370  5C95
16371  5C96
16372  5C97
16373  5C98
16374  5C99
16375  5C9A
16376  5C9B
16377  5C9C
16378  5C9D
16379  5C9E
16380  5C9F
16381  5CA0
16382  5CA1
16383  5CA2
16384  5CA3
16385  5CA4
16386  5CA5
16387  5CA6
16388  5CA7
16389  5CA8
16390  5CA9
16391  5CAA
16392  5CAB
16393  5CAC
16394  5CAD
16395  5CAE
16396  5CAF
16397  5CB0
16398  5CB1
16399  5CB2
16400  5CB3
16401  5CB4
16402  5CB5
16403  5CB6
16404  5CB7
16405  5CB8
16406  5CB9
16407  5CBA
16408  5CBB
16409  5CBC
16410  5CBD
16411  5CBE
16412  5CBF
16413  5CC0
16414  5CC1
16415  5CC2
16416  5CC3
16417  5CC4
16418  5CC5
16419  5CC6
16420  5CC7
16421  5CC8
16422  5CC9
16423  5CCA
16424  5CCB
16425  5CCC
16426  5CCD
16427  5CCE
16428  5CCF
16429  5CD0
16430  5CD1
16431  5CD2
16432  5CD3
16433  5CD4
16434  5CD5
16435  5CD6
16436  5CD7
16437  5CD8
16438  5CD9
16439  5CDA
16440  5CDB
16441  5CDC
16442  5CDD
16443  5CDE
16444  5CDF
16445  5CE0
16446  5CE1
16447  5CE2
16448  5CE3
16449  5CE4
16450  5CE5
16451  5CE6
16452  5CE7
16453  5CE8
16454  5CE9
16455  5CEA
16456  5CEB
16457  5CEC
16458  5CED
16459  5CEE
16460  5CEF
16461  5CF0
16462  5CF1
16463  5CF2
16464  5CF3
16465  5CF4
16466  5CF5
16467  5CF6
16468  5CF7
16469  5CF8
16470  5CF9
16471  5CFA
16472  5CFB
16473  5CFC
16474  5CFD
16475  5CFE
16476  5CFF
16477  5D00
16478  5D01
16479  5D02
16480  5D03
16481  5D04
16482  5D05
16483  5D06
16484  5D07
16485  5D08
16486  5D09
16487  5D0A
16488  5D0B
16489  5D0C
16490  5D0D
16491  5D0E
16492  5D0F
16493  5D10
16494  5D11
16495  5D12
16496  5D13
16497  5D14
16498  5D15
16499  5D16
16500  5D17
16501  5D18
16502  5D19
16503  5D1A
16504  5D1B
16505  5D1C
16506  5D1D
16507  5D1E
16508  5D1F
16509  5D20
16510  5D21
16511  5D22
16512  5D23
16513  5D24
16514  5D25
16515  5D26
16516  5D27
16517  5D28
16518  5D29
16519  5D2A
16520  5D2B
16521  5D2C
16522  5D2D
16523  5D2E
16524  5D2F
16525  5D30
16526  5D31
16527  5D32
16528  5D33
16529  5D34
16530  5D35
16531  5D36
16532  5D37
16533  5D38
16534  5D39
16535  5D3A
16536  5D3B
16537  5D3C
16538  5D3D
16539  5D3E
16540  5D3F
16541  5D40
16542  5D41
16543  5D42
16544  5D43
16545  5D44
16546  5D45
16547  5D46
16548  5D47
16549  5D48
16550  5D49
16551  5D4A
16552  5D4B
16553  5D4C
16554  5D4D
16555  5D4E
16556  5D4F
16557  5D50
16558  5D51
16559  5D52
16560  5D53
16561  5D54
16562  5D55
16563  5D56
16564  5D57
16565  5D58
16566  5D59
16567  5D5A
16568  5D5B
16569  5D5C
16570  5D5D
16571  5D5E
16572  5D5F
16573  5D60
16574  5D61
16575  5D62
16576  5D63
16577  5D64
16578  5D65
16579  5D66
16580  5D67
16581  5D68
16582  5D69
16583  5D6A
16584  5D6B
16585  5D6C
16586  5D6D
16587  5D6E
16588  5D6F
16589  5D70
16590  5D71
16591  5D72
16592  5D73
16593  5D74
16594  5D75
16595  5D76
16596  5D77
16597  5D78
16598  5D79
16599  5D7A
16600  5D7B
16601  5D7C
16602  5D7D
16603  5D7E
16604  5D7F
16605  5D80
16606  5D81
16607  5D82
16608  5D83
16609  5D84
16610  5D85
16611  5D86
16612  5D87
16613  5D88
16614  5D89
16615  5D8A
16616  5D8B
16617  5D8C
16618  5D8D
16619  5D8E
16620  5D8F
16621  5D90
16622  5D91
16623  5D92
16624  5D93
16625  5D94
16626  5D95
16627  5D96
16628  5D97
16629  5D98
16630  5D99
16631  5D9A
16632  5D9B
16633  5D9C
16634  5D9D
16635  5D9E
16636  5D9F
16637  5DA0
16638  5DA1
16639  5DA2
16640  5DA3
16641  5DA4
16642  5DA5
16643  5DA6
16644  5DA7
16645  5DA8
16646  5DA9
16647  5DAA
16648  5DAB
16649  5DAC
16650  5DAD
16651  5DAE
16652  5DAF
16653  5DB0
16654  5DB1
16655  5DB2
16656  5DB3
16657  5DB4
16658  5DB5
16659  5DB6
16660  5DB7
16661  5DB8
16662  5DB9
16663  5DBA
16664  5DBB
16665  5DBC
16666  5DBD
16667  5DBE
16668  5DBF
16669  5DC0
16670  5DC1
16671  5DC2
16672  5DC3
16673  5DC4
16674  5DC5
16675  5DC6
16676  5DC7
16677  5DC8
16678  5DC9
16679  5DCA
16680  5DCB
16681  5DCC
16682  5DCD
16683  5DCE
16684  5DCF
16685  5DD0
16686  5DD1
16687  5DD2
16688  5DD3
16689  5DD4
16690  5DD5
16691  5DD6
16692  5DD7
16693  5DD8
16694  5DD9
16695  5DDA
16696  5DDB
16697  5DDC
16698  5DDD
16699  5DDE
16700  5DDF
16701  5DE0
16702  5DE1
16703  5DE2
16704  5DE3
16705  5DE4
16706  5DE5
16707  5DE6
16708  5DE7
16709  5DE8
16710  5DE9
16711  5DEA
16712  5DEB
16713  5DEC
16714  5DED
16715  5DEE
16716  5DEF
16717  5DF0
16718  5DF1
16719  5DF2
16720  5DF3
16721  5DF4
16722  5DF5
16723  5DF6
16724  5DF7
16725  5DF8
16726  5DF9
16727  5DFA
16728  5DFB
16729  5DFC
16730  5DFD
16731  5DFE
16732  5DFF
16733  5E00
16734  5E01
16735  5E02
16736  5E03
16737  5E04
16738  5E05
16739  5E06
16740  5E07
16741  5E08
16742  5E09
16743  5E0A
16744  5E0B
16745  5E0C
16746  5E0D
16747  5E0E
16748  5E0F
16749  5E10
16750  5E11
16751  5E12
16752  5E13
16753  5E14
16754  5E15
16755  5E16
16756  5E17
16757  5E18
16758  5E19
16759  5E1A
16760  5E1B
16761  5E1C
16762  5E1D
16763  5E1E
16764  5E1F
16765  5E20
16766  5E21
16767  5E22
16768  5E23
16769  5E24
16770  5E25
16771  5E26
16772  5E27
16773  5E28
16774  5E29
16775  5E2A
16776  5E2B
16777  5E2C
16778  5E2D
16779  5E2E
16780  5E2F
16781  5E30
16782  5E31
16783  5E32
16784  5E33
16785  5E34
16786  5E35
16787  5E36
16788  5E37
16789  5E38
16790  5E39
16791  5E3A
16792  5E3B
16793  5E3C
16794  5E3D
16795  5E3E
16796  5E3F
16797  5E40
16798  5E41
16799  5E42
16800  5E43
16801  5E44
16802  5E45
16803  5E46
16804  5E47
16805  5E48
16806  5E49
16807  5E4A
16808  5E4B
16809  5E4C
16810  5E4D
16811  5E4E
16812  5E4F
16813  5E50
16814  5E51
16815  5E52
16816  5E53
16817  5E54
16818  5E55
16819  5E56
16820  5E57
16821  5E58
16822  5E59
16823  5E5A
16824  5E5B
16825  5E5C
16826  5E5D
16827  5E5E
16828  5E5F
16829  5E60
16830  5E61
16831  5E62
16832  5E63
16833  5E64
16834  5E65
16835  5E66
16836  5E67
16837  5E68
16838  5E69
16839  5E6A
16840  5E6B
16841  5E6C
16842  5E6D
16843  5E6E
16844  5E6F
16845  5E70
16846  5E71
16847  5E72
16848  5E73
16849  5E74
16850  5E75
16851  5E76
16852  5E77
16853  5E78
16854  5E79
16855  5E7A
16856  5E7B
16857  5E7C
16858  5E7D
16859  5E7E
16860  5E7F
16861  5E80
16862  5E81
16863  5E82
16864  5E83
16865  5E84
16866  5E85
16867  5E86
16868  5E87
16869  5E88
16870  5E89
16871  5E8A
16872  5E8B
16873  5E8C
16874  5E8D
16875  5E8E
16876  5E8F
16877  5E90
16878  5E91
16879  5E92
16880  5E93
16881  5E94
16882  5E95
16883  5E96
16884  5E97
16885  5E98
16886  5E99
16887  5E9A
16888  5E9B
16889  5E9C
16890  5E9D
16891  5E9E
16892  5E9F
16893  5EA0
16894  5EA1
16895  5EA2
16896  5EA3
16897  5EA4
16898  5EA5
16899  5EA6
16900  5EA7
16901  5EA8
16902  5EA9
16903  5EAA
16904  5EAB
16905  5EAC
16906  5EAD
16907  5EAE
16908  5EAF
16909  5EB0
16910  5EB1
16911  5EB2
16912  5EB3
16913  5EB4
16914  5EB5
16915  5EB6
16916  5EB7
16917  5EB8
16918  5EB9
16919  5EBA
16920  5EBB
16921  5EBC
16922  5EBD
16923  5EBE
16924  5EBF
16925  5EC0
16926  5EC1
16927  5EC2
16928  5EC3
16929  5EC4
16930  5EC5
16931  5EC6
16932  5EC7
16933  5EC8
16934  5EC9
16935  5ECA
16936  5ECB
16937  5ECC
16938  5ECD
16939  5ECE
16940  5ECF
16941  5ED0
16942  5ED1
16943  5ED2
16944  5ED3
16945  5ED4
16946  5ED5
16947  5ED6
16948  5ED7
16949  5ED8
16950  5ED9
16951  5EDA
16952  5EDB
16953  5EDC
16954  5EDD
16955  5EDE
16956  5EDF
16957  5EE0
16958  5EE1
16959  5EE2
16960  5EE3
16961  5EE4
16962  5EE5
16963  5EE6
16964  5EE7
16965  5EE8
16966  5EE9
16967  5EEA
16968  5EEB
16969  5EEC
16970  5EED
16971  5EEE
16972  5EEF
16973  5EF0
16974  5EF1
16975  5EF2
16976  5EF3
16977  5EF4
16978  5EF5
16979  5EF6
16980  5EF7
16981  5EF8
16982  5EF9
16983  5EFA
16984  5EFB
16985  5EFC
16986  5EFD
16987  5EFE
16988  5EFF
16989  5F00
16990  5F01
16991  5F02
16992  5F03
16993  5F04
16994  5F05
16995  5F06
16996  5F07
16997  5F08
16998  5F09
16999  5F0A
17000  5F0B
17001  5F0C
17002  5F0D
17003  5F0E
17004  5F0F
17005  5F10
17006  5F11
17007  5F12
17008  5F13
17009  5F14
17010  5F15
17011  5F16
17012  5F17
17013  5F18
17014  5F19
17015  5F1A
17016  5F1B
17017  5F1C
17018  5F1D
17019  5F1E
17020  5F1F
17021  5F20
17022  5F21
17023  5F22
17024  5F23
17025  5F24
17026  5F25
17027  5F26
17028  5F27
17029  5F28
17030  5F29
17031  5F2A
17032  5F2B
17033  5F2C
17034  5F2D
17035  5F2E
17036  5F2F
17037  5F30
17038  5F31
17039  5F32
17040  5F33
17041  5F34
17042  5F35
17043  5F36
17044  5F37
17045  5F38
17046  5F39
17047  5F3A
17048  5F3B
17049  5F3C
17050  5F3D
17051  5F3E
17052  5F3F
17053  5F40
17054  5F41
17055  5F42
17056  5F43
17057  5F44
17058  5F45
17059  5F46
17060  5F47
17061  5F48
17062  5F49
17063  5F4A
17064  5F4B
17065  5F4C
17066  5F4D
17067  5F4E
17068  5F4F
17069  5F50
17070  5F51
17071  5F52
17072  5F53
17073  5F54
17074  5F55
17075  5F56
17076  5F57
17077  5F58
17078  5F59
17079  5F5A
17080  5F5B
17081  5F5C
17082  5F5D
17083  5F5E
17084  5F5F
17085  5F60
17086  5F61
17087  5F62
17088  5F63
17089  5F64
17090  5F65
17091  5F66
17092  5F67
17093  5F68
17094  5F69
17095  5F6A
17096  5F6B
17097  5F6C
17098  5F6D
17099  5F6E
17100  5F6F
17101  5F70
17102  5F71
17103  5F72
17104  5F73
17105  5F74
17106  5F75
17107  5F76
17108  5F77
17109  5F78
17110  5F79
17111  5F7A
17112  5F7B
17113  5F7C
17114  5F7D
17115  5F7E
17116  5F7F
17117  5F80
17118  5F81
17119  5F82
17120  5F83
17121  5F84
17122  5F85
17123  5F86
17124  5F87
17125  5F88
17126  5F89
17127  5F8A
17128  5F8B
17129  5F8C
17130  5F8D
17131  5F8E
17132  5F8F
17133  5F90
17134  5F91
17135  5F92
17136  5F93
17137  5F94
17138  5F95
17139  5F96
17140  5F97
17141  5F98
17142  5F99
17143  5F9A
17144  5F9B
17145  5F9C
17146  5F9D
17147  5F9E
17148  5F9F
17149  5FA0
17150  5FA1
17151  5FA2
17152  5FA3
17153  5FA4
17154  5FA5
17155  5FA6
17156  5FA7
17157  5FA8
17158  5FA9
17159  5FAA
17160  5FAB
17161  5FAC
17162  5FAD
17163  5FAE
17164  5FAF
17165  5FB0
17166  5FB1
17167  5FB2
17168  5FB3
17169  5FB4
17170  5FB5
17171  5FB6
17172  5FB7
17173  5FB8
17174  5FB9
17175  5FBA
17176  5FBB
17177  5FBC
17178  5FBD
17179  5FBE
17180  5FBF
17181  5FC0
17182  5FC1
17183  5FC2
17184  5FC3
17185  5FC4
17186  5FC5
17187  5FC6
17188  5FC7
17189  5FC8
17190  5FC9
17191  5FCA
17192  5FCB
17193  5FCC
17194  5FCD
17195  5FCE
17196  5FCF
17197  5FD0
17198  5FD1
17199  5FD2
17200  5FD3
17201  5FD4
17202  5FD5
17203  5FD6
17204  5FD7
17205  5FD8
17206  5FD9
17207  5FDA
17208  5FDB
17209  5FDC
17210  5FDD
17211  5FDE
17212  5FDF
17213  5FE0
17214  5FE1
17215  5FE2
17216  5FE3
17217  5FE4
17218  5FE5
17219  5FE6
17220  5FE7
17221  5FE8
17222  5FE9
17223  5FEA
17224  5FEB
17225  5FEC
17226  5FED
17227  5FEE
17228  5FEF
17229  5FF0
17230  5FF1
17231  5FF2
17232  5FF3
17233  5FF4
17234  5FF5
17235  5FF6
17236  5FF7
17237  5FF8
17238  5FF9
17239  5FFA
17240  5FFB
17241  5FFC
17242  5FFD
17243  5FFE
17244  5FFF
17245  6000
17246  6001
17247  6002
17248  6003
17249  6004
17250  6005
17251  6006
17252  6007
17253  6008
17254  6009
17255  600A
17256  600B
17257  600C
17258  600D
17259  600E
17260  600F
17261  6010
17262  6011
17263  6012
17264  6013
17265  6014
17266  6015
17267  6016
17268  6017
17269  6018
17270  6019
17271  601A
17272  601B
17273  601C
17274  601D
17275  601E
17276  601F
17277  6020
17278  6021
17279  6022
17280  6023
17281  6024
17282  6025
17283  6026
17284  6027
17285  6028
17286  6029
17287  602A
17288  602B
17289  602C
17290  602D
17291  602E
17292  602F
17293  6030
17294  6031
17295  6032
17296  6033
17297  6034
17298  6035
17299  6036
17300  6037
17301  6038
17302  6039
17303  603A
17304  603B
17305  603C
17306  603D
17307  603E
17308  603F
17309  6040
17310  6041
17311  6042
17312  6043
17313  6044
17314  6045
17315  6046
17316  6047
17317  6048
17318  6049
17319  604A
17320  604B
17321  604C
17322  604D
17323  604E
17324  604F
17325  6050
17326  6051
17327  6052
17328  6053
17329  6054
17330  6055
17331  6056
17332  6057
17333  6058
17334  6059
17335  605A
17336  605B
17337  605C
17338  605D
17339  605E
17340  605F
17341  6060
17342  6061
17343  6062
17344  6063
17345  6064
17346  6065
17347  6066
17348  6067
17349  6068
17350  6069
17351  606A
17352  606B
17353  606C
17354  606D
17355  606E
17356  606F
17357  6070
17358  6071
17359  6072
17360  6073
17361  6074
17362  6075
17363  6076
17364  6077
17365  6078
17366  6079
17367  607A
17368  607B
17369  607C
17370  607D
17371  607E
17372  607F
17373  6080
17374  6081
17375  6082
17376  6083
17377  6084
17378  6085
17379  6086
17380  6087
17381  6088
17382  6089
17383  608A
17384  608B
17385  608C
17386  608D
17387  608E
17388  608F
17389  6090
17390  6091
17391  6092
17392  6093
17393  6094
17394  6095
17395  6096
17396  6097
17397  6098
17398  6099
17399  609A
17400  609B
17401  609C
17402  609D
17403  609E
17404  609F
17405  60A0
17406  60A1
17407  60A2
17408  60A3
17409  60A4
17410  60A5
17411  60A6
17412  60A7
17413  60A8
17414  60A9
17415  60AA
17416  60AB
17417  60AC
17418  60AD
17419  60AE
17420  60AF
17421  60B0
17422  60B1
17423  60B2
17424  60B3
17425  60B4
17426  60B5
17427  60B6
17428  60B7
17429  60B8
17430  60B9
17431  60BA
17432  60BB
17433  60BC
17434  60BD
17435  60BE
17436  60BF
17437  60C0
17438  60C1
17439  60C2
17440  60C3
17441  60C4
17442  60C5
17443  60C6
17444  60C7
17445  60C8
17446  60C9
17447  60CA
17448  60CB
17449  60CC
17450  60CD
17451  60CE
17452  60CF
17453  60D0
17454  60D1
17455  60D2
17456  60D3
17457  60D4
17458  60D5
17459  60D6
17460  60D7
17461  60D8
17462  60D9
17463  60DA
17464  60DB
17465  60DC
17466  60DD
17467  60DE
17468  60DF
17469  60E0
17470  60E1
17471  60E2
17472  60E3
17473  60E4
17474  60E5
17475  60E6
17476  60E7
17477  60E8
17478  60E9
17479  60EA
17480  60EB
17481  60EC
17482  60ED
17483  60EE
17484  60EF
17485  60F0
17486  60F1
17487  60F2
17488  60F3
17489  60F4
17490  60F5
17491  60F6
17492  60F7
17493  60F8
17494  60F9
17495  60FA
17496  60FB
17497  60FC
17498  60FD
17499  60FE
17500  60FF
17501  6100
17502  6101
17503  6102
17504  6103
17505  6104
17506  6105
17507  6106
17508  6107
17509  6108
17510  6109
17511  610A
17512  610B
17513  610C
17514  610D
17515  610E
17516  610F
17517  6110
17518  6111
17519  6112
17520  6113
17521  6114
17522  6115
17523  6116
17524  6117
17525  6118
17526  6119
17527  611A
17528  611B
17529  611C
17530  611D
17531  611E
17532  611F
17533  6120
17534  6121
17535  6122
17536  6123
17537  6124
17538  6125
17539  6126
17540  6127
17541  6128
17542  6129
17543  612A
17544  612B
17545  612C
17546  612D
17547  612E
17548  612F
17549  6130
17550  6131
17551  6132
17552  6133
17553  6134
17554  6135
17555  6136
17556  6137
17557  6138
17558  6139
17559  613A
17560  613B
17561  613C
17562  613D
17563  613E
17564  613F
17565  6140
17566  6141
17567  6142
17568  6143
17569  6144
17570  6145
17571  6146
17572  6147
17573  6148
17574  6149
17575  614A
17576  614B
17577  614C
17578  614D
17579  614E
17580  614F
17581  6150
17582  6151
17583  6152
17584  6153
17585  6154
17586  6155
17587  6156
17588  6157
17589  6158
17590  6159
17591  615A
17592  615B
17593  615C
17594  615D
17595  615E
17596  615F
17597  6160
17598  6161
17599  6162
17600  6163
17601  6164
17602  6165
17603  6166
17604  6167
17605  6168
17606  6169
17607  616A
17608  616B
17609  616C
17610  616D
17611  616E
17612  616F
17613  6170
17614  6171
17615  6172
17616  6173
17617  6174
17618  6175
17619  6176
17620  6177
17621  6178
17622  6179
17623  617A
17624  617B
17625  617C
17626  617D
17627  617E
17628  617F
17629  6180
17630  6181
17631  6182
17632  6183
17633  6184
17634  6185
17635  6186
17636  6187
17637  6188
17638  6189
17639  618A
17640  618B
17641  618C
17642  618D
17643  618E
17644  618F
17645  6190
17646  6191
17647  6192
17648  6193
17649  6194
17650  6195
17651  6196
17652  6197
17653  6198
17654  6199
17655  619A
17656  619B
17657  619C
17658  619D
17659  619E
17660  619F
17661  61A0
17662  61A1
17663  61A2
17664  61A3
17665  61A4
17666  61A5
17667  61A6
17668  61A7
17669  61A8
17670  61A9
17671  61AA
17672  61AB
17673  61AC
17674  61AD
17675  61AE
17676  61AF
17677  61B0
17678  61B1
17679  61B2
17680  61B3
17681  61B4
17682  61B5
17683  61B6
17684  61B7
17685  61B8
17686  61B9
17687  61BA
17688  61BB
17689  61BC
17690  61BD
17691  61BE
17692  61BF
17693  61C0
17694  61C1
17695  61C2
17696  61C3
17697  61C4
17698  61C5
17699  61C6
17700  61C7
17701  61C8
17702  61C9
17703  61CA
17704  61CB
17705  61CC
17706  61CD
17707  61CE
17708  61CF
17709  61D0
17710  61D1
17711  61D2
17712  61D3
17713  61D4
17714  61D5
17715  61D6
17716  61D7
17717  61D8
17718  61D9
17719  61DA
17720  61DB
17721  61DC
17722  61DD
17723  61DE
17724  61DF
17725  61E0
17726  61E1
17727  61E2
17728  61E3
17729  61E4
17730  61E5
17731  61E6
17732  61E7
17733  61E8
17734  61E9
17735  61EA
17736  61EB
17737  61EC
17738  61ED
17739  61EE
17740  61EF
17741  61F0
17742  61F1
17743  61F2
17744  61F3
17745  61F4
17746  61F5
17747  61F6
17748  61F7
17749  61F8
17750  61F9
17751  61FA
17752  61FB
17753  61FC
17754  61FD
17755  61FE
17756  61FF
17757  6200
17758  6201
17759  6202
17760  6203
17761  6204
17762  6205
17763  6206
17764  6207
17765  6208
17766  6209
17767  620A
17768  620B
17769  620C
17770  620D
17771  620E
17772  620F
17773  6210
17774  6211
17775  6212
17776  6213
17777  6214
17778  6215
17779  6216
17780  6217
17781  6218
17782  6219
17783  621A
17784  621B
17785  621C
17786  621D
17787  621E
17788  621F
17789  6220
17790  6221
17791  6222
17792  6223
17793  6224
17794  6225
17795  6226
17796  6227
17797  6228
17798  6229
17799  622A
17800  622B
17801  622C
17802  622D
17803  622E
17804  622F
17805  6230
17806  6231
17807  6232
17808  6233
17809  6234
17810  6235
17811  6236
17812  6237
17813  6238
17814  6239
17815  623A
17816  623B
17817  623C
17818  623D
17819  623E
17820  623F
17821  6240
17822  6241
17823  6242
17824  6243
17825  6244
17826  6245
17827  6246
17828  6247
17829  6248
17830  6249
17831  624A
17832  624B
17833  624C
17834  624D
17835  624E
17836  624F
17837  6250
17838  6251
17839  6252
17840  6253
17841  6254
17842  6255
17843  6256
17844  6257
17845  6258
17846  6259
17847  625A
17848  625B
17849  625C
17850  625D
17851  625E
17852  625F
17853  6260
17854  6261
17855  6262
17856  6263
17857  6264
17858  6265
17859  6266
17860  6267
17861  6268
17862  6269
17863  626A
17864  626B
17865  626C
17866  626D
17867  626E
17868  626F
17869  6270
17870  6271
17871  6272
17872  6273
17873  6274
17874  6275
17875  6276
17876  6277
17877  6278
17878  6279
17879  627A
17880  627B
17881  627C
17882  627D
17883  627E
17884  627F
17885  6280
17886  6281
17887  6282
17888  6283
17889  6284
17890  6285
17891  6286
17892  6287
17893  6288
17894  6289
17895  628A
17896  628B
17897  628C
17898  628D
17899  628E
17900  628F
17901  6290
17902  6291
17903  6292
17904  6293
17905  6294
17906  6295
17907  6296
17908  6297
17909  6298
17910  6299
17911  629A
17912  629B
17913  629C
17914  629D
17915  629E
17916  629F
17917  62A0
17918  62A1
17919  62A2
17920  62A3
17921  62A4
17922  62A5
17923  62A6
17924  62A7
17925  62A8
17926  62A9
17927  62AA
17928  62AB
17929  62AC
17930  62AD
17931  62AE
17932  62AF
17933  62B0
17934  62B1
17935  62B2
17936  62B3
17937  62B4
17938  62B5
17939  62B6
17940  62B7
17941  62B8
17942  62B9
17943  62BA
17944  62BB
17945  62BC
17946  62BD
17947  62BE
17948  62BF
17949  62C0
17950  62C1
17951  62C2
17952  62C3
17953  62C4
17954  62C5
17955  62C6
17956  62C7
17957  62C8
17958  62C9
17959  62CA
17960  62CB
17961  62CC
17962  62CD
17963  62CE
17964  62CF
17965  62D0
17966  62D1
17967  62D2
17968  62D3
17969  62D4
17970  62D5
17971  62D6
17972  62D7
17973  62D8
17974  62D9
17975  62DA
17976  62DB
17977  62DC
17978  62DD
17979  62DE
17980  62DF
17981  62E0
17982  62E1
17983  62E2
17984  62E3
17985  62E4
17986  62E5
17987  62E6
17988  62E7
17989  62E8
17990  62E9
17991  62EA
17992  62EB
17993  62EC
17994  62ED
17995  62EE
17996  62EF
17997  62F0
17998  62F1
17999  62F2
18000  62F3
18001  62F4
18002  62F5
18003  62F6
18004  62F7
18005  62F8
18006  62F9
18007  62FA
18008  62FB
18009  62FC
18010  62FD
18011  62FE
18012  62FF
18013  6300
18014  6301
18015  6302
18016  6303
18017  6304
18018  6305
18019  6306
18020  6307
18021  6308
18022  6309
18023  630A
18024  630B
18025  630C
18026  630D
18027  630E
18028  630F
18029  6310
18030  6311
18031  6312
18032  6313
18033  6314
18034  6315
18035  6316
18036  6317
18037  6318
18038  6319
18039  631A
18040  631B
18041  631C
18042  631D
18043  631E
18044  631F
18045  6320
18046  6321
18047  6322
18048  6323
18049  6324
18050  6325
18051  6326
18052  6327
18053  6328
18054  6329
18055  632A
18056  632B
18057  632C
18058  632D
18059  632E
18060  632F
18061  6330
18062  6331
18063  6332
18064  6333
18065  6334
18066  6335
18067  6336
18068  6337
18069  6338
18070  6339
18071  633A
18072  633B
18073  633C
18074  633D
18075  633E
18076  633F
18077  6340
18078  6341
18079  6342
18080  6343
18081  6344
18082  6345
18083  6346
18084  6347
18085  6348
18086  6349
18087  634A
18088  634B
18089  634C
18090  634D
18091  634E
18092  634F
18093  6350
18094  6351
18095  6352
18096  6353
18097  6354
18098  6355
18099  6356
18100  6357
18101  6358
18102  6359
18103  635A
18104  635B
18105  635C
18106  635D
18107  635E
18108  635F
18109  6360
18110  6361
18111  6362
18112  6363
18113  6364
18114  6365
18115  6366
18116  6367
18117  6368
18118  6369
18119  636A
18120  636B
18121  636C
18122  636D
18123  636E
18124  636F
18125  6370
18126  6371
18127  6372
18128  6373
18129  6374
18130  6375
18131  6376
18132  6377
18133  6378
18134  6379
18135  637A
18136  637B
18137  637C
18138  637D
18139  637E
18140  637F
18141  6380
18142  6381
18143  6382
18144  6383
18145  6384
18146  6385
18147  6386
18148  6387
18149  6388
18150  6389
18151  638A
18152  638B
18153  638C
18154  638D
18155  638E
18156  638F
18157  6390
18158  6391
18159  6392
18160  6393
18161  6394
18162  6395
18163  6396
18164  6397
18165  6398
18166  6399
18167  639A
18168  639B
18169  639C
18170  639D
18171  639E
18172  639F
18173  63A0
18174  63A1
18175  63A2
18176  63A3
18177  63A4
18178  63A5
18179  63A6
18180  63A7
18181  63A8
18182  63A9
18183  63AA
18184  63AB
18185  63AC
18186  63AD
18187  63AE
18188  63AF
18189  63B0
18190  63B1
18191  63B2
18192  63B3
18193  63B4
18194  63B5
18195  63B6
18196  63B7
18197  63B8
18198  63B9
18199  63BA
18200  63BB
18201  63BC
18202  63BD
18203  63BE
18204  63BF
18205  63C0
18206  63C1
18207  63C2
18208  63C3
18209  63C4
18210  63C5
18211  63C6
18212  63C7
18213  63C8
18214  63C9
18215  63CA
18216  63CB
18217  63CC
18218  63CD
18219  63CE
18220  63CF
18221  63D0
18222  63D1
18223  63D2
18224  63D3
18225  63D4
18226  63D5
18227  63D6
18228  63D7
18229  63D8
18230  63D9
18231  63DA
18232  63DB
18233  63DC
18234  63DD
18235  63DE
18236  63DF
18237  63E0
18238  63E1
18239  63E2
18240  63E3
18241  63E4
18242  63E5
18243  63E6
18244  63E7
18245  63E8
18246  63E9
18247  63EA
18248  63EB
18249  63EC
18250  63ED
18251  63EE
18252  63EF
18253  63F0
18254  63F1
18255  63F2
18256  63F3
18257  63F4
18258  63F5
18259  63F6
18260  63F7
18261  63F8
18262  63F9
18263  63FA
18264  63FB
18265  63FC
18266  63FD
18267  63FE
18268  63FF
18269  6400
18270  6401
18271  6402
18272  6403
18273  6404
18274  6405
18275  6406
18276  6407
18277  6408
18278  6409
18279  640A
18280  640B
18281  640C
18282  640D
18283  640E
18284  640F
18285  6410
18286  6411
18287  6412
18288  6413
18289  6414
18290  6415
18291  6416
18292  6417
18293  6418
18294  6419
18295  641A
18296  641B
18297  641C
18298  641D
18299  641E
18300  641F
18301  6420
18302  6421
18303  6422
18304  6423
18305  6424
18306  6425
18307  6426
18308  6427
18309  6428
18310  6429
18311  642A
18312  642B
18313  642C
18314  642D
18315  642E
18316  642F
18317  6430
18318  6431
18319  6432
18320  6433
18321  6434
18322  6435
18323  6436
18324  6437
18325  6438
18326  6439
18327  643A
18328  643B
18329  643C
18330  643D
18331  643E
18332  643F
18333  6440
18334  6441
18335  6442
18336  6443
18337  6444
18338  6445
18339  6446
18340  6447
18341  6448
18342  6449
18343  644A
18344  644B
18345  644C
18346  644D
18347  644E
18348  644F
18349  6450
18350  6451
18351  6452
18352  6453
18353  6454
18354  6455
18355  6456
18356  6457
18357  6458
18358  6459
18359  645A
18360  645B
18361  645C
18362  645D
18363  645E
18364  645F
18365  6460
18366  6461
18367  6462
18368  6463
18369  6464
18370  6465
18371  6466
18372  6467
18373  6468
18374  6469
18375  646A
18376  646B
18377  646C
18378  646D
18379  646E
18380  646F
18381  6470
18382  6471
18383  6472
18384  6473
18385  6474
18386  6475
18387  6476
18388  6477
18389  6478
18390  6479
18391  647A
18392  647B
18393  647C
18394  647D
18395  647E
18396  647F
18397  6480
18398  6481
18399  6482
18400  6483
18401  6484
18402  6485
18403  6486
18404  6487
18405  6488
18406  6489
18407  648A
18408  648B
18409  648C
18410  648D
18411  648E
18412  648F
18413  6490
18414  6491
18415  6492
18416  6493
18417  6494
18418  6495
18419  6496
18420  6497
18421  6498
18422  6499
18423  649A
18424  649B
18425  649C
18426  649D
18427  649E
18428  649F
18429  64A0
18430  64A1
18431  64A2
18432  64A3
18433  64A4
18434  64A5
18435  64A6
18436  64A7
18437  64A8
18438  64A9
18439  64AA
18440  64AB
18441  64AC
18442  64AD
18443  64AE
18444  64AF
18445  64B0
18446  64B1
18447  64B2
18448  64B3
18449  64B4
18450  64B5
18451  64B6
18452  64B7
18453  64B8
18454  64B9
18455  64BA
18456  64BB
18457  64BC
18458  64BD
18459  64BE
18460  64BF
18461  64C0
18462  64C1
18463  64C2
18464  64C3
18465  64C4
18466  64C5
18467  64C6
18468  64C7
18469  64C8
18470  64C9
18471  64CA
18472  64CB
18473  64CC
18474  64CD
18475  64CE
18476  64CF
18477  64D0
18478  64D1
18479  64D2
18480  64D3
18481  64D4
18482  64D5
18483  64D6
18484  64D7
18485  64D8
18486  64D9
18487  64DA
18488  64DB
18489  64DC
18490  64DD
18491  64DE
18492  64DF
18493  64E0
18494  64E1
18495  64E2
18496  64E3
18497  64E4
18498  64E5
18499  64E6
18500  64E7
18501  64E8
18502  64E9
18503  64EA
18504  64EB
18505  64EC
18506  64ED
18507  64EE
18508  64EF
18509  64F0
18510  64F1
18511  64F2
18512  64F3
18513  64F4
18514  64F5
18515  64F6
18516  64F7
18517  64F8
18518  64F9
18519  64FA
18520  64FB
18521  64FC
18522  64FD
18523  64FE
18524  64FF
18525  6500
18526  6501
18527  6502
18528  6503
18529  6504
18530  6505
18531  6506
18532  6507
18533  6508
18534  6509
18535  650A
18536  650B
18537  650C
18538  650D
18539  650E
18540  650F
18541  6510
18542  6511
18543  6512
18544  6513
18545  6514
18546  6515
18547  6516
18548  6517
18549  6518
18550  6519
18551  651A
18552  651B
18553  651C
18554  651D
18555  651E
18556  651F
18557  6520
18558  6521
18559  6522
18560  6523
18561  6524
18562  6525
18563  6526
18564  6527
18565  6528
18566  6529
18567  652A
18568  652B
18569  652C
18570  652D
18571  652E
18572  652F
18573  6530
18574  6531
18575  6532
18576  6533
18577  6534
18578  6535
18579  6536
18580  6537
18581  6538
18582  6539
18583  653A
18584  653B
18585  653C
18586  653D
18587  653E
18588  653F
18589  6540
18590  6541
18591  6542
18592  6543
18593  6544
18594  6545
18595  6546
18596  6547
18597  6548
18598  6549
18599  654A
18600  654B
18601  654C
18602  654D
18603  654E
18604  654F
18605  6550
18606  6551
18607  6552
18608  6553
18609  6554
18610  6555
18611  6556
18612  6557
18613  6558
18614  6559
18615  655A
18616  655B
18617  655C
18618  655D
18619  655E
18620  655F
18621  6560
18622  6561
18623  6562
18624  6563
18625  6564
18626  6565
18627  6566
18628  6567
18629  6568
18630  6569
18631  656A
18632  656B
18633  656C
18634  656D
18635  656E
18636  656F
18637  6570
18638  6571
18639  6572
18640  6573
18641  6574
18642  6575
18643  6576
18644  6577
18645  6578
18646  6579
18647  657A
18648  657B
18649  657C
18650  657D
18651  657E
18652  657F
18653  6580
18654  6581
18655  6582
18656  6583
18657  6584
18658  6585
18659  6586
18660  6587
18661  6588
18662  6589
18663  658A
18664  658B
18665  658C
18666  658D
18667  658E
18668  658F
18669  6590
18670  6591
18671  6592
18672  6593
18673  6594
18674  6595
18675  6596
18676  6597
18677  6598
18678  6599
18679  659A
18680  659B
18681  659C
18682  659D
18683  659E
18684  659F
18685  65A0
18686  65A1
18687  65A2
18688  65A3
18689  65A4
18690  65A5
18691  65A6
18692  65A7
18693  65A8
18694  65A9
18695  65AA
18696  65AB
18697  65AC
18698  65AD
18699  65AE
18700  65AF
18701  65B0
18702  65B1
18703  65B2
18704  65B3
18705  65B4
18706  65B5
18707  65B6
18708  65B7
18709  65B8
18710  65B9
18711  65BA
18712  65BB
18713  65BC
18714  65BD
18715  65BE
18716  65BF
18717  65C0
18718  65C1
18719  65C2
18720  65C3
18721  65C4
18722  65C5
18723  65C6
18724  65C7
18725  65C8
18726  65C9
18727  65CA
18728  65CB
18729  65CC
18730  65CD
18731  65CE
18732  65CF
18733  65D0
18734  65D1
18735  65D2
18736  65D3
18737  65D4
18738  65D5
18739  65D6
18740  65D7
18741  65D8
18742  65D9
18743  65DA
18744  65DB
18745  65DC
18746  65DD
18747  65DE
18748  65DF
18749  65E0
18750  65E1
18751  65E2
18752  65E3
18753  65E4
18754  65E5
18755  65E6
18756  65E7
18757  65E8
18758  65E9
18759  65EA
18760  65EB
18761  65EC
18762  65ED
18763  65EE
18764  65EF
18765  65F0
18766  65F1
18767  65F2
18768  65F3
18769  65F4
18770  65F5
18771  65F6
18772  65F7
18773  65F8
18774  65F9
18775  65FA
18776  65FB
18777  65FC
18778  65FD
18779  65FE
18780  65FF
18781  6600
18782  6601
018783  000673        
018784  000674  var hFonts[53] ;
018785  000675  var stringsCV[53] := [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], hstrings ;
18786  336E
18787  336F
18788  3370
18789  3371
18790  3372
18791  3373
18792  3374
18793  3375
18794  3376
18795  3377
18796  3378
18797  3379
18798  337A
18799  337B
18800  337C
18801  337D
18802  337E
18803  337F
18804  3380
18805  3381
18806  3382
18807  3383
18808  3384
18809  3385
18810  3386
18811  3387
18812  3388
18813  3389
18814  338A
18815  338B
18816  338C
18817  338D
18818  338E
18819  338F
18820  3390
18821  3391
18822  3392
18823  3393
18824  3394
18825  3395
18826  3396
18827  3397
18828  3398
18829  3399
18830  339A
18831  339B
18832  339C
18833  339D
18834  339E
18835  339F
18836  33A0
18837  33A1
18838  33A2
18839  33A3
18840  33A4
18841  33A5
18842  33A6
18843  33A7
18844  33A8
18845  33A9
18846  33AA
18847  33AB
18848  33AC
18849  33AD
18850  33AE
18851  33AF
18852  33B0
18853  33B1
18854  33B2
18855  33B3
18856  33B4
18857  33B5
18858  33B6
18859  33B7
18860  33B8
18861  33B9
18862  33BA
18863  33BB
18864  33BC
18865  33BD
18866  33BE
18867  33BF
18868  33C0
18869  33C1
18870  33C2
18871  33C3
18872  33C4
18873  33C5
18874  33C6
18875  33C7
18876  33C8
18877  33C9
18878  33CA
18879  33CB
18880  33CC
18881  33CD
18882  33CE
18883  33CF
18884  33D0
18885  33D1
18886  33D2
18887  33D3
18888  33D4
18889  33D5
18890  33D6
18891  33D7
018892  000676  // Start P2.inc
018893  000677  var oObjects[MaxTotObjects+1] ;                 // address of objects
018894  000678  var CurrentForm ;
018895  000679  var TouchXpos, TouchYpos ;
018896  000680  var InputType, TouchState, CurInputData, pInputIndex ;
018897  000681  var comRX[40], cmd[CMDLenMAX] ;
018898  000682        
018899  000683  var InputCS, OutputCS ;
018900  000684        
018901  000685        
018902  000686        
018903  000687  func seroutCS(var op)
018904  000688      serout(op) ;
018905  000689      OutputCS ^= op ;
018906  000690  endfunc
018907  000691        
018908  000692  func nak0()
018909  000693      serout(NAK) ;
018910  000694      InputCS := 0 ;
018911  000695  endfunc
018912  000696        
018913  000697  func seroutOcs()
018914  000698      serout(OutputCS) ;
018915  000699      OutputCS := 0 ;
018916  000700  endfunc
018917  000701        
018918  000702  func SendReport(var id, var objt, var objn, var val)
018919  000703      seroutCS(id) ;
018920  000704      seroutCS(objt) ;
018921  000705      seroutCS(objn) ;
018922  000706      seroutCS(val >> 8) ; // first 8 bits
018923  000707      seroutCS(val) ;
018924  000708      seroutOcs() ;
018925  000709  endfunc
018926  000710        
018927  000711        
018928  000712  func ReadObject(var ObjectType, var ObjectIdx)
018929  000713      var j, k, Objects ;
018930  000714      Objects := *(oObjects+ObjectType) ;
018931  000715        
018932  000716      j := 2 + ObjectIdx * 2 + Objects ;
018933  000717       if (ObjectType == tForm)
018934  000718          k := CurrentForm ;
018935  000719      else if (ObjectType == tStrings)
018936  000720          k := stringsCV[ObjectIdx];
018937  000721          else
018938  000722          k := img_GetWord(hndl, *j, IMAGE_INDEX);
018939  000723          if (((ObjectType == tWinButton) || (ObjectType == tAniButton) || (ObjectType == tUserButton) || (ObjectType == t4Dbutton)) && (k)) k := 1 ; // this is not correct for blocked buttons and cannot be fixed as we cannot
018940  000724                                                                                                                                                      // determine if button is momentary or not which is needed for correct answer.
018941  000725      endif
018942  000726      SendReport(REPORT_OBJ, ObjectType, ObjectIdx, k) ;
018943  000727  endfunc
018944  000728        
018945  000729        
018946  000730  func WriteObject(var ObjectType, var ObjectIdx, var NewVal)
018947  000731      var i, j, k, Objects ;
018948  000732      ObjectType &= 0x3f ;
018949  000733      if (ObjectType == tForm)
018950  000734          ActivateForm(ObjectIdx) ;
018951  000735      else
018952  000736          Objects := *(oObjects+ObjectType)+ObjectIdx*2+2 ;
018953  000737          i := *(Objects) ;
018954  000738          switch (ObjectType)
018955  000739              case tUserButton :
018956  000740                  j := InputControls[oUserButtons[ObjectIdx+1]] ;
018957  000741                  break ;
018958  000742              default : j := -1 ;
018959  000743          endswitch
018960  000744          if (j != -1)
018961  000745              k := img_GetWord(hndl, i , IMAGE_INDEX) ;
018962  000746              NewVal := NewVal << 1 ;
018963  000747              if (OVF())      // button group index change
018964  000748                  if (*(j+InputData+Ofs_IPD_P1))
018965  000749                      k &= 1 ;    // mask off old group index for momentary
018966  000750                  else
018967  000751                      k &= 3 ;    // mask off old group index for toggle
018968  000752                  endif
018969  000753              else            // normal set
018970  000754                  if (*(j+InputData+Ofs_IPD_P2) != -1) TurnOffButtons(*(j+InputData+Ofs_IPD_P2)) ;
018971  000755                  k &= 0xfffc ;    // retain only group index for state set
018972  000756              endif
018973  000757              NewVal |= k ;
018974  000758          endif
018975  000759           if (ObjectType == tStrings)
018976  000760              PrintStrings(ObjectIdx, NewVal, 0);
018977  000761          else
018978  000762              img_SetWord(hndl, i , IMAGE_INDEX, NewVal); // where state is 0 to 2
018979  000763              img_Show(hndl, i) ; // will only display if form is current
018980  000764          endif
018981  000765      endif
018982  000766  endfunc
018983  000767        
018984  000768  func TurnOffButtons(var group)
018985  000769      var j, k, l;
018986  000770      for (j := 0; j < nInputs; j++)
018987  000771          k := j*IPDatasize ;
018988  000772          if (*(InputData+k+Ofs_IPD_P2) == group)
018989  000773              l := -1 ;
018990  000774               if (*(InputData+k) == tUserButton)
018991  000775                  l := oUserButtons[*(InputData+k+Ofs_IPD_OBJVIDX)/2] ;
018992  000776                  img_SetWord(hndl, l, IMAGE_INDEX, img_GetWord(hndl, l, IMAGE_INDEX) & 0xfffc );
018993  000777                  img_Show(hndl, l);      // only shows on current form
018994  000778              endif
018995  000779          endif
018996  000780      next
018997  000781  endfunc
018998  000782        
018999  000783        
019000  000784        
019001  000785        
019002  000786  func ActivateForm(var newform)
019003  000787      var i, j, *p ;
019004  000788        
019005  000789      if (CurrentForm != -1) // deactivate old form, by disabling all inputs
019006  000790          for (i := FormStartIndex[CurrentForm]; i <= FormEndIndex[CurrentForm]; i++)
019007  000791              if (img_GetWord(hndl, i, IMAGE_TAG))
019008  000792                  img_Disable(hndl,i) ;
019009  000793              endif
019010  000794          next
019011  000795      endif
019012  000796      CurrentForm := newform ;
019013  000797      // display newform image or clear to image color
019014  000798      if (FormBGcolors[CurrentForm] != ColorBGimage)
019015  000799          gfx_Set(BACKGROUND_COLOUR,FormBGcolors[CurrentForm]);
019016  000800          gfx_Cls() ;
019017  000801          DoGFXObjects() ;                                    // display GFX 'widgets'
019018  000802      endif
019019  000803        
019020  000804      // enable inputs
019021  000805      for (i := FormStartIndex[CurrentForm]; i < FormEndIndex[CurrentForm]; i++)
019022  000806          j := img_GetWord(hndl, i, IMAGE_TAG) ;
019023  000807          if (j)
019024  000808              j-- ;
019025  000809              img_SetAttributes(hndl, i, I_STAYONTOP+I_ENABLED);        // make sure this is on top of form, if applicable
019026  000810              //if (j != tKeyboard)
019027  000811              if ((j <= tWinButton) || (j >= t4Dbutton) )               // enable inputs
019028  000812                  img_ClearAttributes(hndl, i, I_TOUCH_DISABLE);        // ensure touch is enabled
019029  000813              endif
019030  000814              img_Show(hndl,i) ; // show initialy, if required
019031  000815              if (j == tForm)
019032  000816                  DoGFXObjects() ;                                    // display GFX 'widgets' for image backgruobds
019033  000817              endif
019034  000818          endif
019035  000819      next
019036  000820      for (i := 0; i < nStrings; i++)
019037  000821          if (stringsCV[i] != -1)
019038  000822              WriteObject(tStrings, i, stringsCV[i]) ;
019039  000823          endif
019040  000824      next
019041  000825        
019042  000826  endfunc
019043  000827        
019044  000828  func UpdateObjects(var newval)
019045  000829      var IPidx, otherOBJ ;
019046  000830      if ( ( img_GetWord(hndl, *(pInputIndex), IMAGE_INDEX) != newval) || (TouchState == Ofs_IPD_RELEASE) ) // only bother if values changed, or release
019047  000831        
019048  000832          img_SetWord(hndl, *(pInputIndex), IMAGE_INDEX, newval);
019049  000833              img_Show(hndl, *(pInputIndex));      // only shows on current form
019050  000834          if ((InputType == t4Dbutton) || (InputType == tUserButton) || (InputType == tWinButton))
019051  000835              if (*(CurInputData+Ofs_IPD_P1))
019052  000836                  newval &= 1;
019053  000837              else
019054  000838                  newval &= 3;
019055  000839              endif
019056  000840              if (newval > 1) newval := 1;
019057  000841          endif
019058  000842          IPidx := *(CurInputData+TouchState) ;
019059  000843          while(IPidx != 0)
019060  000844              otherOBJ := IPidx + InputData;
019061  000845              if (*(otherOBJ) == OT_REPORT)
019062  000846          SendReport(REPORT_EVENT, InputType, *(otherOBJ+Ofs_IPD_OBJVIDX), newval) ;
019063  000847              else if (*(otherOBJ) == OT_MAGIC)
019064  000848                  IPidx := *(otherOBJ+Ofs_IPD_P5) ;
019065  000849                  IPidx(newval) ;
019066  000850              else if (TouchState == *(otherOBJ+Ofs_IPD_P4))
019067  000851                  if (*(otherOBJ) == OT_ACTIVATE)
019068  000852                      ActivateForm(*(otherOBJ+Ofs_IPD_P2) ) ;
019069  000853                      InputType := tForm ;
019070  000854                  else if (*(otherOBJ) == OT_SETCONST)
019071  000855                      newval := *(otherOBJ+Ofs_IPD_P3) ;
019072  000856                      WriteObject(*(otherOBJ+Ofs_IPD_P1), *(otherOBJ+Ofs_IPD_P2), newval) ;
019073  000857                  else if (*(otherOBJ) == OT_SETANOTHER)
019074  000858                      WriteObject(*(otherOBJ+Ofs_IPD_P1), *(otherOBJ+Ofs_IPD_P2), newval) ;
019075  000859                  else if (*(otherOBJ) == OT_PREVFRAME)
019076  000860                      if (img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX))
019077  000861                          WriteObject(*(otherOBJ+Ofs_IPD_P5),*(otherOBJ+Ofs_IPD_P2),img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX)-1) ;
019078  000862                      endif
019079  000863                      newval := img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX) ;
019080  000864                  else if (*(otherOBJ) == OT_NEXTFRAME)
019081  000865                      if (img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX) < *(otherOBJ+Ofs_IPD_P3))
019082  000866                          WriteObject(*(otherOBJ+Ofs_IPD_P5),*(otherOBJ+Ofs_IPD_P2),img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX)+1) ;
019083  000867                      endif
019084  000868                      newval := img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX) ;
019085  000869                  else if (*(otherOBJ) == OT_PREVSTRING)
019086  000870                      if (stringsCV[*(otherOBJ+Ofs_IPD_P2)])
019087  000871                          WriteObject(tStrings,*(otherOBJ+Ofs_IPD_P2),stringsCV[*(otherOBJ+Ofs_IPD_P2)]-1) ;
019088  000872                      endif
019089  000873                  else if (*(otherOBJ) == OT_NEXTSTRING)
019090  000874                      if (stringsCV[*(otherOBJ+Ofs_IPD_P2)] < *(otherOBJ+Ofs_IPD_P3)) // fix IPD_P2 not filled in yet
019091  000875                          WriteObject(tStrings,*(otherOBJ+Ofs_IPD_P2),stringsCV[*(otherOBJ+Ofs_IPD_P2)]+1) ;
019092  000876                      endif
019093  000877                  endif
019094  000878              endif
019095  000879              IPidx := *(otherOBJ+TouchState) ;
019096  000880          wend
019097  000881      endif
019098  000882  endfunc
019099  000883        
019100  000884  // End P2.inc
019101  000885  func DoGFXObjects()
019102  000886  endfunc
019103  000887        
019104  000888  // Start P3.inc
019105  000889  func main()
019106  000890      var comTX[50], cmdi, i, j, ImageTouched, TouchStatus, oldn ;
019107  000891        
019108  000892      putstr("Mounting...\n");
019109  000893      if (!(file_Mount()))
019110  000894          while(!(file_Mount()))
019111  000895              putstr("Drive not mounted...");
019112  000896              pause(200);
019113  000897              gfx_Cls();
019114  000898              pause(200);
019115  000899          wend
019116  000900      endif
019117  000901  //    gfx_MoveTo(0, 0);
019118  000902  //    print(mem_Heap()," ") ;
019119  000903  //    gfx_TransparentColour(0x0020);
019120  000904  //    gfx_Transparency(ON);
019121  000905        
019122  000906      gfx_ScreenMode(LANDSCAPE_R) ;
019123  000907        
019124  000908      // open image control
019125  000909      hndl := file_LoadImageControl("BCN3D_~1.dat", "BCN3D_~1.gci", 1);
019126  000910        
019127  000911      // init 'constants'
019128  000912  // End P3.inc
019129  000913        
019130  000914      oObjects[tDipSwitch] := oDipSwitchs ;
019131  000915      oObjects[tKnob] := oKnobs ;
019132  000916      oObjects[tRockerSwitch] := oRockerSwitchs ;
019133  000917      oObjects[tRotarySwitch] := oRotarySwitchs ;
019134  000918      oObjects[tGSlider] := oGSliders ;
019135  000919      oObjects[tTrackbar] := oTrackbars ;
019136  000920      oObjects[tWinButton] := oWinButtons ;
019137  000921      oObjects[tAngularmeter] := oAngularmeters ;
019138  000922      oObjects[tCoolgauge] := oCoolgauges ;
019139  000923      oObjects[tCustomdigits] := oCustomdigitss ;
019140  000924      oObjects[tForm] := oForms ;
019141  000925      oObjects[tGauge] := oGauges ;
019142  000926      oObjects[tImage] := oImages ;
019143  000927      oObjects[tKeyboard] := oKeyboards ;
019144  000928      oObjects[tLed] := oLeds ;
019145  000929      oObjects[tLeddigits] := oLeddigitss ;
019146  000930      oObjects[tMeter] := oMeters ;
019147  000931      oObjects[tStrings] := oStringss ;
019148  000932      oObjects[tThermometer] := oThermometers ;
019149  000933      oObjects[tUserled] := oUserleds ;
019150  000934      oObjects[tVideo] := oVideos ;
019151  000935      oObjects[tStaticText] := oStaticTexts ;
019152  000936      oObjects[tSounds] := oSoundss ;
019153  000937      oObjects[tTimer] := oTimers ;
019154  000938      oObjects[tSpectrum] := oSpectrums ;
019155  000939      oObjects[tTank] := oTanks ;
019156  000940      oObjects[tUserImages] := oUserImagess ;
019157  000941      oObjects[tPinOutput] := oPinOutputs ;
019158  000942      oObjects[tPinInput] := oPinInputs ;
019159  000943      oObjects[t4Dbutton] := o4Dbuttons ;
019160  000944      oObjects[tAniButton] := oAniButtons ;
019161  000945      oObjects[tColorPicker] := oColorPickers ;
019162  000946      oObjects[tUserButton] := oUserButtons ;
019163  000947      hFonts[1] := file_LoadImageControl("BCN3D_~1.d02", "BCN3D_~1.g02", 1)  ;
019164  000948      hFonts[2] := file_LoadImageControl("BCN3D_~1.d0C", "BCN3D_~1.g0C", 1)  ;
019165  000949      hFonts[3] := file_LoadImageControl("BCN3D_~1.d01", "BCN3D_~1.g01", 1)  ;
019166  000950      hFonts[5] := file_LoadImageControl("BCN3D_~1.d0M", "BCN3D_~1.g0M", 1)  ;
019167  000951      hFonts[28] := file_LoadImageControl("BCN3D_~1.d0Y", "BCN3D_~1.g0Y", 1)  ;
019168  000952      hFonts[40] := file_LoadImageControl("BCN3D_~1.d0J", "BCN3D_~1.g0J", 1)  ;
019169  000953      hFonts[46] := file_LoadImageControl("BCN3D_~1.d0Z", "BCN3D_~1.g0Z", 1)  ;
019170  000954      hFonts[0] := hFonts[2] ;
019171  000955      hFonts[4] := hFonts[2] ;
019172  000956      hFonts[6] := hFonts[2] ;
019173  000957      hFonts[7] := hFonts[1] ;
019174  000958      hFonts[8] := hFonts[1] ;
019175  000959      hFonts[9] := hFonts[2] ;
019176  000960      hFonts[10] := hFonts[5] ;
019177  000961      hFonts[11] := hFonts[2] ;
019178  000962      hFonts[12] := hFonts[1] ;
019179  000963      hFonts[13] := hFonts[2] ;
019180  000964      hFonts[14] := hFonts[2] ;
019181  000965      hFonts[15] := hFonts[2] ;
019182  000966      hFonts[16] := hFonts[1] ;
019183  000967      hFonts[17] := hFonts[5] ;
019184  000968      hFonts[18] := hFonts[2] ;
019185  000969      hFonts[19] := hFonts[2] ;
019186  000970      hFonts[20] := hFonts[2] ;
019187  000971      hFonts[21] := hFonts[2] ;
019188  000972      hFonts[22] := hFonts[2] ;
019189  000973      hFonts[23] := hFonts[1] ;
019190  000974      hFonts[24] := hFonts[1] ;
019191  000975      hFonts[25] := hFonts[1] ;
019192  000976      hFonts[26] := hFonts[1] ;
019193  000977      hFonts[27] := hFonts[2] ;
019194  000978      hFonts[29] := hFonts[2] ;
019195  000979      hFonts[30] := hFonts[1] ;
019196  000980      hFonts[31] := hFonts[2] ;
019197  000981      hFonts[32] := hFonts[2] ;
019198  000982      hFonts[33] := hFonts[2] ;
019199  000983      hFonts[34] := hFonts[2] ;
019200  000984      hFonts[35] := hFonts[2] ;
019201  000985      hFonts[36] := hFonts[2] ;
019202  000986      hFonts[37] := hFonts[2] ;
019203  000987      hFonts[38] := hFonts[2] ;
019204  000988      hFonts[39] := hFonts[2] ;
019205  000989      hFonts[41] := hFonts[40] ;
019206  000990      hFonts[42] := hFonts[40] ;
019207  000991      hFonts[43] := hFonts[46] ;
019208  000992      hFonts[44] := hFonts[2] ;
019209  000993      hFonts[45] := hFonts[46] ;
019210  000994      hFonts[47] := hFonts[46] ;
019211  000995      hFonts[49] := hFonts[2] ;
019212  000996      hFonts[50] := hFonts[1] ;
019213  000997      hFonts[51] := hFonts[1] ;
019214  000998      hFonts[52] := hFonts[2] ;
019215  000999  // Start P4.inc
019216  001000      hstrings := file_Open("BCN3D_~1.txf", 'r') ; // Open handle to access uSD strings, uncomment if required
019217  001001      // init comms
019218  001002      com_Init(comRX,CMDLenMAX,0);
019219  001003      com_SetBaud(COM0,19886);
019220  001004      com_TXbuffer(comTX, 100, 0);
019221  001005      snd_BufSize(2) ;
019222  001006      // tag 'real' objects
019223  001007      for (i := 0; i <= MaxTotObjects; i++)
019224  001008          if (   (i != tSounds)
019225  001009              && (i != tTimer)
019226  001010              && (i != tPinOutput)
019227  001011              && (i != tPinInput) )
019228  001012              TouchXpos := oObjects[i] ;
019229  001013              TouchYpos := *(TouchXpos) ;
019230  001014              for (ImageTouched := 1; ImageTouched <= TouchYpos; ImageTouched++)
019231  001015                  oldn := *(TouchXpos+ImageTouched*2) ;
019232  001016                  img_SetAttributes(hndl, oldn, I_TOUCH_DISABLE);  // ensure touch is enabled
019233  001017                  if (oldn != -1)
019234  001018                      img_SetWord(hndl, oldn, IMAGE_TAG, i+1);
019235  001019                      img_Disable(hndl, oldn) ;
019236  001020                  endif
019237  001021              next
019238  001022          endif
019239  001023      next
019240  001024        
019241  001025      // display initial form
019242  001026      CurrentForm := -1 ;
019243  001027  // End P4.inc
019244  001028  // Start P5.inc
019245  001029      ActivateForm(0) ; // need to change this according to first actual form
019246  001030        
019247  001031  // End P5.inc
019248  001032  // Start P6.inc
019249  001033      touch_Set(TOUCH_ENABLE);                            // enable the touch screen
019250  001034      oldn := -1 ;
019251  001035      repeat
019252  001036        
019253  001037          // check comms for command, how to NAK invalid command
019254  001038          if (com_Count() != 0)
019255  001039              i := serin() ;
019256  001040              InputCS ^= i ;               // update checksum
019257  001041              if (   (cmdi > 2)
019258  001042                  && (cmd[0] == WRITE_STRU) )
019259  001043                  j := (cmdi-1) >> 1 + 2 ;
019260  001044                  if (j == CMDLenMAX)    // max length exceeded
019261  001045                      nak0() ;
019262  001046                      cmdi := -1 ;
019263  001047                  else if (cmdi & 1)
019264  001048                      cmd[j] := i ;
019265  001049                      if (cmd[2] == 0)    // if string complete
019266  001050                          if (InputCS)
019267  001051                              nak0() ;
019268  001052                          else
019269  001053                              if (cmd[0] == WRITE_STRU)
019270  001054                              cmd[j] := 0 ;                     // terminate it
019271  001055                              PrintStrings(cmd[1], &cmd[3], 1) ;
019272  001056                              serout(ACK) ;
019273  001057                              else
019274  001058                              endif
019275  001059                          endif
019276  001060                          cmdi := -1 ;
019277  001061                      endif
019278  001062                  else
019279  001063                      cmd[j] := cmd[j] << 8 + i ;
019280  001064                      cmd[2]-- ;          // dec length
019281  001065                  endif
019282  001066                  cmdi++ ;
019283  001067              else // not unicode string
019284  001068                  cmd[cmdi++] := i ;
019285  001069                   if (cmd[0] == WRITE_STR)                  // Ansi String
019286  001070                      if (cmdi == CMDLenMAX)      // max length exceeded
019287  001071                          nak0() ;
019288  001072                          cmdi := 0 ;
019289  001073                      else if (cmdi > 2)
019290  001074                          if (cmd[2] == -1)
019291  001075                              if (InputCS)
019292  001076                                  nak0() ;
019293  001077                              else
019294  001078                                  if (cmd[0] == WRITE_STR)
019295  001079                                  cmd[cmdi-1] := 0 ;                     // terminate it
019296  001080                                  PrintStrings(cmd[1], &cmd[3], 1) ;
019297  001081                                  serout(ACK) ;
019298  001082                                  else
019299  001083                                  endif
019300  001084                              endif
019301  001085                              cmdi := 0 ;
019302  001086                          else
019303  001087                              cmd[2]-- ;          // dec length
019304  001088                          endif
019305  001089                      endif
019306  001090                  else if (   (cmd[0] == READ_OBJ)
019307  001091                           && (cmdi == 4)         )
019308  001092                      if (InputCS)
019309  001093                          nak0() ;
019310  001094                      else
019311  001095                          ReadObject(cmd[1], cmd[2]) ;
019312  001096                      endif
019313  001097                      cmdi := 0 ;
019314  001098                  else if (   (cmd[0] == WRITE_OBJ)    // 6 byte write command (gen option)
019315  001099                           && (cmdi == 6)          )
019316  001100                      if (InputCS)
019317  001101                          nak0() ;
019318  001102                      else
019319  001103                          WriteObject(cmd[1], cmd[2], cmd[3] << 8 + cmd[4]) ;
019320  001104                          serout(ACK) ;
019321  001105                      endif
019322  001106                      cmdi := 0 ;
019323  001107                  else if (   (cmd[0] == WRITE_CONTRAST)
019324  001108                           && (cmdi == 3)         )
019325  001109                      if (InputCS)
019326  001110                          nak0() ;
019327  001111                      else
019328  001112                          gfx_Contrast(cmd[1]) ;
019329  001113                          serout(ACK) ;
019330  001114                      endif
019331  001115                      cmdi := 0 ;
019332  001116                  else if (cmdi == 6)    // we have 6 bytes and we've gotten here -> something wrong
019333  001117                      nak0() ;
019334  001118                      cmdi := 0 ;
019335  001119                  endif
019336  001120              endif   // not unicode string
019337  001121          endif   // a character is available
019338  001122        
019339  001123        
019340  001124      // touch code processing
019341  001125        
019342  001126          TouchStatus := touch_Get(TOUCH_STATUS);               // get touchscreen status
019343  001127          ImageTouched := img_Touched(hndl,-1) ;
019344  001128          if ((TouchStatus == TOUCH_PRESSED) || (TouchStatus == TOUCH_RELEASED) || (TouchStatus == TOUCH_MOVING))
019345  001129              if ((TouchStatus != TOUCH_RELEASED) && (ImageTouched != oldn) && (oldn != -1))
019346  001130                  TouchStatus := TOUCH_RELEASED ;       // simulate release if we move off object
019347  001131              endif
019348  001132              if (TouchStatus != TOUCH_RELEASED)        // if not released
019349  001133                  if (oldn != -1)
019350  001134                      ImageTouched := oldn ;
019351  001135                  else
019352  001136                      if (oldn != ImageTouched)
019353  001137                  oldn := ImageTouched ;
019354  001138                          TouchStatus := TOUCH_PRESSED ;
019355  001139                      endif
019356  001140                  endif
019357  001141                  TouchXpos  := touch_Get(TOUCH_GETX);
019358  001142                  TouchYpos  := touch_Get(TOUCH_GETY);
019359  001143                  TouchState := Ofs_IPD_DOWN ;
019360  001144              else
019361  001145                  ImageTouched := oldn ;                     // simulate release of what we touched
019362  001146                  oldn := -1 ;                    // prevent double release
019363  001147                  TouchState := Ofs_IPD_RELEASE ;
019364  001148              endif
019365  001149              if (ImageTouched != -1)
019366  001150                          CurInputData := InputControls[ImageTouched] + InputData;
019367  001151                          InputType := *(CurInputData) ;
019368  001152                          i := InputType ;
019369  001153                          if (InputType >= t4Dbutton) i -= 23 ; // adjust to ensure next in gosub
019370  001154                          gosub (i), (cDipswitch, cKnob, cRockerswitch, cRotaryswitch, cSlider, cTrackbar, cWinbutton, c4DButton, cAniButton, cColorPicker, cUserButton) ;
019371  001155              endif
019372  001156          endif
019373  001157   //       if ((n != -1) && (oldn == -1)) oldn := n ;    // save what we touched in case we move off it
019374  001158        
019375  001159          sys_EventsResume() ;
019376  001160      forever
019377  001161        
019378  001162  cDipswitch:
019379  001163        
019380  001164  cKnob:
019381  001165        
019382  001166  cRockerswitch:
019383  001167        
019384  001168  cRotaryswitch:
019385  001169        
019386  001170  cSlider:
019387  001171  cTrackbar:
019388  001172        
019389  001173  c4DButton:
019390  001174  cUserButton:
019391  001175      pInputIndex := oUserButtons + *(CurInputData+Ofs_IPD_OBJVIDX) ;
019392  001176      goto gbutton ;
019393  001177  cWinbutton:
019394  001178  gbutton:
019395  001179      i := img_GetWord(hndl, *(pInputIndex), IMAGE_INDEX) ; // current state
019396  001180      if (*(CurInputData+Ofs_IPD_P1))                                 // momentary, reports 0, but should report 1
019397  001181          if (TouchStatus == TOUCH_RELEASED)
019398  001182              i &= 0xfffe ;
019399  001183              TouchState == Ofs_IPD_DOWN ;
019400  001184          else
019401  001185              i |= 1 ;
019402  001186              TouchState == Ofs_IPD_RELEASE ;
019403  001187          endif
019404  001188      else if (*(CurInputData+Ofs_IPD_P2) == -1)                      // Toggle, reports 0+2, but should report 0+1
019405  001189          if (TouchStatus == TOUCH_RELEASED)                     // only truly change on release
019406  001190              if ((i & 3) == 3)
019407  001191                  i &= 0xfffc ;
019408  001192              else
019409  001193                  i++ ;
019410  001194              endif
019411  001195          else
019412  001196              i |= 1 ;                                      // make down regardless of current state
019413  001197          endif
019414  001198      else                        // group action, up all other buttons on touch press, reports 0 for button down
019415  001199          if (TouchStatus == TOUCH_PRESSED)                     // only truly change on release
019416  001200              TurnOffButtons(*(CurInputData+Ofs_IPD_P2)) ;
019417  001201          endif
019418  001202          i := (i & 0xfffc) | 2 ;
019419  001203      endif
019420  001204        
019421  001205      UpdateObjects(i) ;
019422  001206  endsub ;
019423  001207        
019424  001208  cAniButton:
019425  001209        
019426  001210  cColorPicker:
019427  001211        
019428  001212  endfunc
019429  001213  // End P6.inc
Notice: Check that the function called via pointer  'IPidx' requires 1 argument (line 849 file:BCN3D_SIGMA.4DGenieS)
Notice: local var 'p' in func 'ActivateForm' is never used (line 787 file:BCN3D_SIGMA.4DGenieS)


Symbol Table:
name                             decimal         hex
__MAXBANKS                             6  0x00000006 (const dword)  (not used)
__MAXMEM                           32768  0x00008000 (const dword)  (usage 1)
__MAXPROG                          32750  0x00007fee (const dword)  (usage 1)
__PLATFORM                             3  0x00000003 (const dword)  (not used)
__reserved10                        -111  0xffffff91 (PmmC func) args[0] r=0  (not used)
__reserved13                        -123  0xffffff85 (PmmC func) args[0] r=0  (not used)
__reserved14                        -124  0xffffff84 (PmmC func) args[0] r=0  (not used)
__reserved17                        -201  0xffffff37 (PmmC func) args[0] r=0  (not used)
__reserved18                        -202  0xffffff36 (PmmC func) args[0] r=0  (not used)
__reserved19                        -203  0xffffff35 (PmmC func) args[0] r=0  (not used)
__reserved20                        -204  0xffffff34 (PmmC func) args[0] r=0  (not used)
__reserved21                        -205  0xffffff33 (PmmC func) args[0] r=0  (not used)
__reserved22                        -206  0xffffff32 (PmmC func) args[0] r=0  (not used)
__reserved23                        -220  0xffffff24 (PmmC func) args[0] r=0  (not used)
__reserved24                        -221  0xffffff23 (PmmC func) args[0] r=0  (not used)
__reserved25                        -222  0xffffff22 (PmmC func) args[0] r=0  (not used)
__reserved26                        -223  0xffffff21 (PmmC func) args[0] r=0  (not used)
__reserved3                          -69  0xffffffbb (PmmC func) args[0] r=0  (not used)
__reserved30                        -283  0xfffffee5 (PmmC func) args[0] r=0  (not used)
__reserved4                          -70  0xffffffba (PmmC func) args[0] r=0  (not used)
__reserved42                        -373  0xfffffe8b (PmmC func) args[0] r=0  (not used)
__reserved43                        -387  0xfffffe7d (PmmC func) args[0] r=0  (not used)
__reserved44                        -388  0xfffffe7c (PmmC func) args[0] r=0  (not used)
__reserved45                        -389  0xfffffe7b (PmmC func) args[0] r=0  (not used)
__reserved46                        -390  0xfffffe7a (PmmC func) args[0] r=0  (not used)
__reserved5                          -76  0xffffffb4 (PmmC func) args[0] r=0  (not used)
__reserved51                        -411  0xfffffe65 (PmmC func) args[0] r=0  (not used)
__reserved52                        -412  0xfffffe64 (PmmC func) args[0] r=0  (not used)
__reserved53                        -422  0xfffffe5a (PmmC func) args[0] r=0  (not used)
__reserved54                        -423  0xfffffe59 (PmmC func) args[0] r=0  (not used)
__reserved57                        -457  0xfffffe37 (PmmC func) args[0] r=0  (not used)
__reserved58                        -458  0xfffffe36 (PmmC func) args[0] r=0  (not used)
__reserved6                          -77  0xffffffb3 (PmmC func) args[0] r=0  (not used)
__reserved60                        -467  0xfffffe2d (PmmC func) args[0] r=0  (not used)
__reserved61                        -468  0xfffffe2c (PmmC func) args[0] r=0  (not used)
__reserved62                        -469  0xfffffe2b (PmmC func) args[0] r=0  (not used)
__reserved63                        -490  0xfffffe16 (PmmC func) args[0] r=0  (not used)
__reserved64                        -491  0xfffffe15 (PmmC func) args[0] r=0  (not used)
__reserved65                        -492  0xfffffe14 (PmmC func) args[0] r=0  (not used)
__reserved66                        -493  0xfffffe13 (PmmC func) args[0] r=0  (not used)
__reserved68                        -509  0xfffffe03 (PmmC func) args[0] r=0  (not used)
__reserved69                        -510  0xfffffe02 (PmmC func) args[0] r=0  (not used)
__reserved70                        -511  0xfffffe01 (PmmC func) args[0] r=0  (not used)
__reserved72                        -520  0xfffffdf8 (PmmC func) args[0] r=0  (not used)
__reserved77                        -526  0xfffffdf2 (PmmC func) args[0] r=0  (not used)
__reserved78                        -527  0xfffffdf1 (PmmC func) args[0] r=0  (not used)
__reserved85                        -536  0xfffffde8 (PmmC func) args[0] r=0  (not used)
__reserved86                        -537  0xfffffde7 (PmmC func) args[0] r=0  (not used)
__reserved87                        -570  0xfffffdc6 (PmmC func) args[0] r=0  (not used)
__reserved88                        -571  0xfffffdc5 (PmmC func) args[0] r=0  (not used)
__reserved89                        -572  0xfffffdc4 (PmmC func) args[0] r=0  (not used)
__reserved9                         -110  0xffffff92 (PmmC func) args[0] r=0  (not used)
__translate                           -8  0xfffffff8 (PmmC func) args[4] r=1  (not used)
ABS                                  -53  0xffffffcb (PmmC func) args[1] r=1  (not used)
ACK                                    6  0x00000006 (const dword)  (usage 12)
ActivateForm                       16069  0x00003ec5 (User func) args[1] r=0  (usage 9)
ALICEBLUE                          63455  0x0000f7df (const dword)  (not used)
ALL                                65535  0x0000ffff (const dword)  (not used)
ana_HS                              -533  0xfffffdeb (PmmC func) args[7] r=0  (not used)
ANTIQUEWHITE                       65370  0x0000ff5a (const dword)  (not used)
APPEND                                 0  0x00000000 (const dword)  (not used)
AQUA                                2047  0x000007ff (const dword)  (not used)
AQUAMARINE                         32762  0x00007ffa (const dword)  (not used)
AUDIO_ENABLE                          17  0x00000011 (const dword)  (not used)
AZURE                              63487  0x0000f7ff (const dword)  (not used)
BACKGROUND_COLOUR                     17  0x00000011 (const dword)  (usage 3)
BAUD_110                               0  0x00000000 (const dword)  (not used)
BAUD_115200                           13  0x0000000d (const dword)  (not used)
BAUD_1200                              3  0x00000003 (const dword)  (not used)
BAUD_128000                           14  0x0000000e (const dword)  (not used)
BAUD_14400                             7  0x00000007 (const dword)  (not used)
BAUD_19200                             8  0x00000008 (const dword)  (not used)
BAUD_2400                              4  0x00000004 (const dword)  (not used)
BAUD_256000                           15  0x0000000f (const dword)  (not used)
BAUD_300                               1  0x00000001 (const dword)  (not used)
BAUD_300000                           16  0x00000010 (const dword)  (not used)
BAUD_31250                             9  0x00000009 (const dword)  (not used)
BAUD_375000                           17  0x00000011 (const dword)  (not used)
BAUD_38400                            10  0x0000000a (const dword)  (not used)
BAUD_4800                              5  0x00000005 (const dword)  (not used)
BAUD_500000                           18  0x00000012 (const dword)  (not used)
BAUD_56000                            11  0x0000000b (const dword)  (not used)
BAUD_57600                            12  0x0000000c (const dword)  (not used)
BAUD_600                               2  0x00000002 (const dword)  (not used)
BAUD_600000                           19  0x00000013 (const dword)  (not used)
BAUD_9600                              6  0x00000006 (const dword)  (not used)
BEIGE                              63419  0x0000f7bb (const dword)  (not used)
BEVEL_RADIUS                          27  0x0000001b (const dword)  (not used)
BEVEL_SHADOW                          29  0x0000001d (const dword)  (not used)
BEVEL_WIDTH                           28  0x0000001c (const dword)  (not used)
BIN                                    2  0x00000002 (const dword)  (not used)
BIN1                                 258  0x00000102 (const dword)  (not used)
BIN10                               2562  0x00000a02 (const dword)  (not used)
BIN10Z                              6658  0x00001a02 (const dword)  (not used)
BIN10ZB                            10754  0x00002a02 (const dword)  (not used)
BIN11                               2818  0x00000b02 (const dword)  (not used)
BIN11Z                              6914  0x00001b02 (const dword)  (not used)
BIN11ZB                            11010  0x00002b02 (const dword)  (not used)
BIN12                               3074  0x00000c02 (const dword)  (not used)
BIN12Z                              7170  0x00001c02 (const dword)  (not used)
BIN12ZB                            11266  0x00002c02 (const dword)  (not used)
BIN13                               3330  0x00000d02 (const dword)  (not used)
BIN13Z                              7426  0x00001d02 (const dword)  (not used)
BIN13ZB                            11522  0x00002d02 (const dword)  (not used)
BIN14                               3586  0x00000e02 (const dword)  (not used)
BIN14Z                              7682  0x00001e02 (const dword)  (not used)
BIN14ZB                            11778  0x00002e02 (const dword)  (not used)
BIN15                               3842  0x00000f02 (const dword)  (not used)
BIN15Z                              7938  0x00001f02 (const dword)  (not used)
BIN15ZB                            12034  0x00002f02 (const dword)  (not used)
BIN16                                  2  0x00000002 (const dword)  (not used)
BIN16Z                              4098  0x00001002 (const dword)  (not used)
BIN16ZB                             8194  0x00002002 (const dword)  (not used)
BIN1Z                               4354  0x00001102 (const dword)  (not used)
BIN1ZB                              8450  0x00002102 (const dword)  (not used)
BIN2                                 514  0x00000202 (const dword)  (not used)
BIN2Z                               4610  0x00001202 (const dword)  (not used)
BIN2ZB                              8706  0x00002202 (const dword)  (not used)
BIN3                                 770  0x00000302 (const dword)  (not used)
BIN3Z                               4866  0x00001302 (const dword)  (not used)
BIN3ZB                              8962  0x00002302 (const dword)  (not used)
BIN4                                1026  0x00000402 (const dword)  (not used)
BIN4Z                               5122  0x00001402 (const dword)  (not used)
BIN4ZB                              9218  0x00002402 (const dword)  (not used)
BIN5                                1282  0x00000502 (const dword)  (not used)
BIN5Z                               5378  0x00001502 (const dword)  (not used)
BIN5ZB                              9474  0x00002502 (const dword)  (not used)
BIN6                                1538  0x00000602 (const dword)  (not used)
BIN6Z                               5634  0x00001602 (const dword)  (not used)
BIN6ZB                              9730  0x00002602 (const dword)  (not used)
BIN7                                1794  0x00000702 (const dword)  (not used)
BIN7Z                               5890  0x00001702 (const dword)  (not used)
BIN7ZB                              9986  0x00002702 (const dword)  (not used)
BIN8                                2050  0x00000802 (const dword)  (not used)
BIN8Z                               6146  0x00001802 (const dword)  (not used)
BIN8ZB                             10242  0x00002802 (const dword)  (not used)
BIN9                                2306  0x00000902 (const dword)  (not used)
BIN9Z                               6402  0x00001902 (const dword)  (not used)
BIN9ZB                             10498  0x00002902 (const dword)  (not used)
BINZ                                4098  0x00001002 (const dword)  (not used)
BINZB                               8194  0x00002002 (const dword)  (not used)
BISQUE                             65336  0x0000ff38 (const dword)  (not used)
BLACK                                  0  0x00000000 (const dword)  (usage 114)
BLANCHEDALMOND                     65369  0x0000ff59 (const dword)  (not used)
BLUE                                  31  0x0000001f (const dword)  (not used)
BLUEVIOLET                         35164  0x0000895c (const dword)  (not used)
BOLD                                  16  0x00000010 (const dword)  (not used)
BOTTOM_POS                             5  0x00000005 (const dword)  (not used)
BREAK                              65533  0x0000fffd (const dword)  (not used)
BROWN                              41285  0x0000a145 (const dword)  (not used)
BURLYWOOD                          56784  0x0000ddd0 (const dword)  (not used)
bus_ClearPins                       -119  0xffffff89 (PmmC func) args[1] r=0  (not used)
BUS_RD_PIN                             4  0x00000004 (const dword)  (not used)
bus_Read                            -117  0xffffff8b (PmmC func) args[0] r=1  (not used)
bus_Read8                           -122  0xffffff86 (PmmC func) args[0] r=1  (not used)
bus_SetChangeInterrupt              -120  0xffffff88 (PmmC func) args[2] r=1  (not used)
bus_SetPins                         -118  0xffffff8a (PmmC func) args[1] r=0  (not used)
BUS_WR_PIN                             3  0x00000003 (const dword)  (not used)
bus_Write8                          -121  0xffffff87 (PmmC func) args[1] r=0  (not used)
BUTTON_DOWN                            0  0x00000000 (const dword)  (not used)
BUTTON_UP                              1  0x00000001 (const dword)  (not used)
ByteSwap                             -49  0xffffffcf (PmmC func) args[1] r=1  (not used)
c4DButton                         UNRESOLVED  (not used)
C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS    2806  0x00000af6 (const ??? 0)  (not used)
CADETBLUE                          23796  0x00005cf4 (const dword)  (not used)
cAniButton                        UNRESOLVED  (not used)
cColorPicker                      UNRESOLVED  (not used)
cDipswitch                        UNRESOLVED  (not used)
charheight                           -12  0xfffffff4 (PmmC func) args[1] r=1  (not used)
CHARTREUSE                         32736  0x00007fe0 (const dword)  (not used)
charwidth                            -11  0xfffffff5 (PmmC func) args[1] r=1  (not used)
CHECKED                                0  0x00000000 (const dword)  (not used)
CHOCOLATE                          54083  0x0000d343 (const dword)  (not used)
CHR                                  129  0x00000081 (const dword)  (not used)
cKnob                             UNRESOLVED  (not used)
CLIPPING                              19  0x00000013 (const dword)  (not used)
cmd                                  378  0x0000017a (mem) word[80] (global)  (usage 84)
CMDLenMAX                             80  0x00000050 (const dword)  (usage 12)
ColorBGimage                          32  0x00000020 (const dword)  (usage 228)
COLOUR16                               0  0x00000000 (const dword)  (not used)
COLOUR8                                1  0x00000001 (const dword)  (not used)
COM0                               63492  0x0000f804 (const dword)  (usage 3)
COM1                               63493  0x0000f805 (const dword)  (not used)
com1_Count                          -249  0xffffff07 (PmmC func) args[0] r=1  (not used)
com1_Error                          -257  0xfffffeff (PmmC func) args[0] r=1  (not used)
com1_Full                           -253  0xffffff03 (PmmC func) args[0] r=1  (not used)
com1_Init                           -233  0xffffff17 (PmmC func) args[3] r=0  (not used)
com1_InitBrk                        -578  0xfffffdbe (PmmC func) args[3] r=0  (not used)
com1_Reset                          -245  0xffffff0b (PmmC func) args[0] r=0  (not used)
COM1_RX_pin                         -226  0xffffff1e (PmmC func) args[1] r=1  (not used)
com1_RXblock                        -558  0xfffffdd2 (PmmC func) args[2] r=0  (not used)
com1_Sync                           -261  0xfffffefb (PmmC func) args[0] r=1  (not used)
COM1_TX_pin                         -229  0xffffff1b (PmmC func) args[1] r=1  (not used)
com1_TXblock                        -557  0xfffffdd3 (PmmC func) args[2] r=0  (not used)
com1_TXbuffer                       -265  0xfffffef7 (PmmC func) args[3] r=0  (not used)
com1_TXbufferBrk                    -574  0xfffffdc2 (PmmC func) args[3] r=0  (not used)
com1_TXbufferHold                   -277  0xfffffeeb (PmmC func) args[1] r=1  (not used)
com1_TXcount                        -269  0xfffffef3 (PmmC func) args[0] r=1  (not used)
com1_TXemptyEvent                   -273  0xfffffeef (PmmC func) args[1] r=1  (not used)
COM2                               63494  0x0000f806 (const dword)  (not used)
com2_Count                          -250  0xffffff06 (PmmC func) args[0] r=1  (not used)
com2_Error                          -258  0xfffffefe (PmmC func) args[0] r=1  (not used)
com2_Full                           -254  0xffffff02 (PmmC func) args[0] r=1  (not used)
com2_Init                           -234  0xffffff16 (PmmC func) args[3] r=0  (not used)
com2_InitBrk                        -579  0xfffffdbd (PmmC func) args[3] r=0  (not used)
com2_Reset                          -246  0xffffff0a (PmmC func) args[0] r=0  (not used)
COM2_RX_pin                         -227  0xffffff1d (PmmC func) args[1] r=1  (not used)
com2_RXblock                        -560  0xfffffdd0 (PmmC func) args[2] r=0  (not used)
com2_Sync                           -262  0xfffffefa (PmmC func) args[0] r=1  (not used)
COM2_TX_pin                         -230  0xffffff1a (PmmC func) args[1] r=1  (not used)
com2_TXblock                        -559  0xfffffdd1 (PmmC func) args[2] r=0  (not used)
com2_TXbuffer                       -266  0xfffffef6 (PmmC func) args[3] r=0  (not used)
com2_TXbufferBrk                    -575  0xfffffdc1 (PmmC func) args[3] r=0  (not used)
com2_TXbufferHold                   -278  0xfffffeea (PmmC func) args[1] r=1  (not used)
com2_TXcount                        -270  0xfffffef2 (PmmC func) args[0] r=1  (not used)
com2_TXemptyEvent                   -274  0xfffffeee (PmmC func) args[1] r=1  (not used)
COM3                               63495  0x0000f807 (const dword)  (not used)
com3_Count                          -251  0xffffff05 (PmmC func) args[0] r=1  (not used)
com3_Error                          -259  0xfffffefd (PmmC func) args[0] r=1  (not used)
com3_Full                           -255  0xffffff01 (PmmC func) args[0] r=1  (not used)
com3_Init                           -235  0xffffff15 (PmmC func) args[3] r=0  (not used)
com3_InitBrk                        -580  0xfffffdbc (PmmC func) args[3] r=0  (not used)
com3_Reset                          -247  0xffffff09 (PmmC func) args[0] r=0  (not used)
COM3_RX_pin                         -228  0xffffff1c (PmmC func) args[1] r=1  (not used)
com3_RXblock                        -562  0xfffffdce (PmmC func) args[2] r=0  (not used)
com3_Sync                           -263  0xfffffef9 (PmmC func) args[0] r=1  (not used)
COM3_TX_pin                         -231  0xffffff19 (PmmC func) args[1] r=1  (not used)
com3_TXblock                        -561  0xfffffdcf (PmmC func) args[2] r=0  (not used)
com3_TXbuffer                       -267  0xfffffef5 (PmmC func) args[3] r=0  (not used)
com3_TXbufferBrk                    -576  0xfffffdc0 (PmmC func) args[3] r=0  (not used)
com3_TXbufferHold                   -279  0xfffffee9 (PmmC func) args[1] r=1  (not used)
com3_TXcount                        -271  0xfffffef1 (PmmC func) args[0] r=1  (not used)
com3_TXemptyEvent                   -275  0xfffffeed (PmmC func) args[1] r=1  (not used)
com_Count                           -248  0xffffff08 (PmmC func) args[0] r=1  (usage 3)
com_Error                           -256  0xffffff00 (PmmC func) args[0] r=1  (not used)
com_Full                            -252  0xffffff04 (PmmC func) args[0] r=1  (not used)
com_Init                            -232  0xffffff18 (PmmC func) args[3] r=0  (usage 3)
com_InitBrk                         -577  0xfffffdbf (PmmC func) args[3] r=0  (not used)
com_Mode                            -280  0xfffffee8 (PmmC func) args[4] r=1  (not used)
com_Reset                           -244  0xffffff0c (PmmC func) args[0] r=0  (not used)
com_RXblock                         -282  0xfffffee6 (PmmC func) args[2] r=0  (not used)
com_SetBaud                         -225  0xffffff1f (PmmC func) args[2] r=1  (usage 3)
com_Sync                            -260  0xfffffefc (PmmC func) args[0] r=1  (not used)
com_TXblock                         -281  0xfffffee7 (PmmC func) args[2] r=0  (not used)
com_TXbuffer                        -264  0xfffffef8 (PmmC func) args[3] r=0  (usage 3)
com_TXbufferBrk                     -573  0xfffffdc3 (PmmC func) args[3] r=0  (not used)
com_TXbufferHold                    -276  0xfffffeec (PmmC func) args[1] r=1  (not used)
com_TXcount                         -268  0xfffffef4 (PmmC func) args[0] r=1  (not used)
com_TXemptyEvent                    -272  0xfffffef0 (PmmC func) args[1] r=1  (not used)
comRX                                298  0x0000012a (mem) word[40] (global)  (usage 3)
CONTRAST                              25  0x00000019 (const dword)  (not used)
CORAL                              64490  0x0000fbea (const dword)  (not used)
CORNFLOWERBLUE                     25789  0x000064bd (const dword)  (not used)
CORNSILK                           65499  0x0000ffdb (const dword)  (not used)
COS                                  -58  0xffffffc6 (PmmC func) args[1] r=1  (not used)
COUNT_EDGE                             3  0x00000003 (const dword)  (not used)
COUNT_FALL                             2  0x00000002 (const dword)  (not used)
COUNT_OFF                              0  0x00000000 (const dword)  (not used)
COUNT_RISE                             1  0x00000001 (const dword)  (not used)
crc_16                              -567  0xfffffdc9 (PmmC func) args[2] r=1  (not used)
crc_CCITT                           -569  0xfffffdc7 (PmmC func) args[3] r=1  (not used)
crc_CSUM_8                          -566  0xfffffdca (PmmC func) args[2] r=1  (not used)
crc_MODBUS                          -568  0xfffffdc8 (PmmC func) args[2] r=1  (not used)
CRIMSON                            55463  0x0000d8a7 (const dword)  (not used)
cRockerswitch                     UNRESOLVED  (not used)
cRotaryswitch                     UNRESOLVED  (not used)
cSlider                           UNRESOLVED  (not used)
cTrackbar                         UNRESOLVED  (not used)
CurInputData                         294  0x00000126 (mem) word (global)  (usage 24)
CurrentForm                          284  0x0000011c (mem) word (global)  (usage 42)
cUserButton                       UNRESOLVED  (not used)
cWinbutton                        UNRESOLVED  (not used)
CY                                   -64  0xffffffc0 (PmmC func) args[0] r=1  (not used)
CYAN                                2047  0x000007ff (const dword)  (not used)
DARKBLUE                              17  0x00000011 (const dword)  (not used)
DARKCYAN                            1105  0x00000451 (const dword)  (not used)
DARKGOLDENROD                      48161  0x0000bc21 (const dword)  (not used)
DARKGRAY                           44373  0x0000ad55 (const dword)  (not used)
DARKGREEN                            800  0x00000320 (const dword)  (not used)
DARKKHAKI                          48557  0x0000bdad (const dword)  (not used)
DARKMAGENTA                        34833  0x00008811 (const dword)  (not used)
DARKOLIVEGREEN                     21317  0x00005345 (const dword)  (not used)
DARKORANGE                         64608  0x0000fc60 (const dword)  (not used)
DARKORCHID                         39321  0x00009999 (const dword)  (not used)
DARKRED                            34816  0x00008800 (const dword)  (not used)
DARKSALMON                         60591  0x0000ecaf (const dword)  (not used)
DARKSEAGREEN                       36337  0x00008df1 (const dword)  (not used)
DARKSLATEBLUE                      18929  0x000049f1 (const dword)  (not used)
DARKSLATEGRAY                      10857  0x00002a69 (const dword)  (not used)
DARKTURQUOISE                       1658  0x0000067a (const dword)  (not used)
DARKVIOLET                         36890  0x0000901a (const dword)  (not used)
DEBUG_MODE                            64  0x00000040 (const dword)  (not used)
DEC                                 1290  0x0000050a (const dword)  (not used)
DEC1                                 266  0x0000010a (const dword)  (not used)
DEC1Z                               4362  0x0000110a (const dword)  (not used)
DEC1ZB                              8458  0x0000210a (const dword)  (not used)
DEC2                                 522  0x0000020a (const dword)  (not used)
DEC2Z                               4618  0x0000120a (const dword)  (not used)
DEC2ZB                              8714  0x0000220a (const dword)  (not used)
DEC3                                 778  0x0000030a (const dword)  (not used)
DEC3Z                               4874  0x0000130a (const dword)  (not used)
DEC3ZB                              8970  0x0000230a (const dword)  (not used)
DEC4                                1034  0x0000040a (const dword)  (not used)
DEC4Z                               5130  0x0000140a (const dword)  (not used)
DEC4ZB                              9226  0x0000240a (const dword)  (not used)
DEC5                                1290  0x0000050a (const dword)  (not used)
DEC5Z                               5386  0x0000150a (const dword)  (not used)
DEC5ZB                              9482  0x0000250a (const dword)  (not used)
DECZ                                5386  0x0000150a (const dword)  (not used)
DECZB                               9482  0x0000250a (const dword)  (not used)
DEEPPINK                           63666  0x0000f8b2 (const dword)  (not used)
DEEPSKYBLUE                         1535  0x000005ff (const dword)  (not used)
DIABLO                                 3  0x00000003 (const dword)  (usage 3)
DIMGRAY                            27469  0x00006b4d (const dword)  (not used)
DISABLE                                0  0x00000000 (const dword)  (not used)
DISK_BUF                              15  0x0000000f (const dword)  (not used)
DISK_DATA_HI                           7  0x00000007 (const dword)  (not used)
DISK_DATA_LO                           6  0x00000006 (const dword)  (not used)
DISK_FAT_HI                            3  0x00000003 (const dword)  (not used)
DISK_FAT_LO                            2  0x00000002 (const dword)  (not used)
DISK_FATCOPIES                        12  0x0000000c (const dword)  (not used)
DISK_FATSIZE                          11  0x0000000b (const dword)  (not used)
DISK_FIRST_SECT_HI                     1  0x00000001 (const dword)  (not used)
DISK_FIRST_SECT_LO                     0  0x00000000 (const dword)  (not used)
DISK_MAXCLUS_HI                        9  0x00000009 (const dword)  (not used)
DISK_MAXCLUS_LO                        8  0x00000008 (const dword)  (not used)
DISK_MAXROOT                          10  0x0000000a (const dword)  (not used)
DISK_ROOT_HI                           5  0x00000005 (const dword)  (not used)
DISK_ROOT_LO                           4  0x00000004 (const dword)  (not used)
DISK_SECT_PER_CLUS                    13  0x0000000d (const dword)  (not used)
DISK_TYPE                             14  0x0000000e (const dword)  (not used)
disp_BlitPixelsFromCOM0             -372  0xfffffe8c (PmmC func) args[0] r=0  (not used)
disp_BlitPixelsFromCOM1             -563  0xfffffdcd (PmmC func) args[0] r=0  (not used)
disp_BlitPixelsFromCOM2             -564  0xfffffdcc (PmmC func) args[0] r=0  (not used)
disp_BlitPixelsFromCOM3             -565  0xfffffdcb (PmmC func) args[0] r=0  (not used)
disp_Disconnect                     -371  0xfffffe8d (PmmC func) args[0] r=0  (not used)
disp_Init                           -370  0xfffffe8e (PmmC func) args[0] r=0  (not used)
disp_ReadWord                       -367  0xfffffe91 (PmmC func) args[0] r=1  (not used)
disp_setGRAM                        -363  0xfffffe95 (PmmC func) args[4] r=0  (not used)
disp_SetReg                         -362  0xfffffe96 (PmmC func) args[2] r=0  (not used)
disp_Sync                           -369  0xfffffe8f (PmmC func) args[1] r=0  (not used)
disp_WrGRAM                         -364  0xfffffe94 (PmmC func) args[1] r=0  (not used)
disp_WriteControl                   -365  0xfffffe93 (PmmC func) args[1] r=0  (not used)
disp_WriteWord                      -366  0xfffffe92 (PmmC func) args[1] r=0  (not used)
DODGERBLUE                          7327  0x00001c9f (const dword)  (not used)
DoGFXObjects                       15437  0x00003c4d (User func) args[0] r=0  (usage 6)
DOWN                                   0  0x00000000 (const dword)  (not used)
DSK                                63490  0x0000f802 (const dword)  (not used)
ENABLE                                 1  0x00000001 (const dword)  (not used)
EVE_SP                               -65  0xffffffbf (PmmC func) args[0] r=1  (not used)
EVE_SSIZE                            -66  0xffffffbe (PmmC func) args[0] r=1  (not used)
EXTERN                               N/A         N/A (macro)  /**/   (not used)
FALSE_REASON                         141  0x0000008d (const dword)  (not used)
FCY_1                                 20  0x00000014 (const dword)  (not used)
FCY_256                               23  0x00000017 (const dword)  (not used)
FCY_64                                22  0x00000016 (const dword)  (not used)
FCY_8                                 21  0x00000015 (const dword)  (not used)
FE_CANNOT_INIT                        15  0x0000000f (const dword)  (not used)
FE_CANNOT_READ_MBR                    16  0x00000010 (const dword)  (not used)
FE_DIR_FULL                           12  0x0000000c (const dword)  (not used)
FE_DISK_FULL                          13  0x0000000d (const dword)  (not used)
FE_DISK_NOT_MNTD                       6  0x00000006 (const dword)  (not used)
FE_EOF                                10  0x0000000a (const dword)  (not used)
FE_FAT_EOF                             9  0x00000009 (const dword)  (not used)
FE_FILE_NOT_FOUND                      7  0x00000007 (const dword)  (not used)
FE_FILE_OVERWRITE                     14  0x0000000e (const dword)  (not used)
FE_FILE_TIMEOUT                       26  0x0000001a (const dword)  (not used)
FE_FIND_ERROR                         19  0x00000013 (const dword)  (not used)
FE_IDE_ERROR                           1  0x00000001 (const dword)  (not used)
FE_INVALID_BR                          5  0x00000005 (const dword)  (not used)
FE_INVALID_CLUSTER                    11  0x0000000b (const dword)  (not used)
FE_INVALID_FILE                        8  0x00000008 (const dword)  (not used)
FE_INVALID_FNAME                      20  0x00000014 (const dword)  (not used)
FE_INVALID_MBR                         4  0x00000004 (const dword)  (not used)
FE_INVALID_MEDIA                      21  0x00000015 (const dword)  (not used)
FE_INVALID_MODE                       18  0x00000012 (const dword)  (not used)
FE_MALLOC_FAILED                      17  0x00000011 (const dword)  (not used)
FE_NOT_PRESENT                         2  0x00000002 (const dword)  (not used)
FE_OK                                  0  0x00000000 (const dword)  (not used)
FE_PARTITION_TYPE                      3  0x00000003 (const dword)  (not used)
FE_SECTOR_READ_FAIL                   22  0x00000016 (const dword)  (not used)
FE_SECTOR_WRITE_FAIL                  23  0x00000017 (const dword)  (not used)
FILE_ATTRIBUTES                       18  0x00000012 (const dword)  (not used)
FILE_BUFFER                           22  0x00000016 (const dword)  (not used)
file_Close                          -431  0xfffffe51 (PmmC func) args[1] r=1  (not used)
file_Count                          -425  0xfffffe57 (PmmC func) args[1] r=1  (not used)
FILE_CURR_CLUSTER                      1  0x00000001 (const dword)  (not used)
FILE_CURR_SECTOR                       2  0x00000002 (const dword)  (not used)
FILE_CURR_SECTOR_POS                   3  0x00000003 (const dword)  (not used)
FILE_CURR_SECTOR_TOP                   4  0x00000004 (const dword)  (not used)
FILE_DATE                             10  0x0000000a (const dword)  (not used)
file_Dir                            -426  0xfffffe56 (PmmC func) args[1] r=1  (not used)
FILE_DISK                             21  0x00000015 (const dword)  (not used)
FILE_ENTRY                            20  0x00000014 (const dword)  (not used)
file_Erase                          -446  0xfffffe42 (PmmC func) args[1] r=1  (not used)
file_Error                          -424  0xfffffe58 (PmmC func) args[0] r=1  (not used)
file_Exec                           -450  0xfffffe3e (PmmC func) args[2] r=1  (not used)
file_Exists                         -429  0xfffffe53 (PmmC func) args[1] r=1  (not used)
file_FindFirst                      -427  0xfffffe55 (PmmC func) args[1] r=1  (not used)
file_FindNext                       -428  0xfffffe54 (PmmC func) args[0] r=1  (not used)
FILE_FIRST_CLUSTER                     0  0x00000000 (const dword)  (not used)
file_GetC                           -441  0xfffffe47 (PmmC func) args[1] r=1  (usage 3)
file_GetS                           -445  0xfffffe43 (PmmC func) args[3] r=1  (not used)
file_GetW                           -443  0xfffffe45 (PmmC func) args[1] r=1  (usage 3)
file_Image                          -438  0xfffffe4a (PmmC func) args[3] r=1  (not used)
file_Index                          -434  0xfffffe4e (PmmC func) args[4] r=1  (not used)
file_LoadFunction                   -448  0xfffffe40 (PmmC func) args[1] r=1  (not used)
file_LoadImageControl               -451  0xfffffe3d (PmmC func) args[3] r=1  (usage 24)
FILE_MODE                             17  0x00000011 (const dword)  (not used)
file_Mount                          -452  0xfffffe3c (PmmC func) args[0] r=1  (usage 6)
FILE_NAME                             11  0x0000000b (const dword)  (not used)
file_Open                           -430  0xfffffe52 (PmmC func) args[2] r=1  (usage 3)
FILE_PAGEFLAG                         19  0x00000013 (const dword)  (not used)
file_PlayWAV                        -454  0xfffffe3a (PmmC func) args[1] r=1  (not used)
file_PutC                           -440  0xfffffe48 (PmmC func) args[2] r=1  (not used)
file_PutS                           -444  0xfffffe44 (PmmC func) args[2] r=1  (not used)
file_PutW                           -442  0xfffffe46 (PmmC func) args[2] r=1  (not used)
file_Read                           -432  0xfffffe50 (PmmC func) args[3] r=1  (not used)
file_Rename                         -455  0xfffffe39 (PmmC func) args[2] r=1  (not used)
file_Rewind                         -447  0xfffffe41 (PmmC func) args[1] r=1  (not used)
file_Run                            -449  0xfffffe3f (PmmC func) args[2] r=1  (not used)
file_ScreenCapture                  -439  0xfffffe49 (PmmC func) args[5] r=1  (not used)
file_Seek                           -433  0xfffffe4f (PmmC func) args[3] r=1  (usage 3)
FILE_SEEK_POS_HI                       6  0x00000006 (const dword)  (not used)
FILE_SEEK_POS_LO                       5  0x00000005 (const dword)  (not used)
file_SetDate                        -456  0xfffffe38 (PmmC func) args[7] r=1  (not used)
file_Size                           -437  0xfffffe4b (PmmC func) args[3] r=1  (not used)
FILE_SIZE_HI                           8  0x00000008 (const dword)  (not used)
FILE_SIZE_LO                           7  0x00000007 (const dword)  (not used)
file_Tell                           -435  0xfffffe4d (PmmC func) args[3] r=1  (not used)
FILE_TIME                              9  0x00000009 (const dword)  (not used)
file_Unmount                        -453  0xfffffe3b (PmmC func) args[0] r=0  (not used)
file_Write                          -436  0xfffffe4c (PmmC func) args[3] r=1  (not used)
FILLPATTERN_0                      65504  0x0000ffe0 (const dword)  (not used)
FILLPATTERN_1                      65505  0x0000ffe1 (const ??? 0)  (not used)
FILLPATTERN_10                     65514  0x0000ffea (const ??? 0)  (not used)
FILLPATTERN_11                     65515  0x0000ffeb (const ??? 0)  (not used)
FILLPATTERN_12                     65516  0x0000ffec (const ??? 0)  (not used)
FILLPATTERN_13                     65517  0x0000ffed (const ??? 0)  (not used)
FILLPATTERN_14                     65518  0x0000ffee (const ??? 0)  (not used)
FILLPATTERN_15                     65519  0x0000ffef (const ??? 0)  (not used)
FILLPATTERN_16                     65520  0x0000fff0 (const ??? 0)  (not used)
FILLPATTERN_17                     65521  0x0000fff1 (const ??? 0)  (not used)
FILLPATTERN_18                     65522  0x0000fff2 (const ??? 0)  (not used)
FILLPATTERN_19                     65523  0x0000fff3 (const ??? 0)  (not used)
FILLPATTERN_2                      65506  0x0000ffe2 (const ??? 0)  (not used)
FILLPATTERN_20                     65524  0x0000fff4 (const ??? 0)  (not used)
FILLPATTERN_21                     65525  0x0000fff5 (const ??? 0)  (not used)
FILLPATTERN_22                     65526  0x0000fff6 (const ??? 0)  (not used)
FILLPATTERN_23                     65527  0x0000fff7 (const ??? 0)  (not used)
FILLPATTERN_24                     65528  0x0000fff8 (const ??? 0)  (not used)
FILLPATTERN_25                     65529  0x0000fff9 (const ??? 0)  (not used)
FILLPATTERN_26                     65530  0x0000fffa (const ??? 0)  (not used)
FILLPATTERN_27                     65531  0x0000fffb (const ??? 0)  (not used)
FILLPATTERN_28                     65532  0x0000fffc (const ??? 0)  (not used)
FILLPATTERN_29                     65533  0x0000fffd (const ??? 0)  (not used)
FILLPATTERN_3                      65507  0x0000ffe3 (const ??? 0)  (not used)
FILLPATTERN_30                     65534  0x0000fffe (const ??? 0)  (not used)
FILLPATTERN_31                     65535  0x0000ffff (const ??? 0)  (not used)
FILLPATTERN_4                      65508  0x0000ffe4 (const ??? 0)  (not used)
FILLPATTERN_5                      65509  0x0000ffe5 (const ??? 0)  (not used)
FILLPATTERN_6                      65510  0x0000ffe6 (const ??? 0)  (not used)
FILLPATTERN_7                      65511  0x0000ffe7 (const ??? 0)  (not used)
FILLPATTERN_8                      65512  0x0000ffe8 (const ??? 0)  (not used)
FILLPATTERN_9                      65513  0x0000ffe9 (const ??? 0)  (not used)
FIREBRICK                          45316  0x0000b104 (const dword)  (not used)
flash_Bank                          -498  0xfffffe0e (PmmC func) args[0] r=1  (not used)
flash_Blit1                         -507  0xfffffe05 (PmmC func) args[4] r=1  (not used)
flash_Blit16                        -503  0xfffffe09 (PmmC func) args[3] r=1  (not used)
flash_Blit2                         -506  0xfffffe06 (PmmC func) args[4] r=1  (not used)
flash_Blit4                         -505  0xfffffe07 (PmmC func) args[4] r=1  (not used)
flash_Blit8                         -504  0xfffffe08 (PmmC func) args[3] r=1  (not used)
flash_Copy                          -496  0xfffffe10 (PmmC func) args[4] r=1  (not used)
flash_EraseBank                     -499  0xfffffe0d (PmmC func) args[2] r=1  (not used)
flash_Exec                          -508  0xfffffe04 (PmmC func) args[2] r=1  (not used)
flash_GetByte                       -494  0xfffffe12 (PmmC func) args[2] r=1  (not used)
flash_GetWord                       -495  0xfffffe11 (PmmC func) args[2] r=1  (not used)
flash_LoadFile                      -500  0xfffffe0c (PmmC func) args[2] r=1  (not used)
flash_putstr                        -502  0xfffffe0a (PmmC func) args[2] r=1  (not used)
FLASH_READ_PROTECT                    16  0x00000010 (const dword)  (not used)
flash_Run                           -497  0xfffffe0f (PmmC func) args[1] r=1  (not used)
FLASH_WRITE_PROTECT                   32  0x00000020 (const dword)  (not used)
flash_WriteBlock                    -501  0xfffffe0b (PmmC func) args[3] r=1  (not used)
FLASHBANK_0                            0  0x00000000 (const dword)  (not used)
FLASHBANK_1                            1  0x00000001 (const dword)  (not used)
FLASHBANK_2                            2  0x00000002 (const dword)  (not used)
FLASHBANK_3                            3  0x00000003 (const dword)  (not used)
FLASHBANK_4                            4  0x00000004 (const dword)  (not used)
FLASHBANK_5                            5  0x00000005 (const dword)  (not used)
FLORALWHITE                        65502  0x0000ffde (const dword)  (not used)
flt_ABS                              -84  0xffffffac (PmmC func) args[2] r=1  (not used)
flt_ACOS                             -85  0xffffffab (PmmC func) args[2] r=1  (not used)
flt_ADD                              -97  0xffffff9f (PmmC func) args[3] r=1  (not used)
flt_ASIN                             -86  0xffffffaa (PmmC func) args[2] r=1  (not used)
flt_ATAN                             -87  0xffffffa9 (PmmC func) args[2] r=1  (not used)
flt_CEIL                             -90  0xffffffa6 (PmmC func) args[2] r=1  (not used)
flt_COS                              -88  0xffffffa8 (PmmC func) args[2] r=1  (not used)
flt_DIV                             -100  0xffffff9c (PmmC func) args[3] r=1  (not used)
flt_EQ                              -101  0xffffff9b (PmmC func) args[2] r=1  (not used)
flt_EXP                              -89  0xffffffa7 (PmmC func) args[2] r=1  (not used)
flt_FLOOR                            -91  0xffffffa5 (PmmC func) args[2] r=1  (not used)
flt_FTOI                            -108  0xffffff94 (PmmC func) args[1] r=1  (not used)
flt_GE                              -104  0xffffff98 (PmmC func) args[2] r=1  (not used)
flt_GT                              -103  0xffffff99 (PmmC func) args[2] r=1  (not used)
flt_ITOF                             -79  0xffffffb1 (PmmC func) args[2] r=1  (not used)
flt_LE                              -106  0xffffff96 (PmmC func) args[2] r=1  (not used)
flt_LOG                              -93  0xffffffa3 (PmmC func) args[2] r=1  (not used)
flt_LT                              -105  0xffffff97 (PmmC func) args[2] r=1  (not used)
flt_LTOF                             -81  0xffffffaf (PmmC func) args[2] r=1  (not used)
flt_MUL                              -99  0xffffff9d (PmmC func) args[3] r=1  (not used)
flt_NE                              -102  0xffffff9a (PmmC func) args[2] r=1  (not used)
flt_POW                              -96  0xffffffa0 (PmmC func) args[3] r=1  (not used)
flt_PRINT                            -83  0xffffffad (PmmC func) args[2] r=1  (not used)
flt_PRINTxy                         -109  0xffffff93 (PmmC func) args[4] r=1  (not used)
flt_SGN                             -107  0xffffff95 (PmmC func) args[1] r=1  (not used)
flt_SIN                              -92  0xffffffa4 (PmmC func) args[2] r=1  (not used)
flt_SQR                              -94  0xffffffa2 (PmmC func) args[2] r=1  (not used)
flt_SUB                              -98  0xffffff9e (PmmC func) args[3] r=1  (not used)
flt_TAN                              -95  0xffffffa1 (PmmC func) args[2] r=1  (not used)
flt_UITOF                            -80  0xffffffb0 (PmmC func) args[2] r=1  (not used)
flt_ULTOF                            -82  0xffffffae (PmmC func) args[2] r=1  (not used)
flt_VAL                              -78  0xffffffb2 (PmmC func) args[2] r=1  (not used)
FONT1                                  1  0x00000001 (const dword)  (not used)
FONT2                                  2  0x00000002 (const dword)  (not used)
FONT3                                  3  0x00000003 (const dword)  (not used)
FONT_1                                 1  0x00000001 (const dword)  (not used)
FONT_10                               10  0x0000000a (const dword)  (not used)
FONT_11                               11  0x0000000b (const dword)  (not used)
FONT_2                                 2  0x00000002 (const dword)  (not used)
FONT_3                                 3  0x00000003 (const dword)  (not used)
FONT_4                                 4  0x00000004 (const dword)  (not used)
FONT_5                                 5  0x00000005 (const dword)  (not used)
FONT_6                                 6  0x00000006 (const dword)  (not used)
FONT_7                                 7  0x00000007 (const dword)  (not used)
FONT_8                                 8  0x00000008 (const dword)  (not used)
FONT_9                                 9  0x00000009 (const dword)  (not used)
FONT_ID                                2  0x00000002 (const dword)  (not used)
FONT_SIZE                              2  0x00000002 (const dword)  (not used)
FORESTGREEN                         9284  0x00002444 (const dword)  (not used)
FormBGcolors                       12907  0x0000326bFormBGcolors                       12907  0x0000326b (mem) word[75] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 8)
FormBGcolors                      UNRESOLVED  (usage 4)
FormEndIndex                         157  0x0000009dFormEndIndex                         157  0x0000009d (mem) word[75] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 6)
FormStartIndex                         7  0x00000007FormStartIndex                         7  0x00000007 (mem) word[75] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 7)
FormStartIndex                    UNRESOLVED  (usage 2)
FRAME_DELAY                           22  0x00000016 (const dword)  (not used)
FUCHSIA                            63519  0x0000f81f (const dword)  (not used)
GAINSBORO                          57083  0x0000defb (const dword)  (not used)
gbutton                           UNRESOLVED  (not used)
Gen4_ULCD_35DCT_CLB_DIABLO16_GFX       0  0x00000000 (const ??? 0)  (not used)
GFX                                63489  0x0000f801 (const dword)  (not used)
gfx_332to565                        -165  0xffffff5b (PmmC func) args[1] r=1  (not used)
gfx_565to332                        -166  0xffffff5a (PmmC func) args[1] r=1  (not used)
gfx_Arc                             -172  0xffffff54 (PmmC func) args[7] r=0  (not used)
gfx_BevelRadius                     -194  0xffffff3e (PmmC func) args[1] r=1  (not used)
gfx_BevelShadow                     -196  0xffffff3c (PmmC func) args[1] r=1  (not used)
gfx_BevelWidth                      -195  0xffffff3d (PmmC func) args[1] r=1  (not used)
gfx_BGcolour                        -184  0xffffff48 (PmmC func) args[1] r=1  (not used)
GFX_BOTTOM                            51  0x00000033 (const dword)  (not used)
gfx_BoxTo                           -149  0xffffff6b (PmmC func) args[2] r=0  (not used)
gfx_Bullet                          -146  0xffffff6e (PmmC func) args[1] r=0  (not used)
gfx_Button                          -155  0xffffff65 (PmmC func) args[9] r=1  (not used)
gfx_Button2                         -156  0xffffff64 (PmmC func) args[8] r=0  (not used)
gfx_Button3                         -157  0xffffff63 (PmmC func) args[8] r=0  (not used)
gfx_ChangeColour                    -151  0xffffff69 (PmmC func) args[2] r=0  (not used)
gfx_CheckBox                        -158  0xffffff62 (PmmC func) args[8] r=0  (not used)
gfx_Circle                          -136  0xffffff78 (PmmC func) args[4] r=0  (not used)
gfx_CircleFilled                    -137  0xffffff77 (PmmC func) args[4] r=0  (not used)
GFX_CLIP_BOTTOM                      114  0x00000072 (const dword)  (not used)
GFX_CLIP_BOTTOM_VAL                  110  0x0000006e (const dword)  (not used)
GFX_CLIP_LEFT                        111  0x0000006f (const dword)  (not used)
GFX_CLIP_LEFT_VAL                    107  0x0000006b (const dword)  (not used)
GFX_CLIP_RIGHT                       113  0x00000071 (const dword)  (not used)
GFX_CLIP_RIGHT_VAL                   109  0x0000006d (const dword)  (not used)
GFX_CLIP_TOP                         112  0x00000070 (const dword)  (not used)
GFX_CLIP_TOP_VAL                     108  0x0000006c (const dword)  (not used)
gfx_Clipping                        -186  0xffffff46 (PmmC func) args[1] r=1  (usage 6)
gfx_ClipWindow                      -150  0xffffff6a (PmmC func) args[4] r=0  (usage 3)
gfx_Cls                             -126  0xffffff82 (PmmC func) args[0] r=0  (usage 6)
gfx_Contrast                        -192  0xffffff40 (PmmC func) args[1] r=1  (usage 3)
gfx_Dot                             -145  0xffffff6f (PmmC func) args[0] r=0  (not used)
gfx_Ellipse                         -153  0xffffff67 (PmmC func) args[5] r=0  (not used)
gfx_EllipseFilled                   -154  0xffffff66 (PmmC func) args[5] r=0  (not used)
gfx_FillPattern                     -170  0xffffff56 (PmmC func) args[2] r=1  (not used)
gfx_FrameDelay                      -189  0xffffff43 (PmmC func) args[1] r=1  (not used)
gfx_Get                             -182  0xffffff4a (PmmC func) args[1] r=1  (not used)
gfx_GetPixel                        -139  0xffffff75 (PmmC func) args[2] r=1  (not used)
gfx_Gradient                        -176  0xffffff50 (PmmC func) args[7] r=0  (not used)
gfx_Hline                           -132  0xffffff7c (PmmC func) args[4] r=1  (not used)
gfx_IncX                            -147  0xffffff6d (PmmC func) args[0] r=1  (not used)
gfx_IncY                            -148  0xffffff6c (PmmC func) args[0] r=1  (not used)
GFX_LAST_CHAR_HEIGHT                 120  0x00000078 (const dword)  (not used)
GFX_LAST_CHAR_WIDTH                  119  0x00000077 (const dword)  (not used)
GFX_LAST_STR_HEIGHT                  122  0x0000007a (const dword)  (not used)
GFX_LAST_STR_WIDTH                   121  0x00000079 (const dword)  (not used)
GFX_LEFT                              48  0x00000030 (const dword)  (not used)
gfx_Line                            -131  0xffffff7d (PmmC func) args[5] r=0  (not used)
gfx_LinePattern                     -193  0xffffff3f (PmmC func) args[1] r=1  (not used)
gfx_LineRel                         -130  0xffffff7e (PmmC func) args[2] r=0  (not used)
gfx_LineTo                          -129  0xffffff7f (PmmC func) args[2] r=0  (not used)
gfx_MoveRel                         -128  0xffffff80 (PmmC func) args[2] r=0  (not used)
gfx_MoveTo                          -127  0xffffff81 (PmmC func) args[2] r=0  (usage 3)
gfx_ObjectColour                    -185  0xffffff47 (PmmC func) args[1] r=1  (not used)
gfx_Orbit                           -142  0xffffff72 (PmmC func) args[2] r=0  (not used)
gfx_OrbitInit                       -141  0xffffff73 (PmmC func) args[2] r=0  (not used)
gfx_Origin                          -169  0xffffff57 (PmmC func) args[2] r=0  (not used)
gfx_OutlineColour                   -191  0xffffff41 (PmmC func) args[1] r=1  (not used)
gfx_Panel                           -161  0xffffff5f (PmmC func) args[6] r=0  (not used)
gfx_PenSize                         -183  0xffffff49 (PmmC func) args[1] r=1  (not used)
gfx_PieSlice                        -171  0xffffff55 (PmmC func) args[9] r=0  (not used)
gfx_PointWithinBox                  -199  0xffffff39 (PmmC func) args[3] r=1  (not used)
gfx_PointWithinRectangle            -200  0xffffff38 (PmmC func) args[3] r=1  (not used)
gfx_Polygon                         -144  0xffffff70 (PmmC func) args[4] r=0  (not used)
gfx_PolygonFilled                   -168  0xffffff58 (PmmC func) args[4] r=0  (not used)
gfx_Polyline                        -143  0xffffff71 (PmmC func) args[4] r=0  (not used)
gfx_PutPixel                        -138  0xffffff76 (PmmC func) args[3] r=0  (not used)
gfx_RadioButton                     -159  0xffffff61 (PmmC func) args[8] r=0  (not used)
gfx_ReadBresLine                    -178  0xffffff4e (PmmC func) args[5] r=1  (not used)
gfx_ReadGRAMarea                    -180  0xffffff4c (PmmC func) args[5] r=1  (not used)
gfx_Rectangle                       -134  0xffffff7a (PmmC func) args[5] r=0  (not used)
gfx_RectangleFilled                 -135  0xffffff79 (PmmC func) args[5] r=0  (usage 6)
gfx_RGBto565                        -164  0xffffff5c (PmmC func) args[3] r=1  (not used)
GFX_RIGHT                             50  0x00000032 (const dword)  (not used)
gfx_RoundGradient                   -177  0xffffff4f (PmmC func) args[8] r=0  (not used)
gfx_RoundPanel                      -175  0xffffff51 (PmmC func) args[8] r=0  (not used)
gfx_RoundRect                       -173  0xffffff53 (PmmC func) args[6] r=0  (not used)
gfx_Scope                           -532  0xfffffdec (PmmC func) args[19] r=0  (not used)
gfx_ScreenCopyPaste                 -163  0xffffff5d (PmmC func) args[6] r=0  (not used)
gfx_ScreenMode                      -190  0xffffff42 (PmmC func) args[1] r=1  (usage 3)
gfx_Set                             -125  0xffffff83 (PmmC func) args[2] r=0  (usage 3)
gfx_SetClipRegion                   -152  0xffffff68 (PmmC func) args[0] r=0  (not used)
gfx_Slider                          -162  0xffffff5e (PmmC func) args[8] r=1  (not used)
gfx_Slider2                         -160  0xffffff60 (PmmC func) args[8] r=1  (not used)
gfx_Surround                        -174  0xffffff52 (PmmC func) args[7] r=0  (not used)
GFX_THUMB_BORDER_DARK                 76  0x0000004c (const dword)  (not used)
GFX_THUMB_BORDER_LIGHT                77  0x0000004d (const dword)  (not used)
GFX_THUMB_PERCENT                     75  0x0000004b (const dword)  (not used)
GFX_TOP                               49  0x00000031 (const dword)  (not used)
GFX_TOUCH_REGION_X1                  103  0x00000067 (const dword)  (not used)
GFX_TOUCH_REGION_X2                  105  0x00000069 (const dword)  (not used)
GFX_TOUCH_REGION_Y1                  104  0x00000068 (const dword)  (not used)
GFX_TOUCH_REGION_Y2                  106  0x0000006a (const dword)  (not used)
gfx_Transparency                    -188  0xffffff44 (PmmC func) args[1] r=1  (not used)
gfx_TransparentColour               -187  0xffffff45 (PmmC func) args[1] r=1  (not used)
gfx_Triangle                        -140  0xffffff74 (PmmC func) args[7] r=0  (not used)
gfx_TriangleFilled                  -167  0xffffff59 (PmmC func) args[7] r=0  (not used)
gfx_Vline                           -133  0xffffff7b (PmmC func) args[4] r=1  (not used)
gfx_WriteBresLine                   -179  0xffffff4d (PmmC func) args[5] r=0  (not used)
gfx_WriteGRAMarea                   -181  0xffffff4b (PmmC func) args[5] r=0  (not used)
GFX_X1                                52  0x00000034 (const dword)  (not used)
GFX_X2                                54  0x00000036 (const dword)  (not used)
GFX_X_ORG                             56  0x00000038 (const dword)  (not used)
GFX_XMAX                              46  0x0000002e (const dword)  (not used)
gfx_Xorigin                         -197  0xffffff3b (PmmC func) args[1] r=1  (not used)
GFX_Y1                                53  0x00000035 (const dword)  (not used)
GFX_Y2                                55  0x00000037 (const dword)  (not used)
GFX_Y_ORG                             57  0x00000039 (const dword)  (not used)
GFX_YMAX                              47  0x0000002f (const dword)  (not used)
gfx_Yorigin                         -198  0xffffff3a (PmmC func) args[1] r=1  (not used)
GHOSTWHITE                         65503  0x0000ffdf (const dword)  (not used)
GOLD                               65184  0x0000fea0 (const dword)  (not used)
GOLDENROD                          56612  0x0000dd24 (const dword)  (not used)
GRAD_DOWN                             32  0x00000020 (const dword)  (not used)
GRAD_LEFT                             80  0x00000050 (const dword)  (not used)
GRAD_RIGHT                            48  0x00000030 (const dword)  (not used)
GRAD_UP                               64  0x00000040 (const dword)  (not used)
GRAD_WAVE_HOR                        112  0x00000070 (const dword)  (not used)
GRAD_WAVE_VER                         96  0x00000060 (const dword)  (not used)
GRAM_PIXEL_COUNT_HI                  116  0x00000074 (const dword)  (not used)
GRAM_PIXEL_COUNT_LO                  115  0x00000073 (const dword)  (not used)
GRAY                               33808  0x00008410 (const dword)  (not used)
GREEN                               1024  0x00000400 (const dword)  (not used)
GREENYELLOW                        45029  0x0000afe5 (const dword)  (not used)
HEX                                 5136  0x00001410 (const dword)  (not used)
HEX1                                4368  0x00001110 (const dword)  (not used)
HEX1Z                                272  0x00000110 (const dword)  (not used)
HEX1ZB                              8464  0x00002110 (const dword)  (not used)
HEX2                                4624  0x00001210 (const dword)  (not used)
HEX2Z                                528  0x00000210 (const dword)  (not used)
HEX2ZB                              8720  0x00002210 (const dword)  (not used)
HEX3                                4880  0x00001310 (const dword)  (not used)
HEX3Z                                784  0x00000310 (const dword)  (not used)
HEX3ZB                              8976  0x00002310 (const dword)  (not used)
HEX4                                5136  0x00001410 (const dword)  (not used)
HEX4Z                               1040  0x00000410 (const dword)  (not used)
HEX4ZB                              9232  0x00002410 (const dword)  (not used)
HEXZ                                1040  0x00000410 (const dword)  (not used)
HEXZB                               9232  0x00002410 (const dword)  (not used)
hFonts                                 2  0x00000002 (mem) word[53] (global)  (usage 294)
HI                                     1  0x00000001 (const dword)  (not used)
HIbyte                               -48  0xffffffd0 (PmmC func) args[1] r=1  (not used)
HIDE                                   2  0x00000002 (const dword)  (not used)
hndl                                   0  0x00000000 (mem) word (global)  (usage 87)
HONEYDEW                           63486  0x0000f7fe (const dword)  (not used)
HOTPINK                            64342  0x0000fb56 (const dword)  (not used)
hstrings                             214  0x000000d6 (mem) word (global)  (usage 12)
HYPER                                  3  0x00000003 (const dword)  (not used)
I2C1                               63520  0x0000f820 (const dword)  (not used)
I2C1_Ack                            -305  0xfffffecf (PmmC func) args[0] r=0  (not used)
I2C1_AckPoll                        -314  0xfffffec6 (PmmC func) args[1] r=1  (not used)
I2C1_AckStatus                      -311  0xfffffec9 (PmmC func) args[0] r=1  (not used)
I2C1_Close                          -287  0xfffffee1 (PmmC func) args[0] r=0  (not used)
I2C1_Getn                           -323  0xfffffebd (PmmC func) args[2] r=1  (not used)
I2C1_Gets                           -320  0xfffffec0 (PmmC func) args[2] r=1  (not used)
I2C1_Idle                           -317  0xfffffec3 (PmmC func) args[0] r=1  (not used)
I2C1_Nack                           -308  0xfffffecc (PmmC func) args[0] r=0  (not used)
I2C1_Open                           -284  0xfffffee4 (PmmC func) args[3] r=1  (not used)
I2C1_Putn                           -329  0xfffffeb7 (PmmC func) args[2] r=1  (not used)
I2C1_Puts                           -326  0xfffffeba (PmmC func) args[1] r=1  (not used)
I2C1_Read                           -299  0xfffffed5 (PmmC func) args[0] r=1  (not used)
I2C1_Restart                        -296  0xfffffed8 (PmmC func) args[0] r=1  (not used)
I2C1_Start                          -290  0xfffffede (PmmC func) args[0] r=1  (not used)
I2C1_Stop                           -293  0xfffffedb (PmmC func) args[0] r=1  (not used)
I2C1_Write                          -302  0xfffffed2 (PmmC func) args[1] r=1  (not used)
I2C2                               63521  0x0000f821 (const dword)  (not used)
I2C2_Ack                            -306  0xfffffece (PmmC func) args[0] r=0  (not used)
I2C2_AckPoll                        -315  0xfffffec5 (PmmC func) args[1] r=1  (not used)
I2C2_AckStatus                      -312  0xfffffec8 (PmmC func) args[0] r=1  (not used)
I2C2_Close                          -288  0xfffffee0 (PmmC func) args[0] r=0  (not used)
I2C2_Getn                           -324  0xfffffebc (PmmC func) args[2] r=1  (not used)
I2C2_Gets                           -321  0xfffffebf (PmmC func) args[2] r=1  (not used)
I2C2_Idle                           -318  0xfffffec2 (PmmC func) args[0] r=1  (not used)
I2C2_Nack                           -309  0xfffffecb (PmmC func) args[0] r=0  (not used)
I2C2_Open                           -285  0xfffffee3 (PmmC func) args[3] r=1  (not used)
I2C2_Putn                           -330  0xfffffeb6 (PmmC func) args[2] r=1  (not used)
I2C2_Puts                           -327  0xfffffeb9 (PmmC func) args[1] r=1  (not used)
I2C2_Read                           -300  0xfffffed4 (PmmC func) args[0] r=1  (not used)
I2C2_Restart                        -297  0xfffffed7 (PmmC func) args[0] r=1  (not used)
I2C2_Start                          -291  0xfffffedd (PmmC func) args[0] r=1  (not used)
I2C2_Stop                           -294  0xfffffeda (PmmC func) args[0] r=1  (not used)
I2C2_Write                          -303  0xfffffed1 (PmmC func) args[1] r=1  (not used)
I2C3                               63522  0x0000f822 (const dword)  (not used)
I2C3_Ack                            -307  0xfffffecd (PmmC func) args[0] r=0  (not used)
I2C3_AckPoll                        -316  0xfffffec4 (PmmC func) args[1] r=1  (not used)
I2C3_AckStatus                      -313  0xfffffec7 (PmmC func) args[0] r=1  (not used)
I2C3_Close                          -289  0xfffffedf (PmmC func) args[0] r=0  (not used)
I2C3_Getn                           -325  0xfffffebb (PmmC func) args[2] r=1  (not used)
I2C3_Gets                           -322  0xfffffebe (PmmC func) args[2] r=1  (not used)
I2C3_Idle                           -319  0xfffffec1 (PmmC func) args[0] r=1  (not used)
I2C3_Nack                           -310  0xfffffeca (PmmC func) args[0] r=0  (not used)
I2C3_Open                           -286  0xfffffee2 (PmmC func) args[3] r=1  (not used)
I2C3_Putn                           -331  0xfffffeb5 (PmmC func) args[2] r=1  (not used)
I2C3_Puts                           -328  0xfffffeb8 (PmmC func) args[1] r=1  (not used)
I2C3_Read                           -301  0xfffffed3 (PmmC func) args[0] r=1  (not used)
I2C3_Restart                        -298  0xfffffed6 (PmmC func) args[0] r=1  (not used)
I2C3_Start                          -292  0xfffffedc (PmmC func) args[0] r=1  (not used)
I2C3_Stop                           -295  0xfffffed9 (PmmC func) args[0] r=1  (not used)
I2C3_Write                          -304  0xfffffed0 (PmmC func) args[1] r=1  (not used)
I2C_10KHZ                              3  0x00000003 (const dword)  (not used)
I2C_20KHZ                              4  0x00000004 (const dword)  (not used)
I2C_250KHZ                             6  0x00000006 (const dword)  (not used)
I2C_50KHZ                              5  0x00000005 (const dword)  (not used)
I2C_FAST                               2  0x00000002 (const dword)  (not used)
I2C_MED                                1  0x00000001 (const dword)  (not used)
I2C_SLOW                               0  0x00000000 (const dword)  (not used)
I_COLOUR16                            16  0x00000010 (const dword)  (not used)
I_DARKEN                           16384  0x00004000 (const dword)  (not used)
I_ENABLED                          32768  0x00008000 (const dword)  (usage 3)
I_LIGHTEN                           8192  0x00002000 (const dword)  (not used)
I_MOVIE                              128  0x00000080 (const dword)  (not used)
I_NOGROUP                             64  0x00000040 (const dword)  (not used)
I_STAYONTOP                          256  0x00000100 (const dword)  (usage 3)
I_TOPMOST                            512  0x00000200 (const dword)  (not used)
I_TOUCH_DISABLE                       32  0x00000020 (const dword)  (usage 6)
I_TOUCHED                           4096  0x00001000 (const dword)  (not used)
I_X_LOCK                            1024  0x00000400 (const dword)  (not used)
I_Y_LOCK                            2048  0x00000800 (const dword)  (not used)
iForm1                                 1  0x00000001 (const ??? 0)  (usage 3)
iForm10                              169  0x000000a9 (const ??? 0)  (usage 3)
iForm11                              178  0x000000b2 (const ??? 0)  (usage 3)
iForm12                              171  0x000000ab (const ??? 0)  (usage 3)
iForm13                              121  0x00000079 (const ??? 0)  (usage 3)
iForm14                               37  0x00000025 (const ??? 0)  (usage 3)
iForm15                              173  0x000000ad (const ??? 0)  (usage 3)
iForm16                              103  0x00000067 (const ??? 0)  (usage 3)
iForm17                              127  0x0000007f (const ??? 0)  (usage 3)
iForm18                              187  0x000000bb (const ??? 0)  (usage 3)
iForm19                               41  0x00000029 (const ??? 0)  (usage 3)
iForm2                                 5  0x00000005 (const ??? 0)  (usage 3)
iForm20                               43  0x0000002b (const ??? 0)  (usage 3)
iForm21                               52  0x00000034 (const ??? 0)  (usage 3)
iForm22                              203  0x000000cb (const ??? 0)  (usage 3)
iForm23                              218  0x000000da (const ??? 0)  (usage 3)
iForm24                              249  0x000000f9 (const ??? 0)  (usage 3)
iForm25                              129  0x00000081 (const ??? 0)  (usage 3)
iForm26                              300  0x0000012c (const ??? 0)  (usage 3)
iForm27                               55  0x00000037 (const ??? 0)  (usage 3)
iForm28                               67  0x00000043 (const ??? 0)  (usage 3)
iForm29                              195  0x000000c3 (const ??? 0)  (usage 3)
iForm3                               117  0x00000075 (const ??? 0)  (usage 3)
iForm30                              303  0x0000012f (const ??? 0)  (usage 3)
iForm31                               75  0x0000004b (const ??? 0)  (usage 3)
iForm32                               78  0x0000004e (const ??? 0)  (usage 3)
iForm33                               81  0x00000051 (const ??? 0)  (usage 3)
iForm34                               93  0x0000005d (const ??? 0)  (usage 3)
iForm35                               98  0x00000062 (const ??? 0)  (usage 3)
iForm36                              193  0x000000c1 (const ??? 0)  (usage 3)
iForm37                              208  0x000000d0 (const ??? 0)  (usage 3)
iForm38                              210  0x000000d2 (const ??? 0)  (usage 3)
iForm39                              212  0x000000d4 (const ??? 0)  (usage 3)
iForm4                                17  0x00000011 (const ??? 0)  (usage 3)
iForm40                              284  0x0000011c (const ??? 0)  (usage 3)
iForm41                              246  0x000000f6 (const ??? 0)  (usage 3)
iForm42                              221  0x000000dd (const ??? 0)  (usage 3)
iForm43                              226  0x000000e2 (const ??? 0)  (usage 3)
iForm44                              107  0x0000006b (const ??? 0)  (usage 3)
iForm45                              306  0x00000132 (const ??? 0)  (usage 3)
iForm46                              228  0x000000e4 (const ??? 0)  (usage 3)
iForm47                              125  0x0000007d (const ??? 0)  (usage 3)
iForm48                              136  0x00000088 (const ??? 0)  (usage 3)
iForm49                              143  0x0000008f (const ??? 0)  (usage 3)
iForm5                                22  0x00000016 (const ??? 0)  (usage 3)
iForm50                              231  0x000000e7 (const ??? 0)  (usage 3)
iForm51                              236  0x000000ec (const ??? 0)  (usage 3)
iForm52                              148  0x00000094 (const ??? 0)  (usage 3)
iForm53                              159  0x0000009f (const ??? 0)  (usage 3)
iForm54                              239  0x000000ef (const ??? 0)  (usage 3)
iForm55                              242  0x000000f2 (const ??? 0)  (usage 3)
iForm56                              251  0x000000fb (const ??? 0)  (usage 3)
iForm57                              253  0x000000fd (const ??? 0)  (usage 3)
iForm58                              258  0x00000102 (const ??? 0)  (usage 3)
iForm59                              270  0x0000010e (const ??? 0)  (usage 3)
iForm6                                27  0x0000001b (const ??? 0)  (usage 3)
iForm60                              260  0x00000104 (const ??? 0)  (usage 3)
iForm61                              263  0x00000107 (const ??? 0)  (usage 3)
iForm62                              265  0x00000109 (const ??? 0)  (usage 3)
iForm63                              268  0x0000010c (const ??? 0)  (usage 3)
iForm64                              281  0x00000119 (const ??? 0)  (usage 3)
iForm65                              286  0x0000011e (const ??? 0)  (usage 3)
iForm66                              291  0x00000123 (const ??? 0)  (usage 3)
iForm67                              294  0x00000126 (const ??? 0)  (usage 3)
iForm68                              297  0x00000129 (const ??? 0)  (usage 3)
iForm69                              308  0x00000134 (const ??? 0)  (usage 3)
iForm7                               256  0x00000100 (const ??? 0)  (usage 3)
iForm70                              309  0x00000135 (const ??? 0)  (usage 3)
iForm71                              311  0x00000137 (const ??? 0)  (usage 3)
iForm72                              313  0x00000139 (const ??? 0)  (usage 3)
iForm73                              315  0x0000013b (const ??? 0)  (usage 3)
iForm74                              317  0x0000013d (const ??? 0)  (usage 3)
iForm8                               176  0x000000b0 (const ??? 0)  (usage 3)
iForm9                                33  0x00000021 (const ??? 0)  (usage 3)
IMAGE_CLUSTER                         10  0x0000000a (const dword)  (not used)
IMAGE_DELAY                            7  0x00000007 (const dword)  (not used)
IMAGE_FLAGS                            6  0x00000006 (const dword)  (not used)
IMAGE_FRAMES                           8  0x00000008 (const dword)  (not used)
IMAGE_HEIGHT                           5  0x00000005 (const dword)  (not used)
IMAGE_HIWORD                           1  0x00000001 (const dword)  (not used)
IMAGE_INDEX                            9  0x00000009 (const dword)  (usage 42)
IMAGE_LOWORD                           0  0x00000000 (const dword)  (not used)
IMAGE_SECTOR                          11  0x0000000b (const dword)  (not used)
IMAGE_TAG                             12  0x0000000c (const dword)  (usage 9)
IMAGE_TAG2                            13  0x0000000d (const dword)  (not used)
IMAGE_WIDTH                            4  0x00000004 (const dword)  (not used)
IMAGE_XPOS                             2  0x00000002 (const dword)  (not used)
IMAGE_YPOS                             3  0x00000003 (const dword)  (not used)
img_ClearAttributes                 -383  0xfffffe81 (PmmC func) args[3] r=1  (usage 3)
IMG_COUNT                              0  0x00000000 (const dword)  (not used)
IMG_CURRENT_FRAME                     89  0x00000059 (const dword)  (not used)
img_Darken                          -377  0xfffffe87 (PmmC func) args[2] r=1  (not used)
IMG_DAT_FILENAME                       4  0x00000004 (const dword)  (not used)
img_Disable                         -376  0xfffffe88 (PmmC func) args[2] r=1  (usage 6)
img_Enable                          -375  0xfffffe89 (PmmC func) args[2] r=1  (not used)
IMG_ENTRYLEN                           1  0x00000001 (const dword)  (not used)
IMG_FLAGS                             85  0x00000055 (const dword)  (not used)
IMG_FRAME_COUNT                       86  0x00000056 (const dword)  (not used)
IMG_FRAME_DELAY                       84  0x00000054 (const dword)  (not used)
IMG_GCI_FILENAME                       3  0x00000003 (const dword)  (not used)
IMG_GCIFILE_HANDLE                     5  0x00000005 (const dword)  (not used)
img_GetWord                         -380  0xfffffe84 (PmmC func) args[3] r=1  (usage 39)
IMG_HEIGHT                            83  0x00000053 (const dword)  (not used)
img_Lighten                         -378  0xfffffe86 (PmmC func) args[2] r=1  (not used)
IMG_MODE                               2  0x00000002 (const dword)  (not used)
IMG_PIXEL_COUNT_HI                    88  0x00000058 (const dword)  (not used)
IMG_PIXEL_COUNT_LO                    87  0x00000057 (const dword)  (not used)
img_SelectReadPosition              -385  0xfffffe7f (PmmC func) args[5] r=1  (not used)
img_SequentialRead                  -386  0xfffffe7e (PmmC func) args[2] r=1  (not used)
img_SetAttributes                   -382  0xfffffe82 (PmmC func) args[3] r=1  (usage 6)
img_SetPosition                     -374  0xfffffe8a (PmmC func) args[4] r=1  (not used)
img_SetWord                         -379  0xfffffe85 (PmmC func) args[4] r=1  (usage 12)
img_Show                            -381  0xfffffe83 (PmmC func) args[2] r=1  (usage 15)
img_Touched                         -384  0xfffffe80 (PmmC func) args[2] r=1  (usage 3)
IMG_WIDTH                             82  0x00000052 (const dword)  (not used)
INDIANRED                          51947  0x0000caeb (const dword)  (not used)
INDIGO                             18448  0x00004810 (const dword)  (not used)
InputControls                        307  0x00000133InputControls                        307  0x00000133 (mem) word[320] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 6)
InputCS                              538  0x0000021a (mem) word (global)  (usage 21)
InputData                            947  0x000003b3InputData                            947  0x000003b3 (mem) word[4895] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 24)
InputType                            290  0x00000122 (mem) word (global)  (usage 24)
INVERSE                               64  0x00000040 (const dword)  (not used)
IPDatasize                            22  0x00000016 (const dword)  (usage 3)
isalnum                              -41  0xffffffd7 (PmmC func) args[1] r=1  (not used)
isalpha                              -40  0xffffffd8 (PmmC func) args[1] r=1  (not used)
isdigit                              -36  0xffffffdc (PmmC func) args[1] r=1  (not used)
islower                              -39  0xffffffd9 (PmmC func) args[1] r=1  (not used)
isprint                              -42  0xffffffd6 (PmmC func) args[1] r=1  (not used)
isspace                              -43  0xffffffd5 (PmmC func) args[1] r=1  (not used)
iStrings0                          10737  0x000029f1iStrings0                          10737  0x000029f1 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings1                          10763  0x00002a0biStrings1                          10763  0x00002a0b (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings10                         10997  0x00002af5iStrings10                         10997  0x00002af5 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings11                         11023  0x00002b0fiStrings11                         11023  0x00002b0f (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings12                         11049  0x00002b29iStrings12                         11049  0x00002b29 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings13                         11075  0x00002b43iStrings13                         11075  0x00002b43 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings14                         11101  0x00002b5diStrings14                         11101  0x00002b5d (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings15                         11127  0x00002b77iStrings15                         11127  0x00002b77 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings16                         11153  0x00002b91iStrings16                         11153  0x00002b91 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings17                         11179  0x00002babiStrings17                         11179  0x00002bab (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings18                         11205  0x00002bc5iStrings18                         11205  0x00002bc5 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings19                         11231  0x00002bdfiStrings19                         11231  0x00002bdf (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings2                          10789  0x00002a25iStrings2                          10789  0x00002a25 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings20                         11257  0x00002bf9iStrings20                         11257  0x00002bf9 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings21                         11283  0x00002c13iStrings21                         11283  0x00002c13 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings22                         11309  0x00002c2diStrings22                         11309  0x00002c2d (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings23                         11335  0x00002c47iStrings23                         11335  0x00002c47 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings24                         11361  0x00002c61iStrings24                         11361  0x00002c61 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings25                         11387  0x00002c7biStrings25                         11387  0x00002c7b (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings26                         11413  0x00002c95iStrings26                         11413  0x00002c95 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings27                         11439  0x00002cafiStrings27                         11439  0x00002caf (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings28                         11465  0x00002cc9iStrings28                         11465  0x00002cc9 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings29                         11491  0x00002ce3iStrings29                         11491  0x00002ce3 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings3                          10815  0x00002a3fiStrings3                          10815  0x00002a3f (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings30                         11517  0x00002cfdiStrings30                         11517  0x00002cfd (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings31                         11543  0x00002d17iStrings31                         11543  0x00002d17 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings32                         11569  0x00002d31iStrings32                         11569  0x00002d31 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings33                         11595  0x00002d4biStrings33                         11595  0x00002d4b (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings34                         11621  0x00002d65iStrings34                         11621  0x00002d65 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings35                         11647  0x00002d7fiStrings35                         11647  0x00002d7f (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings36                         11673  0x00002d99iStrings36                         11673  0x00002d99 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings37                         11699  0x00002db3iStrings37                         11699  0x00002db3 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings38                         11725  0x00002dcdiStrings38                         11725  0x00002dcd (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings39                         11751  0x00002de7iStrings39                         11751  0x00002de7 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings4                          10841  0x00002a59iStrings4                          10841  0x00002a59 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings40                         11777  0x00002e01iStrings40                         11777  0x00002e01 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings41                         11803  0x00002e1biStrings41                         11803  0x00002e1b (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings42                         11829  0x00002e35iStrings42                         11829  0x00002e35 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings43                         11855  0x00002e4fiStrings43                         11855  0x00002e4f (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings44                         11881  0x00002e69iStrings44                         11881  0x00002e69 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings45                         11907  0x00002e83iStrings45                         11907  0x00002e83 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings46                         11933  0x00002e9diStrings46                         11933  0x00002e9d (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings47                         11959  0x00002eb7iStrings47                         11959  0x00002eb7 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings49                         11985  0x00002ed1iStrings49                         11985  0x00002ed1 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings5                          10867  0x00002a73iStrings5                          10867  0x00002a73 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings50                         12011  0x00002eebiStrings50                         12011  0x00002eeb (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings51                         12037  0x00002f05iStrings51                         12037  0x00002f05 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings52                         12063  0x00002f1fiStrings52                         12063  0x00002f1f (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings6                          10893  0x00002a8diStrings6                          10893  0x00002a8d (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings7                          10919  0x00002aa7iStrings7                          10919  0x00002aa7 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings8                          10945  0x00002ac1iStrings8                          10945  0x00002ac1 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings9                          10971  0x00002adbiStrings9                          10971  0x00002adb (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
isupper                              -38  0xffffffda (PmmC func) args[1] r=1  (not used)
iswhite                              -44  0xffffffd4 (PmmC func) args[1] r=1  (not used)
isxdigit                             -37  0xffffffdb (PmmC func) args[1] r=1  (not used)
ITALIC                                32  0x00000020 (const dword)  (not used)
iterator                            -404  0xfffffe6c (PmmC func) args[1] r=0  (not used)
iUserbutton0                          28  0x0000001c (const ??? 0)  (usage 3)
iUserbutton1                           2  0x00000002 (const ??? 0)  (usage 3)
iUserbutton10                        269  0x0000010d (const ??? 0)  (usage 3)
iUserbutton100                        64  0x00000040 (const ??? 0)  (usage 3)
iUserbutton101                        65  0x00000041 (const ??? 0)  (usage 3)
iUserbutton102                        82  0x00000052 (const ??? 0)  (usage 3)
iUserbutton103                        83  0x00000053 (const ??? 0)  (usage 3)
iUserbutton104                        84  0x00000054 (const ??? 0)  (usage 3)
iUserbutton105                        85  0x00000055 (const ??? 0)  (usage 3)
iUserbutton106                        86  0x00000056 (const ??? 0)  (usage 3)
iUserbutton107                        87  0x00000057 (const ??? 0)  (usage 3)
iUserbutton108                        88  0x00000058 (const ??? 0)  (usage 3)
iUserbutton109                        89  0x00000059 (const ??? 0)  (usage 3)
iUserbutton11                         68  0x00000044 (const ??? 0)  (usage 3)
iUserbutton110                        90  0x0000005a (const ??? 0)  (usage 3)
iUserbutton111                        91  0x0000005b (const ??? 0)  (usage 3)
iUserbutton112                        94  0x0000005e (const ??? 0)  (usage 3)
iUserbutton113                        95  0x0000005f (const ??? 0)  (usage 3)
iUserbutton114                        96  0x00000060 (const ??? 0)  (usage 3)
iUserbutton115                        99  0x00000063 (const ??? 0)  (usage 3)
iUserbutton116                       100  0x00000064 (const ??? 0)  (usage 3)
iUserbutton117                       101  0x00000065 (const ??? 0)  (usage 3)
iUserbutton118                       223  0x000000df (const ??? 0)  (usage 3)
iUserbutton119                       139  0x0000008b (const ??? 0)  (usage 3)
iUserbutton12                         23  0x00000017 (const ??? 0)  (usage 3)
iUserbutton120                       198  0x000000c6 (const ??? 0)  (usage 3)
iUserbutton121                       199  0x000000c7 (const ??? 0)  (usage 3)
iUserbutton122                       200  0x000000c8 (const ??? 0)  (usage 3)
iUserbutton123                       205  0x000000cd (const ??? 0)  (usage 3)
iUserbutton124                       206  0x000000ce (const ??? 0)  (usage 3)
iUserbutton125                       207  0x000000cf (const ??? 0)  (usage 3)
iUserbutton126                        51  0x00000033 (const ??? 0)  (usage 3)
iUserbutton127                       140  0x0000008c (const ??? 0)  (usage 3)
iUserbutton128                       144  0x00000090 (const ??? 0)  (usage 3)
iUserbutton129                       145  0x00000091 (const ??? 0)  (usage 3)
iUserbutton13                         24  0x00000018 (const ??? 0)  (usage 3)
iUserbutton130                       146  0x00000092 (const ??? 0)  (usage 3)
iUserbutton131                       133  0x00000085 (const ??? 0)  (usage 3)
iUserbutton132                       209  0x000000d1 (const ??? 0)  (usage 3)
iUserbutton133                       211  0x000000d3 (const ??? 0)  (usage 3)
iUserbutton134                       290  0x00000122 (const ??? 0)  (usage 3)
iUserbutton135                       115  0x00000073 (const ??? 0)  (usage 3)
iUserbutton136                       224  0x000000e0 (const ??? 0)  (usage 3)
iUserbutton137                       225  0x000000e1 (const ??? 0)  (usage 3)
iUserbutton138                       213  0x000000d5 (const ??? 0)  (usage 3)
iUserbutton139                       214  0x000000d6 (const ??? 0)  (usage 3)
iUserbutton14                         11  0x0000000b (const ??? 0)  (usage 3)
iUserbutton140                       215  0x000000d7 (const ??? 0)  (usage 3)
iUserbutton141                       216  0x000000d8 (const ??? 0)  (usage 3)
iUserbutton142                       149  0x00000095 (const ??? 0)  (usage 3)
iUserbutton143                       150  0x00000096 (const ??? 0)  (usage 3)
iUserbutton144                       151  0x00000097 (const ??? 0)  (usage 3)
iUserbutton145                       152  0x00000098 (const ??? 0)  (usage 3)
iUserbutton146                       153  0x00000099 (const ??? 0)  (usage 3)
iUserbutton147                       154  0x0000009a (const ??? 0)  (usage 3)
iUserbutton148                       155  0x0000009b (const ??? 0)  (usage 3)
iUserbutton149                       156  0x0000009c (const ??? 0)  (usage 3)
iUserbutton15                          8  0x00000008 (const ??? 0)  (usage 3)
iUserbutton150                       157  0x0000009d (const ??? 0)  (usage 3)
iUserbutton151                       108  0x0000006c (const ??? 0)  (usage 3)
iUserbutton152                       109  0x0000006d (const ??? 0)  (usage 3)
iUserbutton153                       217  0x000000d9 (const ??? 0)  (usage 3)
iUserbutton154                       110  0x0000006e (const ??? 0)  (usage 3)
iUserbutton155                       111  0x0000006f (const ??? 0)  (usage 3)
iUserbutton156                       112  0x00000070 (const ??? 0)  (usage 3)
iUserbutton157                       113  0x00000071 (const ??? 0)  (usage 3)
iUserbutton158                       105  0x00000069 (const ??? 0)  (usage 3)
iUserbutton159                        31  0x0000001f (const ??? 0)  (usage 3)
iUserbutton16                         36  0x00000024 (const ??? 0)  (usage 3)
iUserbutton160                       114  0x00000072 (const ??? 0)  (usage 3)
iUserbutton161                       158  0x0000009e (const ??? 0)  (usage 3)
iUserbutton162                       160  0x000000a0 (const ??? 0)  (usage 3)
iUserbutton163                       161  0x000000a1 (const ??? 0)  (usage 3)
iUserbutton164                       162  0x000000a2 (const ??? 0)  (usage 3)
iUserbutton165                       163  0x000000a3 (const ??? 0)  (usage 3)
iUserbutton166                       164  0x000000a4 (const ??? 0)  (usage 3)
iUserbutton167                       165  0x000000a5 (const ??? 0)  (usage 3)
iUserbutton168                       166  0x000000a6 (const ??? 0)  (usage 3)
iUserbutton169                       167  0x000000a7 (const ??? 0)  (usage 3)
iUserbutton17                         38  0x00000026 (const ??? 0)  (usage 3)
iUserbutton170                       168  0x000000a8 (const ??? 0)  (usage 3)
iUserbutton171                       229  0x000000e5 (const ??? 0)  (usage 3)
iUserbutton172                       302  0x0000012e (const ??? 0)  (usage 3)
iUserbutton173                       304  0x00000130 (const ??? 0)  (usage 3)
iUserbutton174                       305  0x00000131 (const ??? 0)  (usage 3)
iUserbutton175                       310  0x00000136 (const ??? 0)  (usage 3)
iUserbutton176                       312  0x00000138 (const ??? 0)  (usage 3)
iUserbutton177                       232  0x000000e8 (const ??? 0)  (usage 3)
iUserbutton178                       233  0x000000e9 (const ??? 0)  (usage 3)
iUserbutton179                       234  0x000000ea (const ??? 0)  (usage 3)
iUserbutton18                         34  0x00000022 (const ??? 0)  (usage 3)
iUserbutton180                       235  0x000000eb (const ??? 0)  (usage 3)
iUserbutton181                       237  0x000000ed (const ??? 0)  (usage 3)
iUserbutton182                       238  0x000000ee (const ??? 0)  (usage 3)
iUserbutton183                       243  0x000000f3 (const ??? 0)  (usage 3)
iUserbutton184                       244  0x000000f4 (const ??? 0)  (usage 3)
iUserbutton185                       245  0x000000f5 (const ??? 0)  (usage 3)
iUserbutton186                       240  0x000000f0 (const ??? 0)  (usage 3)
iUserbutton187                       241  0x000000f1 (const ??? 0)  (usage 3)
iUserbutton188                       248  0x000000f8 (const ??? 0)  (usage 3)
iUserbutton189                       252  0x000000fc (const ??? 0)  (usage 3)
iUserbutton19                         35  0x00000023 (const ??? 0)  (usage 3)
iUserbutton190                       255  0x000000ff (const ??? 0)  (usage 3)
iUserbutton191                       266  0x0000010a (const ??? 0)  (usage 3)
iUserbutton192                       257  0x00000101 (const ??? 0)  (usage 3)
iUserbutton193                       271  0x0000010f (const ??? 0)  (usage 3)
iUserbutton194                       261  0x00000105 (const ??? 0)  (usage 3)
iUserbutton195                       262  0x00000106 (const ??? 0)  (usage 3)
iUserbutton196                       272  0x00000110 (const ??? 0)  (usage 3)
iUserbutton197                       287  0x0000011f (const ??? 0)  (usage 3)
iUserbutton198                       288  0x00000120 (const ??? 0)  (usage 3)
iUserbutton199                       273  0x00000111 (const ??? 0)  (usage 3)
iUserbutton2                          29  0x0000001d (const ??? 0)  (usage 3)
iUserbutton20                         66  0x00000042 (const ??? 0)  (usage 3)
iUserbutton200                       274  0x00000112 (const ??? 0)  (usage 3)
iUserbutton201                       275  0x00000113 (const ??? 0)  (usage 3)
iUserbutton202                       276  0x00000114 (const ??? 0)  (usage 3)
iUserbutton203                       277  0x00000115 (const ??? 0)  (usage 3)
iUserbutton204                       278  0x00000116 (const ??? 0)  (usage 3)
iUserbutton205                       279  0x00000117 (const ??? 0)  (usage 3)
iUserbutton206                       282  0x0000011a (const ??? 0)  (usage 3)
iUserbutton207                       283  0x0000011b (const ??? 0)  (usage 3)
iUserbutton208                       318  0x0000013e (const ??? 0)  (usage 3)
iUserbutton209                       289  0x00000121 (const ??? 0)  (usage 3)
iUserbutton21                         56  0x00000038 (const ??? 0)  (usage 3)
iUserbutton210                       292  0x00000124 (const ??? 0)  (usage 3)
iUserbutton211                       295  0x00000127 (const ??? 0)  (usage 3)
iUserbutton212                       298  0x0000012a (const ??? 0)  (usage 3)
iUserbutton213                       299  0x0000012b (const ??? 0)  (usage 3)
iUserbutton214                       319  0x0000013f (const ??? 0)  (usage 3)
iUserbutton215                       293  0x00000125 (const ??? 0)  (usage 3)
iUserbutton216                       192  0x000000c0 (const ??? 0)  (usage 3)
iUserbutton22                         57  0x00000039 (const ??? 0)  (usage 3)
iUserbutton23                        134  0x00000086 (const ??? 0)  (usage 3)
iUserbutton24                        135  0x00000087 (const ??? 0)  (usage 3)
iUserbutton25                        141  0x0000008d (const ??? 0)  (usage 3)
iUserbutton26                         92  0x0000005c (const ??? 0)  (usage 3)
iUserbutton27                        118  0x00000076 (const ??? 0)  (usage 3)
iUserbutton28                        119  0x00000077 (const ??? 0)  (usage 3)
iUserbutton29                        120  0x00000078 (const ??? 0)  (usage 3)
iUserbutton3                         179  0x000000b3 (const ??? 0)  (usage 3)
iUserbutton30                        122  0x0000007a (const ??? 0)  (usage 3)
iUserbutton31                        123  0x0000007b (const ??? 0)  (usage 3)
iUserbutton32                         39  0x00000027 (const ??? 0)  (usage 3)
iUserbutton33                         40  0x00000028 (const ??? 0)  (usage 3)
iUserbutton34                        185  0x000000b9 (const ??? 0)  (usage 3)
iUserbutton35                        124  0x0000007c (const ??? 0)  (usage 3)
iUserbutton36                        172  0x000000ac (const ??? 0)  (usage 3)
iUserbutton37                          9  0x00000009 (const ??? 0)  (usage 3)
iUserbutton38                        174  0x000000ae (const ??? 0)  (usage 3)
iUserbutton39                        175  0x000000af (const ??? 0)  (usage 3)
iUserbutton4                           6  0x00000006 (const ??? 0)  (usage 3)
iUserbutton40                        180  0x000000b4 (const ??? 0)  (usage 3)
iUserbutton41                        104  0x00000068 (const ??? 0)  (usage 3)
iUserbutton42                        181  0x000000b5 (const ??? 0)  (usage 3)
iUserbutton43                        130  0x00000082 (const ??? 0)  (usage 3)
iUserbutton44                        184  0x000000b8 (const ??? 0)  (usage 3)
iUserbutton45                        182  0x000000b6 (const ??? 0)  (usage 3)
iUserbutton46                        183  0x000000b7 (const ??? 0)  (usage 3)
iUserbutton47                        131  0x00000083 (const ??? 0)  (usage 3)
iUserbutton48                        132  0x00000084 (const ??? 0)  (usage 3)
iUserbutton49                        254  0x000000fe (const ??? 0)  (usage 3)
iUserbutton5                           7  0x00000007 (const ??? 0)  (usage 3)
iUserbutton50                         30  0x0000001e (const ??? 0)  (usage 3)
iUserbutton51                         58  0x0000003a (const ??? 0)  (usage 3)
iUserbutton52                         42  0x0000002a (const ??? 0)  (usage 3)
iUserbutton53                         53  0x00000035 (const ??? 0)  (usage 3)
iUserbutton54                         25  0x00000019 (const ??? 0)  (usage 3)
iUserbutton55                         10  0x0000000a (const ??? 0)  (usage 3)
iUserbutton56                         12  0x0000000c (const ??? 0)  (usage 3)
iUserbutton57                         26  0x0000001a (const ??? 0)  (usage 3)
iUserbutton58                        126  0x0000007e (const ??? 0)  (usage 3)
iUserbutton59                        188  0x000000bc (const ??? 0)  (usage 3)
iUserbutton6                          18  0x00000012 (const ??? 0)  (usage 3)
iUserbutton60                        137  0x00000089 (const ??? 0)  (usage 3)
iUserbutton61                          3  0x00000003 (const ??? 0)  (usage 3)
iUserbutton62                        138  0x0000008a (const ??? 0)  (usage 3)
iUserbutton63                        189  0x000000bd (const ??? 0)  (usage 3)
iUserbutton64                        147  0x00000093 (const ??? 0)  (usage 3)
iUserbutton65                         47  0x0000002f (const ??? 0)  (usage 3)
iUserbutton66                        219  0x000000db (const ??? 0)  (usage 3)
iUserbutton67                        247  0x000000f7 (const ??? 0)  (usage 3)
iUserbutton68                        227  0x000000e3 (const ??? 0)  (usage 3)
iUserbutton69                        250  0x000000fa (const ??? 0)  (usage 3)
iUserbutton7                          19  0x00000013 (const ??? 0)  (usage 3)
iUserbutton70                         48  0x00000030 (const ??? 0)  (usage 3)
iUserbutton71                        170  0x000000aa (const ??? 0)  (usage 3)
iUserbutton72                         59  0x0000003b (const ??? 0)  (usage 3)
iUserbutton73                        142  0x0000008e (const ??? 0)  (usage 3)
iUserbutton74                        191  0x000000bf (const ??? 0)  (usage 3)
iUserbutton75                         44  0x0000002c (const ??? 0)  (usage 3)
iUserbutton76                         45  0x0000002d (const ??? 0)  (usage 3)
iUserbutton77                         46  0x0000002e (const ??? 0)  (usage 3)
iUserbutton78                         49  0x00000031 (const ??? 0)  (usage 3)
iUserbutton79                         50  0x00000032 (const ??? 0)  (usage 3)
iUserbutton8                          20  0x00000014 (const ??? 0)  (usage 3)
iUserbutton80                        190  0x000000be (const ??? 0)  (usage 3)
iUserbutton81                         69  0x00000045 (const ??? 0)  (usage 3)
iUserbutton82                         70  0x00000046 (const ??? 0)  (usage 3)
iUserbutton83                         71  0x00000047 (const ??? 0)  (usage 3)
iUserbutton84                        202  0x000000ca (const ??? 0)  (usage 3)
iUserbutton85                         13  0x0000000d (const ??? 0)  (usage 3)
iUserbutton86                         14  0x0000000e (const ??? 0)  (usage 3)
iUserbutton87                        222  0x000000de (const ??? 0)  (usage 3)
iUserbutton88                          4  0x00000004 (const ??? 0)  (usage 3)
iUserbutton89                         32  0x00000020 (const ??? 0)  (usage 3)
iUserbutton9                          21  0x00000015 (const ??? 0)  (usage 3)
iUserbutton90                        204  0x000000cc (const ??? 0)  (usage 3)
iUserbutton91                        196  0x000000c4 (const ??? 0)  (usage 3)
iUserbutton92                        197  0x000000c5 (const ??? 0)  (usage 3)
iUserbutton93                        301  0x0000012d (const ??? 0)  (usage 3)
iUserbutton94                         76  0x0000004c (const ??? 0)  (usage 3)
iUserbutton95                         79  0x0000004f (const ??? 0)  (usage 3)
iUserbutton96                         60  0x0000003c (const ??? 0)  (usage 3)
iUserbutton97                         61  0x0000003d (const ??? 0)  (usage 3)
iUserbutton98                         62  0x0000003e (const ??? 0)  (usage 3)
iUserbutton99                         63  0x0000003f (const ??? 0)  (usage 3)
iUserimages0                         201  0x000000c9 (const ??? 0)  (usage 3)
iUserimages1                          15  0x0000000f (const ??? 0)  (usage 3)
iUserimages2                         280  0x00000118 (const ??? 0)  (usage 3)
iUserimages4                          77  0x0000004d (const ??? 0)  (usage 3)
iUserimages5                          80  0x00000050 (const ??? 0)  (usage 3)
iVideo0                                0  0x00000000 (const ??? 0)  (usage 3)
iVideo1                              177  0x000000b1 (const ??? 0)  (usage 3)
iVideo10                             106  0x0000006a (const ??? 0)  (usage 3)
iVideo11                              54  0x00000036 (const ??? 0)  (usage 3)
iVideo12                             220  0x000000dc (const ??? 0)  (usage 3)
iVideo13                             267  0x0000010b (const ??? 0)  (usage 3)
iVideo14                              16  0x00000010 (const ??? 0)  (usage 3)
iVideo15                             186  0x000000ba (const ??? 0)  (usage 3)
iVideo16                              97  0x00000061 (const ??? 0)  (usage 3)
iVideo17                             102  0x00000066 (const ??? 0)  (usage 3)
iVideo18                             296  0x00000128 (const ??? 0)  (usage 3)
iVideo19                             259  0x00000103 (const ??? 0)  (usage 3)
iVideo2                              194  0x000000c2 (const ??? 0)  (usage 3)
iVideo20                             116  0x00000074 (const ??? 0)  (usage 3)
iVideo21                             307  0x00000133 (const ??? 0)  (usage 3)
iVideo22                             314  0x0000013a (const ??? 0)  (usage 3)
iVideo23                             316  0x0000013c (const ??? 0)  (usage 3)
iVideo3                               72  0x00000048 (const ??? 0)  (usage 3)
iVideo4                               73  0x00000049 (const ??? 0)  (usage 3)
iVideo5                               74  0x0000004a (const ??? 0)  (usage 3)
iVideo6                              128  0x00000080 (const ??? 0)  (usage 3)
iVideo7                              264  0x00000108 (const ??? 0)  (usage 3)
iVideo8                              285  0x0000011d (const ??? 0)  (usage 3)
iVideo9                              230  0x000000e6 (const ??? 0)  (usage 3)
IVORY                              65534  0x0000fffe (const dword)  (not used)
KHAKI                              63281  0x0000f731 (const dword)  (not used)
kKeyboardKeystrokes                13057  0x00003301kKeyboardKeystrokes                13057  0x00003301 (mem) word[1] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (not used)
LANDSCAPE                              0  0x00000000 (const dword)  (not used)
LANDSCAPE_R                            1  0x00000001 (const dword)  (usage 3)
LAVENDER                           59199  0x0000e73f (const dword)  (not used)
LAVENDERBLUSH                      65438  0x0000ff9e (const dword)  (not used)
LAWNGREEN                          32736  0x00007fe0 (const dword)  (not used)
LEFT_POS                               2  0x00000002 (const dword)  (not used)
LEMONCHIFFON                       65497  0x0000ffd9 (const dword)  (not used)
LIGHTBLUE                          44764  0x0000aedc (const dword)  (not used)
LIGHTCORAL                         62480  0x0000f410 (const dword)  (not used)
LIGHTCYAN                          59391  0x0000e7ff (const dword)  (not used)
LIGHTGOLD                          65498  0x0000ffda (const dword)  (not used)
LIGHTGREEN                         38770  0x00009772 (const dword)  (not used)
LIGHTGREY                          54938  0x0000d69a (const dword)  (not used)
LIGHTPINK                          64952  0x0000fdb8 (const dword)  (not used)
LIGHTSALMON                        64783  0x0000fd0f (const dword)  (not used)
LIGHTSEAGREEN                       9621  0x00002595 (const dword)  (not used)
LIGHTSKYBLUE                       34431  0x0000867f (const dword)  (not used)
LIGHTSLATEGRAY                     29779  0x00007453 (const dword)  (not used)
LIGHTSTEELBLUE                     46651  0x0000b63b (const dword)  (not used)
LIGHTYELLOW                        65532  0x0000fffc (const dword)  (not used)
LIME                                2016  0x000007e0 (const dword)  (not used)
LIMEGREEN                          13926  0x00003666 (const dword)  (not used)
LINE_PATTERN                          26  0x0000001a (const dword)  (not used)
LINEN                              65436  0x0000ff9c (const dword)  (not used)
LO                                     0  0x00000000 (const dword)  (not used)
LObyte                               -47  0xffffffd1 (PmmC func) args[1] r=1  (not used)
LOCAL                                N/A         N/A (macro) //   (not used)
LPCOARSE                           61680  0x0000f0f0 (const dword)  (not used)
LPDASHDOT                            975  0x000003cf (const dword)  (not used)
LPDASHDOTDOT                         819  0x00000333 (const dword)  (not used)
LPFINE                             43690  0x0000aaaa (const dword)  (not used)
LPMEDIUM                           13107  0x00003333 (const dword)  (not used)
LPSOLID                                0  0x00000000 (const dword)  (not used)
M_PA0                                  1  0x00000001 (const dword)  (not used)
M_PA1                                  2  0x00000002 (const dword)  (not used)
M_PA10                              1024  0x00000400 (const dword)  (not used)
M_PA11                              2048  0x00000800 (const dword)  (not used)
M_PA12                              4096  0x00001000 (const dword)  (not used)
M_PA13                              8192  0x00002000 (const dword)  (not used)
M_PA14                             16384  0x00004000 (const dword)  (not used)
M_PA15                             32768  0x00008000 (const dword)  (not used)
M_PA2                                  4  0x00000004 (const dword)  (not used)
M_PA3                                  8  0x00000008 (const dword)  (not used)
M_PA4                                 16  0x00000010 (const dword)  (not used)
M_PA5                                 32  0x00000020 (const dword)  (not used)
M_PA6                                 64  0x00000040 (const dword)  (not used)
M_PA7                                128  0x00000080 (const dword)  (not used)
M_PA8                                256  0x00000100 (const dword)  (not used)
M_PA9                                512  0x00000200 (const dword)  (not used)
MAGENTA                            63519  0x0000f81f (const dword)  (not used)
main                               13457  0x00003491 (User func) args[0] r=0  (not used)
MAROON                             32768  0x00008000 (const dword)  (not used)
MAX                                  -55  0xffffffc9 (PmmC func) args[2] r=1  (not used)
MaxTotObjects                         33  0x00000021 (const dword)  (usage 6)
MDA                                63552  0x0000f840 (const dword)  (not used)
MEDIA_ADDRESS_HI                      91  0x0000005b (const dword)  (not used)
MEDIA_ADDRESS_LO                      90  0x0000005a (const dword)  (not used)
media_Flush                         -218  0xffffff26 (PmmC func) args[0] r=1  (not used)
media_Image                         -217  0xffffff27 (PmmC func) args[2] r=0  (not used)
media_Init                          -219  0xffffff25 (PmmC func) args[0] r=1  (not used)
media_RdSector                      -211  0xffffff2d (PmmC func) args[1] r=1  (not used)
media_ReadByte                      -213  0xffffff2b (PmmC func) args[0] r=1  (not used)
media_ReadWord                      -214  0xffffff2a (PmmC func) args[0] r=1  (not used)
MEDIA_SECTOR_COUNT                    94  0x0000005e (const dword)  (not used)
MEDIA_SECTOR_HI                       93  0x0000005d (const dword)  (not used)
MEDIA_SECTOR_LO                       92  0x0000005c (const dword)  (not used)
media_SetAdd                        -209  0xffffff2f (PmmC func) args[2] r=0  (not used)
media_SetSector                     -210  0xffffff2e (PmmC func) args[2] r=0  (not used)
media_Video                         -207  0xffffff31 (PmmC func) args[2] r=0  (not used)
media_VideoFrame                    -208  0xffffff30 (PmmC func) args[3] r=0  (not used)
media_WriteByte                     -215  0xffffff29 (PmmC func) args[1] r=1  (not used)
media_WriteWord                     -216  0xffffff28 (PmmC func) args[1] r=1  (not used)
media_WrSector                      -212  0xffffff2c (PmmC func) args[1] r=1  (not used)
MEDIUMAQUAMARINE                   26229  0x00006675 (const dword)  (not used)
MEDIUMBLUE                            25  0x00000019 (const dword)  (not used)
MEDIUMORCHID                       47802  0x0000baba (const dword)  (not used)
MEDIUMPURPLE                       37787  0x0000939b (const dword)  (not used)
MEDIUMSEAGREEN                     15758  0x00003d8e (const dword)  (not used)
MEDIUMSLATEBLUE                    31581  0x00007b5d (const dword)  (not used)
MEDIUMSPRINGGREEN                   2003  0x000007d3 (const dword)  (not used)
MEDIUMTURQUOISE                    20121  0x00004e99 (const dword)  (not used)
MEDIUMVIOLETRED                    49328  0x0000c0b0 (const dword)  (not used)
mem_Alloc                           -413  0xfffffe63 (PmmC func) args[1] r=1  (not used)
mem_AllocV                          -414  0xfffffe62 (PmmC func) args[1] r=1  (not used)
mem_AllocZ                          -415  0xfffffe61 (PmmC func) args[1] r=1  (not used)
mem_ArrayOp1                         -67  0xffffffbd (PmmC func) args[4] r=0  (not used)
mem_ArrayOp2                         -68  0xffffffbc (PmmC func) args[5] r=0  (not used)
mem_Compare                         -421  0xfffffe5b (PmmC func) args[3] r=1  (not used)
mem_Copy                            -420  0xfffffe5c (PmmC func) args[3] r=1  (not used)
mem_Free                            -417  0xfffffe5f (PmmC func) args[1] r=1  (not used)
mem_Heap                            -418  0xfffffe5e (PmmC func) args[0] r=1  (not used)
mem_Realloc                         -416  0xfffffe60 (PmmC func) args[2] r=1  (not used)
mem_Set                             -419  0xfffffe5d (PmmC func) args[3] r=1  (not used)
MIDI                                   9  0x00000009 (const dword)  (not used)
MIDNIGHTBLUE                        6350  0x000018ce (const dword)  (not used)
MIN                                  -54  0xffffffca (PmmC func) args[2] r=1  (not used)
MINTCREAM                          63487  0x0000f7ff (const dword)  (not used)
MISTYROSE                          65340  0x0000ff3c (const dword)  (not used)
MOCCASIN                           65334  0x0000ff36 (const dword)  (not used)
NAK                                   21  0x00000015 (const dword)  (usage 3)
nak0                               17035  0x0000428b (User func) args[0] r=0  (usage 24)
nAniTimers                             0  0x00000000 (const dword)  (not used)
NAVAJOWHITE                        65269  0x0000fef5 (const dword)  (not used)
NAVY                                  16  0x00000010 (const dword)  (usage 15)
nInputs                              445  0x000001bd (const dword)  (usage 3)
nObjects                             320  0x00000140 (const dword)  (not used)
NOTOUCH                                0  0x00000000 (const dword)  (not used)
NP_565                                 0  0x00000000 (const dword)  (not used)
NP_RGB                                 1  0x00000001 (const dword)  (not used)
NP_Write                            -535  0xfffffde9 (PmmC func) args[7] r=1  (not used)
NP_XRGB                                2  0x00000002 (const dword)  (not used)
nStrings                              53  0x00000035 (const dword)  (usage 3)
NybleSwap                            -50  0xffffffce (PmmC func) args[1] r=1  (not used)
o4Dbuttons                         12459  0x000030abo4Dbuttons                         12459  0x000030ab (mem) word[1] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
oAngularmeters                     12103  0x00002f47oAngularmeters                     12103  0x00002f47 (mem) word[1] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
oAniButtons                        12461  0x000030adoAniButtons                        12461  0x000030ad (mem) word[1] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
OBJECT_COLOUR                         18  0x00000012 (const dword)  (not used)
oColorPickers                      12463  0x000030afoColorPickers                      12463  0x000030af (mem) word[1] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
oCoolgauges                        12105  0x00002f49oCoolgauges                        12105  0x00002f49 (mem) word[1] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
oCustomdigitss                     12107  0x00002f4boCustomdigitss                     12107  0x00002f4b (mem) word[1] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
oDipSwitchs                        12089  0x00002f39oDipSwitchs                        12089  0x00002f39 (mem) word[1] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
OFF                                    0  0x00000000 (const dword)  (usage 3)
oForms                             12109  0x00002f4doForms                             12109  0x00002f4d (mem) word[76] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
Ofs_Digits_Digits                      2  0x00000002 (const dword)  (not used)
Ofs_Digits_LeadingBlanks               8  0x00000008 (const dword)  (not used)
Ofs_Digits_Left                        0  0x00000000 (const dword)  (not used)
Ofs_Digits_MinDigits                   4  0x00000004 (const dword)  (not used)
Ofs_Digits_Widthdigit                  6  0x00000006 (const dword)  (not used)
Ofs_IPD_DOWN                          16  0x00000010 (const dword)  (usage 6)
Ofs_IPD_OBJVIDX                       20  0x00000014 (const dword)  (usage 9)
Ofs_IPD_P1                             2  0x00000002 (const dword)  (usage 15)
Ofs_IPD_P2                             4  0x00000004 (const dword)  (usage 48)
Ofs_IPD_P3                             6  0x00000006 (const dword)  (usage 9)
Ofs_IPD_P4                             8  0x00000008 (const dword)  (usage 3)
Ofs_IPD_P5                            10  0x0000000a (const dword)  (usage 9)
Ofs_IPD_P6                            12  0x0000000c (const dword)  (usage 18)
Ofs_IPD_P7                            14  0x0000000e (const dword)  (not used)
Ofs_IPD_RELEASE                       18  0x00000012 (const dword)  (usage 9)
Ofs_String_Ansi                       22  0x00000016 (const dword)  (usage 3)
Ofs_String_BGColor                    16  0x00000010 (const dword)  (usage 6)
Ofs_String_FGColor                    14  0x0000000e (const dword)  (usage 3)
Ofs_String_FontAttribs                18  0x00000012 (const dword)  (usage 3)
Ofs_String_Form                       24  0x00000018 (const dword)  (usage 3)
Ofs_String_Size                        4  0x00000004 (const dword)  (usage 3)
Ofs_String_StartH                      0  0x00000000 (const dword)  (usage 3)
Ofs_String_StartL                      2  0x00000002 (const dword)  (usage 3)
Ofs_String_Transparent                20  0x00000014 (const dword)  (usage 3)
Ofs_String_x1                          6  0x00000006 (const dword)  (usage 12)
Ofs_String_x2                         10  0x0000000a (const dword)  (usage 9)
Ofs_String_y1                          8  0x00000008 (const dword)  (usage 12)
Ofs_String_y2                         12  0x0000000c (const dword)  (usage 9)
oGauges                            12261  0x00002fe5oGauges                            12261  0x00002fe5 (mem) word[1] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
oGSliders                          12097  0x00002f41oGSliders                          12097  0x00002f41 (mem) word[1] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
oImages                            12263  0x00002fe7oImages                            12263  0x00002fe7 (mem) word[1] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
oKeyboards                         12265  0x00002fe9oKeyboards                         12265  0x00002fe9 (mem) word[1] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
oKnobs                             12091  0x00002f3boKnobs                             12091  0x00002f3b (mem) word[1] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
OLDLACE                            65468  0x0000ffbc (const dword)  (not used)
oLeddigitss                        12269  0x00002fedoLeddigitss                        12269  0x00002fed (mem) word[1] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
oLeds                              12267  0x00002feboLeds                              12267  0x00002feb (mem) word[1] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
OLIVE                              33792  0x00008400 (const dword)  (not used)
OLIVEDRAB                          27748  0x00006c64 (const dword)  (not used)
oMeters                            12271  0x00002fefoMeters                            12271  0x00002fef (mem) word[1] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
ON                                     1  0x00000001 (const dword)  (usage 3)
oObjects                             216  0x000000d8 (mem) word[34] (global)  (usage 108)
OP1_ADD                                5  0x00000005 (const dword)  (not used)
OP1_AND                                2  0x00000002 (const dword)  (not used)
OP1_BLACKEN                           16  0x00000010 (const dword)  (not used)
OP1_DARKEN                            18  0x00000012 (const dword)  (not used)
OP1_DIV                                8  0x00000008 (const dword)  (not used)
OP1_GRAY                              14  0x0000000e (const dword)  (not used)
OP1_IOR                                3  0x00000003 (const dword)  (not used)
OP1_LIGHTEN                           17  0x00000011 (const dword)  (not used)
OP1_MUL                                7  0x00000007 (const dword)  (not used)
OP1_NOP                                0  0x00000000 (const dword)  (not used)
OP1_REV                                9  0x00000009 (const dword)  (not used)
OP1_ROL                               12  0x0000000c (const dword)  (not used)
OP1_ROR                               13  0x0000000d (const dword)  (not used)
OP1_SET                                1  0x00000001 (const dword)  (not used)
OP1_SHL                               10  0x0000000a (const dword)  (not used)
OP1_SHR                               11  0x0000000b (const dword)  (not used)
OP1_SUB                                6  0x00000006 (const dword)  (not used)
OP1_WHITEN                            15  0x0000000f (const dword)  (not used)
OP1_XOR                                4  0x00000004 (const dword)  (not used)
OP2_ADD                                4  0x00000004 (const dword)  (not used)
OP2_AND                                1  0x00000001 (const dword)  (not used)
OP2_BLEND                              9  0x00000009 (const dword)  (not used)
OP2_COPY                               8  0x00000008 (const dword)  (not used)
OP2_DIV                                7  0x00000007 (const dword)  (not used)
OP2_IOR                                2  0x00000002 (const dword)  (not used)
OP2_MUL                                6  0x00000006 (const dword)  (not used)
OP2_SUB                                5  0x00000005 (const dword)  (not used)
OP2_XOR                                3  0x00000003 (const dword)  (not used)
OPAQUE                                 1  0x00000001 (const dword)  (not used)
oPinInputs                         12457  0x000030a9oPinInputs                         12457  0x000030a9 (mem) word[1] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
oPinOutputs                        12905  0x00003269oPinOutputs                        12905  0x00003269 (mem) word[1] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
ORANGE                             64800  0x0000fd20 (const dword)  (not used)
ORANGERED                          64032  0x0000fa20 (const dword)  (not used)
ORCHID                             56218  0x0000db9a (const dword)  (not used)
oRockerSwitchs                     12093  0x00002f3doRockerSwitchs                     12093  0x00002f3d (mem) word[1] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
oRotarySwitchs                     12095  0x00002f3foRotarySwitchs                     12095  0x00002f3f (mem) word[1] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
oScopes                            12439  0x00003097oScopes                            12439  0x00003097 (mem) word[1] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (not used)
oSoundss                           12903  0x00003267oSoundss                           12903  0x00003267 (mem) word[1] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
oSpectrums                         12437  0x00003095oSpectrums                         12437  0x00003095 (mem) word[1] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
oStaticTexts                       12435  0x00003093oStaticTexts                       12435  0x00003093 (mem) word[1] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
oStringss                          12273  0x00002ff1oStringss                          12273  0x00002ff1 (mem) word[54] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 4)
oStringss                         UNRESOLVED  (usage 2)
OT_ACTIVATE                          103  0x00000067 (const dword)  (usage 69)
OT_MAGIC                             108  0x0000006c (const dword)  (usage 3)
OT_NEXTFRAME                         104  0x00000068 (const dword)  (usage 3)
OT_NEXTSTRING                        106  0x0000006a (const dword)  (usage 3)
OT_PREVFRAME                         105  0x00000069 (const dword)  (usage 3)
OT_PREVSTRING                        107  0x0000006b (const dword)  (usage 3)
OT_REPORT                            100  0x00000064 (const dword)  (usage 621)
OT_SETANOTHER                        102  0x00000066 (const dword)  (usage 3)
OT_SETCONST                          101  0x00000065 (const dword)  (usage 3)
oTanks                             12441  0x00003099oTanks                             12441  0x00003099 (mem) word[1] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
oThermometers                      12381  0x0000305doThermometers                      12381  0x0000305d (mem) word[1] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
oTimers                            12901  0x00003265oTimers                            12901  0x00003265 (mem) word[1] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
oTrackbars                         12099  0x00002f43oTrackbars                         12099  0x00002f43 (mem) word[1] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
oUserButtons                       12465  0x000030b1oUserButtons                       12465  0x000030b1 (mem) word[218] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 12)
oUserImagess                       12443  0x0000309boUserImagess                       12443  0x0000309b (mem) word[7] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
oUserleds                          12383  0x0000305foUserleds                          12383  0x0000305f (mem) word[1] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
OUTLINE                                1  0x00000001 (const dword)  (not used)
OUTLINE_COLOUR                        24  0x00000018 (const dword)  (not used)
OutputCS                             540  0x0000021c (mem) word (global)  (usage 9)
OVF                                  -63  0xffffffc1 (PmmC func) args[0] r=1  (usage 3)
oVideos                            12385  0x00003061oVideos                            12385  0x00003061 (mem) word[25] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
OW_Read                             -523  0xfffffdf5 (PmmC func) args[1] r=1  (not used)
OW_Read9                            -524  0xfffffdf4 (PmmC func) args[1] r=1  (not used)
OW_Reset                            -522  0xfffffdf6 (PmmC func) args[1] r=1  (not used)
OW_Write                            -525  0xfffffdf3 (PmmC func) args[2] r=0  (not used)
oWinButtons                        12101  0x00002f45oWinButtons                        12101  0x00002f45 (mem) word[1] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
PA0                                    1  0x00000001 (const dword)  (not used)
PA1                                    2  0x00000002 (const dword)  (not used)
PA10                                  11  0x0000000b (const dword)  (not used)
PA11                                  12  0x0000000c (const dword)  (not used)
PA12                                  13  0x0000000d (const dword)  (not used)
PA13                                  14  0x0000000e (const dword)  (not used)
PA14                                  15  0x0000000f (const dword)  (not used)
PA15                                  16  0x00000010 (const dword)  (not used)
PA2                                    3  0x00000003 (const dword)  (not used)
PA3                                    4  0x00000004 (const dword)  (not used)
PA4                                    5  0x00000005 (const dword)  (not used)
PA5                                    6  0x00000006 (const dword)  (not used)
PA6                                    7  0x00000007 (const dword)  (not used)
PA7                                    8  0x00000008 (const dword)  (not used)
PA8                                    9  0x00000009 (const dword)  (not used)
PA9                                   10  0x0000000a (const dword)  (not used)
PALEGOLDENROD                      61269  0x0000ef55 (const dword)  (not used)
PALEGREEN                          40915  0x00009fd3 (const dword)  (not used)
PALETURQUOISE                      44925  0x0000af7d (const dword)  (not used)
PALEVIOLETRED                      56210  0x0000db92 (const dword)  (not used)
PANEL_FRAME                            3  0x00000003 (const dword)  (not used)
PANEL_HIDE                             2  0x00000002 (const dword)  (not used)
PANEL_RAISED                           1  0x00000001 (const dword)  (not used)
PANEL_SUNKEN                           0  0x00000000 (const dword)  (not used)
PAPAYAWHIP                         65402  0x0000ff7a (const dword)  (not used)
pause                                 -6  0xfffffffa (PmmC func) args[1] r=0  (usage 6)
PEACHPUFF                          65239  0x0000fed7 (const dword)  (not used)
peekW                                -34  0xffffffde (PmmC func) args[1] r=1  (not used)
PEN_SIZE                              16  0x00000010 (const dword)  (not used)
PERU                               52263  0x0000cc27 (const dword)  (not used)
PIN_AN                                 5  0x00000005 (const dword)  (not used)
PIN_ANAVG                              6  0x00000006 (const dword)  (not used)
pin_Counter                         -514  0xfffffdfe (PmmC func) args[3] r=1  (not used)
PIN_COUNTER_PA4                      123  0x0000007b (const dword)  (not used)
PIN_COUNTER_PA5                      124  0x0000007c (const dword)  (not used)
PIN_COUNTER_PA6                      125  0x0000007d (const dword)  (not used)
PIN_COUNTER_PA7                      126  0x0000007e (const dword)  (not used)
PIN_COUNTER_PA8                      127  0x0000007f (const dword)  (not used)
PIN_COUNTER_PA9                      128  0x00000080 (const dword)  (not used)
PIN_EVENT_PA4                        129  0x00000081 (const dword)  (not used)
PIN_EVENT_PA5                        130  0x00000082 (const dword)  (not used)
PIN_EVENT_PA6                        131  0x00000083 (const dword)  (not used)
PIN_EVENT_PA7                        132  0x00000084 (const dword)  (not used)
PIN_EVENT_PA8                        133  0x00000085 (const dword)  (not used)
PIN_EVENT_PA9                        134  0x00000086 (const dword)  (not used)
pin_HI                              -113  0xffffff8f (PmmC func) args[1] r=1  (not used)
PIN_INP                                0  0x00000000 (const dword)  (not used)
PIN_INP_HI                             1  0x00000001 (const dword)  (not used)
PIN_INP_LO                             2  0x00000002 (const dword)  (not used)
pin_LO                              -114  0xffffff8e (PmmC func) args[1] r=1  (not used)
PIN_OUT                                3  0x00000003 (const dword)  (not used)
PIN_OUT_OD                             4  0x00000004 (const dword)  (not used)
pin_Pulseout                        -512  0xfffffe00 (PmmC func) args[2] r=1  (not used)
pin_PulseoutB                       -513  0xfffffdff (PmmC func) args[2] r=1  (not used)
pin_PulseoutCount                   -519  0xfffffdf9 (PmmC func) args[4] r=1  (not used)
pin_Read                            -116  0xffffff8c (PmmC func) args[1] r=1  (not used)
pin_Set                             -112  0xffffff90 (PmmC func) args[2] r=1  (not used)
pin_Val                             -115  0xffffff8d (PmmC func) args[2] r=0  (not used)
PINK                               65049  0x0000fe19 (const dword)  (not used)
pInputIndex                          296  0x00000128 (mem) word (global)  (usage 15)
PLUM                               56603  0x0000dd1b (const dword)  (not used)
pokeW                                -35  0xffffffdd (PmmC func) args[2] r=0  (not used)
PORTRAIT                               2  0x00000002 (const dword)  (not used)
PORTRAIT_R                             3  0x00000003 (const dword)  (not used)
POWDERBLUE                         46876  0x0000b71c (const dword)  (not used)
PrintStrings                       17070  0x000042ae (User func) args[3] r=0  (usage 9)
PROGRESSBAR_HIDE                       2  0x00000002 (const dword)  (not used)
PROGRESSBAR_RAISED                 65535  0x0000ffff (const dword)  (not used)
PROGRESSBAR_SUNKEN                 65534  0x0000fffe (const dword)  (not used)
PTN_BDIAGONAL                      65518  0x0000ffee (const ??? 0)  (not used)
PTN_BRICKS                         65521  0x0000fff1 (const ??? 0)  (not used)
PTN_BS_HORIZONTAL                  65510  0x0000ffe6 (const ??? 0)  (not used)
PTN_BS_VERTICAL                    65509  0x0000ffe5 (const ??? 0)  (not used)
PTN_BSHORIZONTAL                   65516  0x0000ffec (const ??? 0)  (not used)
PTN_BSVERTICAL                     65515  0x0000ffeb (const ??? 0)  (not used)
PTN_CARGONET                       65522  0x0000fff2 (const ??? 0)  (not used)
PTN_CIRCUITS                       65523  0x0000fff3 (const ??? 0)  (not used)
PTN_COBBLESTONES                   65524  0x0000fff4 (const ??? 0)  (not used)
PTN_COURSE_B_DIAGONAL              65512  0x0000ffe8 (const ??? 0)  (not used)
PTN_COURSE_CROSS                   65513  0x0000ffe9 (const ??? 0)  (not used)
PTN_COURSE_DIAGONALCROSS           65514  0x0000ffea (const ??? 0)  (not used)
PTN_COURSE_DOTS                    65508  0x0000ffe4 (const ??? 0)  (not used)
PTN_COURSE_F_DIAGONAL              65511  0x0000ffe7 (const ??? 0)  (not used)
PTN_CROSSES                        65535  0x0000ffff (const ??? 0)  (not used)
PTN_DAISIES                        65525  0x0000fff5 (const ??? 0)  (not used)
PTN_DIZZY                          65526  0x0000fff6 (const ??? 0)  (not used)
PTN_EMPTY                          65504  0x0000ffe0 (const dword)  (not used)
PTN_FDIAGONAL                      65517  0x0000ffed (const ??? 0)  (not used)
PTN_FIELDEFFECT                    65527  0x0000fff7 (const ??? 0)  (not used)
PTN_FINE_CROSS                     65519  0x0000ffef (const ??? 0)  (not used)
PTN_FINE_DIAGONAL_CROSS            65520  0x0000fff0 (const ??? 0)  (not used)
PTN_FINE_DOTS                      65506  0x0000ffe2 (const ??? 0)  (not used)
PTN_KEY                            65528  0x0000fff8 (const ??? 0)  (not used)
PTN_MEDIUM_DOTS                    65507  0x0000ffe3 (const ??? 0)  (not used)
PTN_ROUNDER                        65529  0x0000fff9 (const ??? 0)  (not used)
PTN_SCALES                         65530  0x0000fffa (const ??? 0)  (not used)
PTN_SOLID                          65505  0x0000ffe1 (const ??? 0)  (not used)
PTN_STONE                          65531  0x0000fffb (const ??? 0)  (not used)
PTN_THATCHES                       65532  0x0000fffc (const ??? 0)  (not used)
PTN_TILE                           65533  0x0000fffd (const ??? 0)  (not used)
PTN_WAFFLESREVENGE                 65534  0x0000fffe (const ??? 0)  (not used)
PURPLE                             32784  0x00008010 (const dword)  (not used)
putch                                 -2  0xfffffffe (PmmC func) args[1] r=0  (usage 6)
putchXY                               -3  0xfffffffd (PmmC func) args[3] r=0  (not used)
putnum                                -7  0xfffffff9 (PmmC func) args[2] r=1  (not used)
putnumXY                             -51  0xffffffcd (PmmC func) args[4] r=1  (not used)
putstr                                -9  0xfffffff7 (PmmC func) args[1] r=1  (usage 6)
putstrCentred                         -5  0xfffffffb (PmmC func) args[3] r=0  (not used)
putstrXY                              -4  0xfffffffc (PmmC func) args[3] r=0  (not used)
PWM_10KHZ                              6  0x00000006 (const dword)  (not used)
PWM_15KHZ                              7  0x00000007 (const dword)  (not used)
PWM_20KHZ                              8  0x00000008 (const dword)  (not used)
PWM_25KHZ                              9  0x00000009 (const dword)  (not used)
PWM_30KHZ                             10  0x0000000a (const dword)  (not used)
PWM_35KHZ                             11  0x0000000b (const dword)  (not used)
PWM_5KHZ                               5  0x00000005 (const dword)  (not used)
PWM_625HZ                              4  0x00000004 (const dword)  (not used)
PWM_BINARY                             3  0x00000003 (const dword)  (not used)
pwm_Init                            -521  0xfffffdf7 (PmmC func) args[3] r=1  (not used)
PWM_OFF                                0  0x00000000 (const dword)  (not used)
PWM_PLAIN                              1  0x00000001 (const dword)  (not used)
PWM_SERVO                              2  0x00000002 (const dword)  (not used)
QEN1_COUNTER_HI                      136  0x00000088 (const dword)  (not used)
QEN1_COUNTER_LO                      135  0x00000087 (const dword)  (not used)
QEN1_DELTA                           137  0x00000089 (const dword)  (not used)
QEN2_COUNTER_HI                      139  0x0000008b (const dword)  (not used)
QEN2_COUNTER_LO                      138  0x0000008a (const dword)  (not used)
QEN2_DELTA                           140  0x0000008c (const dword)  (not used)
Qencoder1                           -515  0xfffffdfd (PmmC func) args[3] r=1  (not used)
Qencoder1Reset                      -517  0xfffffdfb (PmmC func) args[0] r=0  (not used)
Qencoder2                           -516  0xfffffdfc (PmmC func) args[3] r=1  (not used)
Qencoder2Reset                      -518  0xfffffdfa (PmmC func) args[0] r=0  (not used)
RAND                                 -59  0xffffffc5 (PmmC func) args[0] r=1  (not used)
RANDOM_HI                             33  0x00000021 (const dword)  (not used)
RANDOM_LO                             32  0x00000020 (const dword)  (not used)
RANDVAL                              -60  0xffffffc4 (PmmC func) args[2] r=1  (not used)
READ_OBJ                               0  0x00000000 (const dword)  (usage 3)
ReadCmd                              128  0x00000080 (const dword)  (not used)
ReadObject                         16820  0x000041b4 (User func) args[2] r=0  (usage 3)
RED                                63488  0x0000f800 (const dword)  (not used)
REPORT_EVENT                           7  0x00000007 (const dword)  (usage 3)
REPORT_MAGIC_EVENT_BYTES              10  0x0000000a (const dword)  (not used)
REPORT_MAGIC_EVENT_DBYTES             11  0x0000000b (const dword)  (not used)
REPORT_OBJ                             5  0x00000005 (const dword)  (usage 3)
RIGHT_POS                              4  0x00000004 (const dword)  (not used)
rKeyboardRoutines                  13059  0x00003303rKeyboardRoutines                  13059  0x00003303 (mem) word[1] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (not used)
ROSYBROWN                          48241  0x0000bc71 (const dword)  (not used)
ROYALBLUE                          17244  0x0000435c (const dword)  (usage 15)
RUNFLASH                             128  0x00000080 (const dword)  (not used)
SADDLEBROWN                        35362  0x00008a22 (const dword)  (not used)
SALMON                             64526  0x0000fc0e (const dword)  (not used)
SANDYBROWN                         62764  0x0000f52c (const dword)  (not used)
SAVE_TO_DISK                           7  0x00000007 (const dword)  (not used)
SCREEN_MODE                           23  0x00000017 (const dword)  (not used)
SEAGREEN                           11338  0x00002c4a (const dword)  (not used)
SEASHELL                           65469  0x0000ffbd (const dword)  (not used)
SEED                                 -61  0xffffffc3 (PmmC func) args[1] r=0  (not used)
SendReport                         16968  0x00004248 (User func) args[4] r=0  (usage 6)
serin                               -236  0xffffff14 (PmmC func) args[0] r=1  (usage 3)
serin1                              -237  0xffffff13 (PmmC func) args[0] r=1  (not used)
serin2                              -238  0xffffff12 (PmmC func) args[0] r=1  (not used)
serin3                              -239  0xffffff11 (PmmC func) args[0] r=1  (not used)
serinX                               N/A         N/A (macro) serin   (not used)
serout                              -240  0xffffff10 (PmmC func) args[1] r=0  (usage 21)
serout1                             -241  0xffffff0f (PmmC func) args[1] r=0  (not used)
serout2                             -242  0xffffff0e (PmmC func) args[1] r=0  (not used)
serout3                             -243  0xffffff0d (PmmC func) args[1] r=0  (not used)
seroutCS                           17051  0x0000429b (User func) args[1] r=0  (usage 15)
seroutOcs                          17018  0x0000427a (User func) args[0] r=0  (usage 3)
seroutX                              N/A         N/A (macro) serout   (not used)
setbaud                             -224  0xffffff20 (PmmC func) args[1] r=0  (not used)
SIENNA                             41605  0x0000a285 (const dword)  (not used)
SILVER                             50712  0x0000c618 (const dword)  (not used)
SIN                                  -57  0xffffffc7 (PmmC func) args[1] r=1  (not used)
SKYBLUE                            34429  0x0000867d (const dword)  (not used)
SLATEBLUE                          27353  0x00006ad9 (const dword)  (not used)
SLATEGRAY                          29714  0x00007412 (const dword)  (not used)
SLIDER_HIDE                            2  0x00000002 (const dword)  (not used)
SLIDER_RAISED                          1  0x00000001 (const dword)  (not used)
SLIDER_SUNKEN                          0  0x00000000 (const dword)  (not used)
snd_BufSize                         -461  0xfffffe33 (PmmC func) args[1] r=0  (usage 3)
snd_Continue                        -464  0xfffffe30 (PmmC func) args[0] r=0  (not used)
snd_Freq                            -466  0xfffffe2e (PmmC func) args[2] r=1  (not used)
snd_Pause                           -463  0xfffffe31 (PmmC func) args[0] r=0  (not used)
snd_Pitch                           -460  0xfffffe34 (PmmC func) args[1] r=1  (not used)
snd_Playing                         -465  0xfffffe2f (PmmC func) args[0] r=1  (not used)
snd_Stop                            -462  0xfffffe32 (PmmC func) args[0] r=0  (not used)
snd_Volume                          -459  0xfffffe35 (PmmC func) args[1] r=0  (not used)
SNOW                               65503  0x0000ffdf (const dword)  (not used)
SOLID                                  0  0x00000000 (const dword)  (not used)
SPI1                                   1  0x00000001 (const dword)  (not used)
SPI16_MODE_0                           8  0x00000008 (const dword)  (not used)
SPI16_MODE_1                           9  0x00000009 (const dword)  (not used)
SPI16_MODE_2                          10  0x0000000a (const dword)  (not used)
SPI16_MODE_3                          11  0x0000000b (const dword)  (not used)
SPI16_MODE_4                          12  0x0000000c (const dword)  (not used)
SPI16_MODE_5                          13  0x0000000d (const dword)  (not used)
SPI16_MODE_6                          14  0x0000000e (const dword)  (not used)
SPI16_MODE_7                          15  0x0000000f (const dword)  (not used)
SPI1_Init                           -349  0xfffffea3 (PmmC func) args[2] r=1  (not used)
SPI1_Read                           -352  0xfffffea0 (PmmC func) args[0] r=1  (not used)
spi1_ReadBlock                      -333  0xfffffeb3 (PmmC func) args[2] r=0  (not used)
SPI1_SCK_pin                        -346  0xfffffea6 (PmmC func) args[1] r=1  (not used)
SPI1_SDI_pin                        -343  0xfffffea9 (PmmC func) args[1] r=1  (not used)
SPI1_SDO_pin                        -340  0xfffffeac (PmmC func) args[1] r=1  (not used)
SPI1_Write                          -355  0xfffffe9d (PmmC func) args[1] r=1  (not used)
spi1_WriteBlock                     -359  0xfffffe99 (PmmC func) args[2] r=0  (not used)
SPI2                                   2  0x00000002 (const dword)  (not used)
SPI2_Init                           -350  0xfffffea2 (PmmC func) args[2] r=1  (not used)
SPI2_Read                           -353  0xfffffe9f (PmmC func) args[0] r=1  (not used)
spi2_ReadBlock                      -334  0xfffffeb2 (PmmC func) args[2] r=0  (not used)
SPI2_SCK_pin                        -347  0xfffffea5 (PmmC func) args[1] r=1  (not used)
SPI2_SDI_pin                        -344  0xfffffea8 (PmmC func) args[1] r=1  (not used)
SPI2_SDO_pin                        -341  0xfffffeab (PmmC func) args[1] r=1  (not used)
SPI2_Write                          -356  0xfffffe9c (PmmC func) args[1] r=1  (not used)
spi2_WriteBlock                     -360  0xfffffe98 (PmmC func) args[2] r=0  (not used)
SPI3                                   3  0x00000003 (const dword)  (not used)
SPI3_Init                           -351  0xfffffea1 (PmmC func) args[2] r=1  (not used)
SPI3_Read                           -354  0xfffffe9e (PmmC func) args[0] r=1  (not used)
spi3_ReadBlock                      -335  0xfffffeb1 (PmmC func) args[2] r=0  (not used)
SPI3_SCK_pin                        -348  0xfffffea4 (PmmC func) args[1] r=1  (not used)
SPI3_SDI_pin                        -345  0xfffffea7 (PmmC func) args[1] r=1  (not used)
SPI3_SDO_pin                        -342  0xfffffeaa (PmmC func) args[1] r=1  (not used)
SPI3_Write                          -357  0xfffffe9b (PmmC func) args[1] r=1  (not used)
spi3_WriteBlock                     -361  0xfffffe97 (PmmC func) args[2] r=0  (not used)
SPI8_MODE_0                            0  0x00000000 (const dword)  (not used)
SPI8_MODE_1                            1  0x00000001 (const dword)  (not used)
SPI8_MODE_2                            2  0x00000002 (const dword)  (not used)
SPI8_MODE_3                            3  0x00000003 (const dword)  (not used)
SPI8_MODE_4                            4  0x00000004 (const dword)  (not used)
SPI8_MODE_5                            5  0x00000005 (const dword)  (not used)
SPI8_MODE_6                            6  0x00000006 (const dword)  (not used)
SPI8_MODE_7                            7  0x00000007 (const dword)  (not used)
spi_Disable                         -339  0xfffffead (PmmC func) args[0] r=0  (not used)
spi_Init                            -336  0xfffffeb0 (PmmC func) args[3] r=0  (not used)
spi_Read                            -337  0xfffffeaf (PmmC func) args[0] r=1  (not used)
spi_ReadBlock                       -332  0xfffffeb4 (PmmC func) args[2] r=0  (not used)
SPI_SPEED0                             0  0x00000000 (const dword)  (not used)
SPI_SPEED1                             1  0x00000001 (const dword)  (not used)
SPI_SPEED10                           10  0x0000000a (const dword)  (not used)
SPI_SPEED11                           11  0x0000000b (const dword)  (not used)
SPI_SPEED12                           12  0x0000000c (const dword)  (not used)
SPI_SPEED13                           13  0x0000000d (const dword)  (not used)
SPI_SPEED14                           14  0x0000000e (const dword)  (not used)
SPI_SPEED15                           15  0x0000000f (const dword)  (not used)
SPI_SPEED2                             2  0x00000002 (const dword)  (not used)
SPI_SPEED3                             3  0x00000003 (const dword)  (not used)
SPI_SPEED4                             4  0x00000004 (const dword)  (not used)
SPI_SPEED5                             5  0x00000005 (const dword)  (not used)
SPI_SPEED6                             6  0x00000006 (const dword)  (not used)
SPI_SPEED7                             7  0x00000007 (const dword)  (not used)
SPI_SPEED8                             8  0x00000008 (const dword)  (not used)
SPI_SPEED9                             9  0x00000009 (const dword)  (not used)
spi_Write                           -338  0xfffffeae (PmmC func) args[1] r=0  (not used)
spi_WriteBlock                      -358  0xfffffe9a (PmmC func) args[2] r=0  (not used)
spiflash_BlockErase                 -541  0xfffffde3 (PmmC func) args[3] r=0  (not used)
spiflash_BulkErase                  -540  0xfffffde4 (PmmC func) args[2] r=0  (not used)
spiflash_Exec                       -554  0xfffffdd6 (PmmC func) args[3] r=1  (not used)
spiflash_GetC                       -547  0xfffffddd (PmmC func) args[2] r=1  (not used)
spiflash_GetS                       -551  0xfffffdd9 (PmmC func) args[4] r=1  (not used)
spiflash_GetW                       -549  0xfffffddb (PmmC func) args[2] r=1  (not used)
spiflash_ID                         -539  0xfffffde5 (PmmC func) args[2] r=1  (not used)
spiflash_Image                      -545  0xfffffddf (PmmC func) args[4] r=1  (not used)
spiflash_LoadFunction               -552  0xfffffdd8 (PmmC func) args[2] r=1  (not used)
spiflash_LoadImageControl           -555  0xfffffdd5 (PmmC func) args[2] r=1  (not used)
spiflash_PlayWAV                    -556  0xfffffdd4 (PmmC func) args[2] r=1  (not used)
spiflash_PutC                       -546  0xfffffdde (PmmC func) args[3] r=0  (not used)
spiflash_PutS                       -550  0xfffffdda (PmmC func) args[3] r=1  (not used)
spiflash_PutW                       -548  0xfffffddc (PmmC func) args[3] r=0  (not used)
spiflash_Read                       -543  0xfffffde1 (PmmC func) args[4] r=1  (not used)
spiflash_Run                        -553  0xfffffdd7 (PmmC func) args[3] r=1  (not used)
spiflash_SetAdd                     -542  0xfffffde2 (PmmC func) args[3] r=0  (not used)
spiflash_SIG                        -538  0xfffffde6 (PmmC func) args[2] r=1  (not used)
spiflash_Write                      -544  0xfffffde0 (PmmC func) args[4] r=1  (not used)
SPRINGGREEN                         2031  0x000007ef (const dword)  (not used)
SQRT                                 -62  0xffffffc2 (PmmC func) args[1] r=1  (not used)
STEELBLUE                          17430  0x00004416 (const dword)  (not used)
STR                                  128  0x00000080 (const dword)  (not used)
str_ByteMove                        -487  0xfffffe19 (PmmC func) args[3] r=1  (not used)
str_Cat                             -485  0xfffffe1b (PmmC func) args[2] r=1  (not used)
str_CatN                            -486  0xfffffe1a (PmmC func) args[3] r=1  (not used)
str_Copy                            -488  0xfffffe18 (PmmC func) args[2] r=1  (not used)
str_CopyN                           -489  0xfffffe17 (PmmC func) args[3] r=1  (not used)
str_Find                            -481  0xfffffe1f (PmmC func) args[2] r=1  (not used)
str_FindI                           -482  0xfffffe1e (PmmC func) args[2] r=1  (not used)
str_GetByte                         -475  0xfffffe25 (PmmC func) args[1] r=1  (not used)
str_GetC                            -474  0xfffffe26 (PmmC func) args[2] r=1  (not used)
str_GetD                            -471  0xfffffe29 (PmmC func) args[2] r=1  (not used)
str_GetHexW                         -473  0xfffffe27 (PmmC func) args[2] r=1  (not used)
str_GetW                            -472  0xfffffe28 (PmmC func) args[2] r=1  (not used)
str_GetWord                         -476  0xfffffe24 (PmmC func) args[1] r=1  (not used)
str_Length                          -483  0xfffffe1d (PmmC func) args[1] r=1  (not used)
str_Match                           -479  0xfffffe21 (PmmC func) args[2] r=1  (not used)
str_MatchI                          -480  0xfffffe20 (PmmC func) args[2] r=1  (not used)
str_Printf                          -484  0xfffffe1c (PmmC func) args[2] r=1  (not used)
str_Ptr                             -470  0xfffffe2a (PmmC func) args[1] r=1  (not used)
str_PutByte                         -477  0xfffffe23 (PmmC func) args[2] r=0  (not used)
str_PutWord                         -478  0xfffffe22 (PmmC func) args[2] r=0  (not used)
strheight                            -14  0xfffffff2 (PmmC func) args[0] r=1  (not used)
Strings0Count                          1  0x00000001 (const dword)  (not used)
Strings0Size                           4  0x00000004 (const dword)  (usage 3)
Strings0StartH                         0  0x00000000 (const dword)  (usage 3)
Strings0StartL                      6144  0x00001800 (const dword)  (usage 3)
Strings10Count                         1  0x00000001 (const dword)  (not used)
Strings10Size                          7  0x00000007 (const dword)  (usage 3)
Strings10StartH                        0  0x00000000 (const dword)  (usage 3)
Strings10StartL                    11264  0x00002c00 (const dword)  (usage 3)
Strings11Count                         1  0x00000001 (const dword)  (not used)
Strings11Size                          7  0x00000007 (const dword)  (usage 3)
Strings11StartH                        0  0x00000000 (const dword)  (usage 3)
Strings11StartL                    22528  0x00005800 (const dword)  (usage 3)
Strings12Count                         0  0x00000000 (const dword)  (not used)
Strings12Size                          1  0x00000001 (const dword)  (usage 3)
Strings12StartH                        0  0x00000000 (const dword)  (usage 3)
Strings12StartL                     2048  0x00000800 (const dword)  (usage 3)
Strings13Count                         1  0x00000001 (const dword)  (not used)
Strings13Size                          7  0x00000007 (const dword)  (usage 3)
Strings13StartH                        0  0x00000000 (const dword)  (usage 3)
Strings13StartL                    12288  0x00003000 (const dword)  (usage 3)
Strings14Count                         1  0x00000001 (const dword)  (not used)
Strings14Size                          7  0x00000007 (const dword)  (usage 3)
Strings14StartH                        0  0x00000000 (const dword)  (usage 3)
Strings14StartL                    12800  0x00003200 (const dword)  (usage 3)
Strings15Count                         1  0x00000001 (const dword)  (not used)
Strings15Size                          7  0x00000007 (const dword)  (usage 3)
Strings15StartH                        0  0x00000000 (const dword)  (usage 3)
Strings15StartL                    13312  0x00003400 (const dword)  (usage 3)
Strings16Count                         0  0x00000000 (const dword)  (not used)
Strings16Size                          1  0x00000001 (const dword)  (usage 3)
Strings16StartH                        0  0x00000000 (const dword)  (usage 3)
Strings16StartL                     4608  0x00001200 (const dword)  (usage 3)
Strings17Count                         1  0x00000001 (const dword)  (not used)
Strings17Size                          7  0x00000007 (const dword)  (usage 3)
Strings17StartH                        0  0x00000000 (const dword)  (usage 3)
Strings17StartL                    11776  0x00002e00 (const dword)  (usage 3)
Strings18Count                         1  0x00000001 (const dword)  (not used)
Strings18Size                          7  0x00000007 (const dword)  (usage 3)
Strings18StartH                        0  0x00000000 (const dword)  (usage 3)
Strings18StartL                    13824  0x00003600 (const dword)  (usage 3)
Strings19Count                         1  0x00000001 (const dword)  (not used)
Strings19Size                          9  0x00000009 (const dword)  (usage 3)
Strings19StartH                        0  0x00000000 (const dword)  (usage 3)
Strings19StartL                    14336  0x00003800 (const dword)  (usage 3)
Strings1Count                          0  0x00000000 (const dword)  (not used)
Strings1Size                           1  0x00000001 (const dword)  (usage 3)
Strings1StartH                         0  0x00000000 (const dword)  (usage 3)
Strings1StartL                       512  0x00000200 (const dword)  (usage 3)
Strings20Count                         1  0x00000001 (const dword)  (not used)
Strings20Size                          9  0x00000009 (const dword)  (usage 3)
Strings20StartH                        0  0x00000000 (const dword)  (usage 3)
Strings20StartL                    14848  0x00003a00 (const dword)  (usage 3)
Strings21Count                         1  0x00000001 (const dword)  (not used)
Strings21Size                          9  0x00000009 (const dword)  (usage 3)
Strings21StartH                        0  0x00000000 (const dword)  (usage 3)
Strings21StartL                    15360  0x00003c00 (const dword)  (usage 3)
Strings22Count                         1  0x00000001 (const dword)  (not used)
Strings22Size                          9  0x00000009 (const dword)  (usage 3)
Strings22StartH                        0  0x00000000 (const dword)  (usage 3)
Strings22StartL                    15872  0x00003e00 (const dword)  (usage 3)
Strings23Count                         0  0x00000000 (const dword)  (not used)
Strings23Size                          1  0x00000001 (const dword)  (usage 3)
Strings23StartH                        0  0x00000000 (const dword)  (usage 3)
Strings23StartL                     2560  0x00000a00 (const dword)  (usage 3)
Strings24Count                         1  0x00000001 (const dword)  (not used)
Strings24Size                         19  0x00000013 (const dword)  (usage 3)
Strings24StartH                        0  0x00000000 (const dword)  (usage 3)
Strings24StartL                     3072  0x00000c00 (const dword)  (usage 3)
Strings25Count                         1  0x00000001 (const dword)  (not used)
Strings25Size                         37  0x00000025 (const dword)  (usage 3)
Strings25StartH                        0  0x00000000 (const dword)  (usage 3)
Strings25StartL                     3584  0x00000e00 (const dword)  (usage 3)
Strings26Count                         1  0x00000001 (const dword)  (not used)
Strings26Size                         37  0x00000025 (const dword)  (usage 3)
Strings26StartH                        0  0x00000000 (const dword)  (usage 3)
Strings26StartL                     4096  0x00001000 (const dword)  (usage 3)
Strings27Count                         0  0x00000000 (const dword)  (not used)
Strings27Size                          1  0x00000001 (const dword)  (usage 3)
Strings27StartH                        0  0x00000000 (const dword)  (usage 3)
Strings27StartL                    16384  0x00004000 (const dword)  (usage 3)
Strings28Count                         1  0x00000001 (const dword)  (not used)
Strings28Size                         22  0x00000016 (const dword)  (usage 3)
Strings28StartH                        0  0x00000000 (const dword)  (usage 3)
Strings28StartL                    16896  0x00004200 (const dword)  (usage 3)
Strings29Count                         1  0x00000001 (const dword)  (not used)
Strings29Size                          4  0x00000004 (const dword)  (usage 3)
Strings29StartH                        0  0x00000000 (const dword)  (usage 3)
Strings29StartL                    18432  0x00004800 (const dword)  (usage 3)
Strings2Count                          1  0x00000001 (const dword)  (not used)
Strings2Size                           4  0x00000004 (const dword)  (usage 3)
Strings2StartH                         0  0x00000000 (const dword)  (usage 3)
Strings2StartL                      5632  0x00001600 (const dword)  (usage 3)
Strings30Count                         1  0x00000001 (const dword)  (not used)
Strings30Size                         37  0x00000025 (const dword)  (usage 3)
Strings30StartH                        0  0x00000000 (const dword)  (usage 3)
Strings30StartL                     5120  0x00001400 (const dword)  (usage 3)
Strings31Count                         1  0x00000001 (const dword)  (not used)
Strings31Size                          4  0x00000004 (const dword)  (usage 3)
Strings31StartH                        0  0x00000000 (const dword)  (usage 3)
Strings31StartL                    18944  0x00004a00 (const dword)  (usage 3)
Strings32Count                         1  0x00000001 (const dword)  (not used)
Strings32Size                          4  0x00000004 (const dword)  (usage 3)
Strings32StartH                        0  0x00000000 (const dword)  (usage 3)
Strings32StartL                    19456  0x00004c00 (const dword)  (usage 3)
Strings33Count                         1  0x00000001 (const dword)  (not used)
Strings33Size                          4  0x00000004 (const dword)  (usage 3)
Strings33StartH                        0  0x00000000 (const dword)  (usage 3)
Strings33StartL                    19968  0x00004e00 (const dword)  (usage 3)
Strings34Count                         1  0x00000001 (const dword)  (not used)
Strings34Size                          4  0x00000004 (const dword)  (usage 3)
Strings34StartH                        0  0x00000000 (const dword)  (usage 3)
Strings34StartL                     7168  0x00001c00 (const dword)  (usage 3)
Strings35Count                         1  0x00000001 (const dword)  (not used)
Strings35Size                          4  0x00000004 (const dword)  (usage 3)
Strings35StartH                        0  0x00000000 (const dword)  (usage 3)
Strings35StartL                    20480  0x00005000 (const dword)  (usage 3)
Strings36Count                         1  0x00000001 (const dword)  (not used)
Strings36Size                          4  0x00000004 (const dword)  (usage 3)
Strings36StartH                        0  0x00000000 (const dword)  (usage 3)
Strings36StartL                     7680  0x00001e00 (const dword)  (usage 3)
Strings37Count                         1  0x00000001 (const dword)  (not used)
Strings37Size                          4  0x00000004 (const dword)  (usage 3)
Strings37StartH                        0  0x00000000 (const dword)  (usage 3)
Strings37StartL                     8192  0x00002000 (const dword)  (usage 3)
Strings38Count                         1  0x00000001 (const dword)  (not used)
Strings38Size                          4  0x00000004 (const dword)  (usage 3)
Strings38StartH                        0  0x00000000 (const dword)  (usage 3)
Strings38StartL                    20992  0x00005200 (const dword)  (usage 3)
Strings39Count                         0  0x00000000 (const dword)  (not used)
Strings39Size                          1  0x00000001 (const dword)  (usage 3)
Strings39StartH                        0  0x00000000 (const dword)  (usage 3)
Strings39StartL                    23552  0x00005c00 (const dword)  (usage 3)
Strings3Count                          0  0x00000000 (const dword)  (not used)
Strings3Size                           1  0x00000001 (const dword)  (usage 3)
Strings3StartH                         0  0x00000000 (const dword)  (usage 3)
Strings3StartL                         0  0x00000000 (const dword)  (usage 3)
Strings40Count                         1  0x00000001 (const dword)  (not used)
Strings40Size                         16  0x00000010 (const dword)  (usage 3)
Strings40StartH                        0  0x00000000 (const dword)  (usage 3)
Strings40StartL                     9216  0x00002400 (const dword)  (usage 3)
Strings41Count                         0  0x00000000 (const dword)  (not used)
Strings41Size                          1  0x00000001 (const dword)  (usage 3)
Strings41StartH                        0  0x00000000 (const dword)  (usage 3)
Strings41StartL                     9728  0x00002600 (const dword)  (usage 3)
Strings42Count                         0  0x00000000 (const dword)  (not used)
Strings42Size                          1  0x00000001 (const dword)  (usage 3)
Strings42StartH                        0  0x00000000 (const dword)  (usage 3)
Strings42StartL                    10240  0x00002800 (const dword)  (usage 3)
Strings43Count                         0  0x00000000 (const dword)  (not used)
Strings43Size                          1  0x00000001 (const dword)  (usage 3)
Strings43StartH                        0  0x00000000 (const dword)  (usage 3)
Strings43StartL                    22016  0x00005600 (const dword)  (usage 3)
Strings44Count                         0  0x00000000 (const dword)  (not used)
Strings44Size                          1  0x00000001 (const dword)  (usage 3)
Strings44StartH                        0  0x00000000 (const dword)  (usage 3)
Strings44StartL                    24064  0x00005e00 (const dword)  (usage 3)
Strings45Count                         0  0x00000000 (const dword)  (not used)
Strings45Size                          1  0x00000001 (const dword)  (usage 3)
Strings45StartH                        0  0x00000000 (const dword)  (usage 3)
Strings45StartL                    23040  0x00005a00 (const dword)  (usage 3)
Strings46Count                         0  0x00000000 (const dword)  (not used)
Strings46Size                          1  0x00000001 (const dword)  (usage 3)
Strings46StartH                        0  0x00000000 (const dword)  (usage 3)
Strings46StartL                    17408  0x00004400 (const dword)  (usage 3)
Strings47Count                         0  0x00000000 (const dword)  (not used)
Strings47Size                          1  0x00000001 (const dword)  (usage 3)
Strings47StartH                        0  0x00000000 (const dword)  (usage 3)
Strings47StartL                    21504  0x00005400 (const dword)  (usage 3)
Strings48Size                          0  0x00000000 (const dword)  (not used)
Strings48StartH                        0  0x00000000 (const dword)  (not used)
Strings48StartL                        0  0x00000000 (const dword)  (not used)
Strings49Count                         1  0x00000001 (const dword)  (not used)
Strings49Size                         12  0x0000000c (const dword)  (usage 3)
Strings49StartH                        0  0x00000000 (const dword)  (usage 3)
Strings49StartL                    24576  0x00006000 (const dword)  (usage 3)
Strings4Count                          1  0x00000001 (const dword)  (not used)
Strings4Size                           4  0x00000004 (const dword)  (usage 3)
Strings4StartH                         0  0x00000000 (const dword)  (usage 3)
Strings4StartL                      8704  0x00002200 (const dword)  (usage 3)
Strings50Count                         0  0x00000000 (const dword)  (not used)
Strings50Size                          1  0x00000001 (const dword)  (usage 3)
Strings50StartH                        0  0x00000000 (const dword)  (usage 3)
Strings50StartL                    25600  0x00006400 (const dword)  (usage 3)
Strings51Count                         0  0x00000000 (const dword)  (not used)
Strings51Size                          1  0x00000001 (const dword)  (usage 3)
Strings51StartH                        0  0x00000000 (const dword)  (usage 3)
Strings51StartL                    26112  0x00006600 (const dword)  (usage 3)
Strings52Count                         0  0x00000000 (const dword)  (not used)
Strings52Size                          1  0x00000001 (const dword)  (usage 3)
Strings52StartH                        0  0x00000000 (const dword)  (usage 3)
Strings52StartL                    25088  0x00006200 (const dword)  (usage 3)
Strings5Count                          1  0x00000001 (const dword)  (not used)
Strings5Size                           7  0x00000007 (const dword)  (usage 3)
Strings5StartH                         0  0x00000000 (const dword)  (usage 3)
Strings5StartL                     10752  0x00002a00 (const dword)  (usage 3)
Strings6Count                          1  0x00000001 (const dword)  (not used)
Strings6Size                           4  0x00000004 (const dword)  (usage 3)
Strings6StartH                         0  0x00000000 (const dword)  (usage 3)
Strings6StartL                     17920  0x00004600 (const dword)  (usage 3)
Strings7Count                          1  0x00000001 (const dword)  (not used)
Strings7Size                          37  0x00000025 (const dword)  (usage 3)
Strings7StartH                         0  0x00000000 (const dword)  (usage 3)
Strings7StartL                      1024  0x00000400 (const dword)  (usage 3)
Strings8Count                          0  0x00000000 (const dword)  (not used)
Strings8Size                           1  0x00000001 (const dword)  (usage 3)
Strings8StartH                         0  0x00000000 (const dword)  (usage 3)
Strings8StartL                      1536  0x00000600 (const dword)  (usage 3)
Strings9Count                          1  0x00000001 (const dword)  (not used)
Strings9Size                           4  0x00000004 (const dword)  (usage 3)
Strings9StartH                         0  0x00000000 (const dword)  (usage 3)
Strings9StartL                      6656  0x00001a00 (const dword)  (usage 3)
stringsCV                            108  0x0000006c (mem) word[53] (global)  (usage 27)
strlen                               -10  0xfffffff6 (PmmC func) args[1] r=1  (not used)
strwidth                             -13  0xfffffff3 (PmmC func) args[1] r=1  (not used)
STYLE1                                 2  0x00000002 (const dword)  (not used)
STYLE2                                 3  0x00000003 (const dword)  (not used)
SWAP                                 -56  0xffffffc8 (PmmC func) args[2] r=0  (not used)
sys_DeepSleep                       -405  0xfffffe6b (PmmC func) args[1] r=1  (not used)
sys_Driver                          -531  0xfffffded (PmmC func) args[0] r=0  (not used)
sys_ErrorMessage                    -534  0xfffffdea (PmmC func) args[1] r=1  (not used)
sys_EventQueue                      -396  0xfffffe74 (PmmC func) args[0] r=1  (not used)
sys_EventsPostpone                  -397  0xfffffe73 (PmmC func) args[0] r=0  (not used)
sys_EventsResume                    -398  0xfffffe72 (PmmC func) args[0] r=0  (usage 3)
sys_GetDate                         -401  0xfffffe6f (PmmC func) args[0] r=0  (not used)
sys_GetDateVar                      -528  0xfffffdf0 (PmmC func) args[3] r=0  (not used)
sys_GetTime                         -399  0xfffffe71 (PmmC func) args[0] r=0  (not used)
sys_GetTimer                        -394  0xfffffe76 (PmmC func) args[1] r=1  (not used)
sys_GetTimeVar                      -529  0xfffffdef (PmmC func) args[4] r=0  (not used)
sys_PmmC                            -530  0xfffffdee (PmmC func) args[0] r=0  (not used)
sys_SetDate                         -402  0xfffffe6e (PmmC func) args[3] r=1  (not used)
sys_SetTime                         -400  0xfffffe70 (PmmC func) args[3] r=1  (not used)
sys_SetTimer                        -393  0xfffffe77 (PmmC func) args[2] r=0  (not used)
sys_SetTimerEvent                   -395  0xfffffe75 (PmmC func) args[2] r=1  (not used)
sys_Sleep                           -403  0xfffffe6d (PmmC func) args[1] r=1  (not used)
sys_StoreTouchCalibration           -368  0xfffffe90 (PmmC func) args[0] r=1  (not used)
sys_T                               -391  0xfffffe79 (PmmC func) args[0] r=1  (not used)
sys_T_HI                            -392  0xfffffe78 (PmmC func) args[0] r=1  (not used)
SYS_X_MAX                             44  0x0000002c (const dword)  (not used)
SYS_Y_MAX                             45  0x0000002d (const dword)  (not used)
SYSTEM_TIMER_HI                       35  0x00000023 (const dword)  (not used)
SYSTEM_TIMER_LO                       34  0x00000022 (const dword)  (not used)
t4Dbutton                             30  0x0000001e (const dword)  (usage 15)
TAN                                54705  0x0000d5b1 (const dword)  (not used)
tAngularmeter                          7  0x00000007 (const dword)  (usage 3)
tAniButton                            31  0x0000001f (const dword)  (usage 6)
TB1                                  100  0x00000064 (const dword)  (not used)
TB2                                  101  0x00000065 (const dword)  (not used)
TB3                                  102  0x00000066 (const dword)  (not used)
TB4                                  103  0x00000067 (const dword)  (not used)
tColorPicker                          32  0x00000020 (const dword)  (usage 3)
tCoolgauge                             8  0x00000008 (const dword)  (usage 3)
tCustomdigits                          9  0x00000009 (const dword)  (usage 3)
tDipSwitch                             0  0x00000000 (const dword)  (usage 3)
TEAL                                1040  0x00000410 (const dword)  (not used)
TEXT                               63489  0x0000f801 (const dword)  (not used)
TEXT_ANGLE                            15  0x0000000f (const dword)  (not used)
TEXT_ATTRIBUTES                       13  0x0000000d (const dword)  (not used)
TEXT_BACKGROUND                        1  0x00000001 (const dword)  (not used)
TEXT_BOLD                              9  0x00000009 (const dword)  (not used)
TEXT_COLOUR                            0  0x00000000 (const dword)  (not used)
TEXT_HEIGHT                            4  0x00000004 (const dword)  (not used)
TEXT_HIGHLIGHT                         1  0x00000001 (const dword)  (not used)
TEXT_INVERSE                          11  0x0000000b (const dword)  (not used)
TEXT_ITALIC                           10  0x0000000a (const dword)  (not used)
TEXT_MARGIN                           97  0x00000061 (const dword)  (not used)
TEXT_OPACITY                           8  0x00000008 (const dword)  (not used)
TEXT_PRINTDELAY                        7  0x00000007 (const dword)  (not used)
TEXT_UNDERLINED                       12  0x0000000c (const dword)  (not used)
TEXT_WIDTH                             3  0x00000003 (const dword)  (not used)
TEXT_WRAP                             14  0x0000000e (const dword)  (not used)
TEXT_XGAP                              5  0x00000005 (const dword)  (not used)
TEXT_XPOS                             95  0x0000005f (const dword)  (not used)
TEXT_YGAP                              6  0x00000006 (const dword)  (not used)
TEXT_YPOS                             96  0x00000060 (const dword)  (not used)
tForm                                 10  0x0000000a (const dword)  (usage 15)
tGauge                                11  0x0000000b (const dword)  (usage 3)
tGSlider                               4  0x00000004 (const dword)  (usage 3)
THISTLE                            56827  0x0000ddfb (const dword)  (not used)
tImage                                12  0x0000000c (const dword)  (usage 3)
TIMER0                                 0  0x00000000 (const dword)  (not used)
TIMER1                                 1  0x00000001 (const dword)  (not used)
TIMER2                                 2  0x00000002 (const dword)  (not used)
TIMER3                                 3  0x00000003 (const dword)  (not used)
TIMER4                                 4  0x00000004 (const dword)  (not used)
TIMER5                                 5  0x00000005 (const dword)  (not used)
TIMER6                                 6  0x00000006 (const dword)  (not used)
TIMER7                                 7  0x00000007 (const dword)  (not used)
tKeyboard                             13  0x0000000d (const dword)  (usage 3)
tKnob                                  1  0x00000001 (const dword)  (usage 3)
tLed                                  14  0x0000000e (const dword)  (usage 3)
tLeddigits                            15  0x0000000f (const dword)  (usage 3)
tMagicObject                          34  0x00000022 (const dword)  (not used)
tMeter                                16  0x00000010 (const dword)  (usage 3)
TMR0                                  36  0x00000024 (const dword)  (not used)
TMR1                                  37  0x00000025 (const dword)  (not used)
TMR2                                  38  0x00000026 (const dword)  (not used)
TMR3                                  39  0x00000027 (const dword)  (not used)
TMR4                                  40  0x00000028 (const dword)  (not used)
TMR5                                  41  0x00000029 (const dword)  (not used)
TMR6                                  42  0x0000002a (const dword)  (not used)
TMR7                                  43  0x0000002b (const dword)  (not used)
to                                    -1  0xffffffff (PmmC func) args[1] r=0  (not used)
tolower                              -46  0xffffffd2 (PmmC func) args[1] r=1  (not used)
TOMATO                             64264  0x0000fb08 (const dword)  (not used)
TOP_POS                                3  0x00000003 (const dword)  (not used)
touch_DetectRegion                  -406  0xfffffe6a (PmmC func) args[4] r=0  (not used)
TOUCH_DISABLE                          1  0x00000001 (const dword)  (not used)
TOUCH_ENABLE                           0  0x00000000 (const dword)  (usage 3)
touch_Get                           -408  0xfffffe68 (PmmC func) args[1] r=1  (usage 9)
TOUCH_GETX                             1  0x00000001 (const dword)  (usage 3)
TOUCH_GETY                             2  0x00000002 (const dword)  (usage 3)
TOUCH_MOVING                           3  0x00000003 (const dword)  (usage 3)
TOUCH_PRESSED                          1  0x00000001 (const dword)  (usage 9)
TOUCH_RAW_X                          117  0x00000075 (const dword)  (not used)
TOUCH_RAW_Y                          118  0x00000076 (const dword)  (not used)
TOUCH_REGIONDEFAULT                    2  0x00000002 (const dword)  (not used)
TOUCH_RELEASED                         2  0x00000002 (const dword)  (usage 18)
touch_Set                           -407  0xfffffe69 (PmmC func) args[1] r=0  (usage 3)
TOUCH_STATUS                           0  0x00000000 (const dword)  (usage 3)
touch_TestArea                      -410  0xfffffe66 (PmmC func) args[1] r=1  (not used)
touch_TestBox                       -409  0xfffffe67 (PmmC func) args[1] r=1  (not used)
TOUCH_XMAXCAL                         80  0x00000050 (const dword)  (not used)
TOUCH_XMINCAL                         78  0x0000004e (const dword)  (not used)
TOUCH_YMAXCAL                         81  0x00000051 (const dword)  (not used)
TOUCH_YMINCAL                         79  0x0000004f (const dword)  (not used)
TouchState                           292  0x00000124 (mem) word (global)  (usage 24)
TouchXpos                            286  0x0000011e (mem) word (global)  (usage 12)
TouchYpos                            288  0x00000120 (mem) word (global)  (usage 9)
toupper                              -45  0xffffffd3 (PmmC func) args[1] r=1  (not used)
tPinInput                             29  0x0000001d (const dword)  (usage 6)
tPinOutput                            28  0x0000001c (const dword)  (usage 6)
TRANSPARENCY                          21  0x00000015 (const dword)  (not used)
TRANSPARENT                            0  0x00000000 (const dword)  (usage 3)
TRANSPARENT_COLOUR                    20  0x00000014 (const dword)  (not used)
tRockerSwitch                          2  0x00000002 (const dword)  (usage 3)
tRotarySwitch                          3  0x00000003 (const dword)  (usage 3)
tScope                                25  0x00000019 (const dword)  (not used)
tSounds                               22  0x00000016 (const dword)  (usage 6)
tSpectrum                             24  0x00000018 (const dword)  (usage 3)
tStaticText                           21  0x00000015 (const dword)  (usage 3)
tStrings                              17  0x00000011 (const dword)  (usage 18)
tTank                                 26  0x0000001a (const dword)  (usage 3)
tThermometer                          18  0x00000012 (const dword)  (usage 3)
tTimer                                23  0x00000017 (const dword)  (usage 6)
tTrackbar                              5  0x00000005 (const dword)  (usage 3)
TurnOffButtons                     16390  0x00004006 (User func) args[1] r=0  (usage 6)
TURQUOISE                          18202  0x0000471a (const dword)  (not used)
tUserButton                           33  0x00000021 (const dword)  (usage 666)
tUserImages                           27  0x0000001b (const dword)  (usage 3)
tUserled                              19  0x00000013 (const dword)  (usage 3)
tVideo                                20  0x00000014 (const dword)  (usage 3)
tWinButton                             6  0x00000006 (const dword)  (usage 12)
txt_Angle                            -33  0xffffffdf (PmmC func) args[1] r=1  (not used)
txt_Attributes                       -31  0xffffffe1 (PmmC func) args[1] r=1  (usage 3)
txt_BGcolour                         -19  0xffffffed (PmmC func) args[1] r=1  (usage 3)
txt_Bold                             -27  0xffffffe5 (PmmC func) args[1] r=1  (not used)
txt_Delay                            -25  0xffffffe7 (PmmC func) args[1] r=1  (not used)
txt_FGcolour                         -18  0xffffffee (PmmC func) args[1] r=1  (usage 3)
TXT_FONT_HEIGHT                      102  0x00000066 (const dword)  (not used)
TXT_FONT_ID                           98  0x00000062 (const dword)  (not used)
TXT_FONT_MAX                          99  0x00000063 (const dword)  (not used)
TXT_FONT_OFFSET                      100  0x00000064 (const dword)  (not used)
TXT_FONT_WIDTH                       101  0x00000065 (const dword)  (not used)
txt_FontBank                         -52  0xffffffcc (PmmC func) args[2] r=1  (not used)
txt_FontID                           -20  0xffffffec (PmmC func) args[1] r=1  (usage 3)
txt_Height                           -22  0xffffffea (PmmC func) args[1] r=1  (not used)
txt_Inverse                          -29  0xffffffe3 (PmmC func) args[1] r=1  (not used)
txt_Italic                           -28  0xffffffe4 (PmmC func) args[1] r=1  (not used)
txt_MoveCursor                       -16  0xfffffff0 (PmmC func) args[2] r=0  (not used)
txt_Opacity                          -26  0xffffffe6 (PmmC func) args[1] r=1  (usage 3)
txt_Set                              -17  0xffffffef (PmmC func) args[2] r=0  (not used)
txt_Underline                        -30  0xffffffe2 (PmmC func) args[1] r=1  (not used)
txt_Width                            -21  0xffffffeb (PmmC func) args[1] r=1  (not used)
txt_Wrap                             -32  0xffffffe0 (PmmC func) args[1] r=1  (not used)
txt_Xgap                             -23  0xffffffe9 (PmmC func) args[1] r=1  (not used)
txt_Ygap                             -24  0xffffffe8 (PmmC func) args[1] r=1  (not used)
uadd_3232                            -71  0xffffffb9 (PmmC func) args[3] r=1  (usage 3)
ucmp_3232                            -75  0xffffffb5 (PmmC func) args[2] r=1  (not used)
UDEC                               17674  0x0000450a (const dword)  (not used)
UDEC1                              16650  0x0000410a (const dword)  (not used)
UDEC1Z                             20746  0x0000510a (const dword)  (not used)
UDEC1ZB                            24842  0x0000610a (const dword)  (not used)
UDEC2                              16906  0x0000420a (const dword)  (not used)
UDEC2Z                             21002  0x0000520a (const dword)  (not used)
UDEC2ZB                            25098  0x0000620a (const dword)  (not used)
UDEC3                              17162  0x0000430a (const dword)  (not used)
UDEC3Z                             21258  0x0000530a (const dword)  (not used)
UDEC3ZB                            25354  0x0000630a (const dword)  (not used)
UDEC4                              17418  0x0000440a (const dword)  (not used)
UDEC4Z                             21514  0x0000540a (const dword)  (not used)
UDEC4ZB                            25610  0x0000640a (const dword)  (not used)
UDEC5                              17674  0x0000450a (const dword)  (not used)
UDEC5Z                             21770  0x0000550a (const dword)  (not used)
UDEC5ZB                            25866  0x0000650a (const dword)  (not used)
UDECZ                              21770  0x0000550a (const dword)  (not used)
UDECZB                             25866  0x0000650a (const dword)  (not used)
udiv_3232                            -74  0xffffffb6 (PmmC func) args[3] r=1  (not used)
umul_1616                            -73  0xffffffb7 (PmmC func) args[3] r=1  (usage 3)
UNCHECKED                              1  0x00000001 (const dword)  (not used)
UNDERLINED                           128  0x00000080 (const dword)  (not used)
unicode_page                         -15  0xfffffff1 (PmmC func) args[3] r=1  (not used)
UP                                     1  0x00000001 (const dword)  (not used)
UpdateObjects                      15438  0x00003c4e (User func) args[1] r=0  (usage 3)
usub_3232                            -72  0xffffffb8 (PmmC func) args[3] r=1  (not used)
VIOLET                             60445  0x0000ec1d (const dword)  (not used)
WHEAT                              63222  0x0000f6f6 (const dword)  (not used)
WHITE                              65535  0x0000ffff (const dword)  (usage 6)
WHITESMOKE                         63422  0x0000f7be (const dword)  (not used)
WRITE_CONTRAST                         4  0x00000004 (const dword)  (usage 3)
WRITE_MAGIC_BYTES                      8  0x00000008 (const dword)  (not used)
WRITE_MAGIC_DBYTES                     9  0x00000009 (const dword)  (not used)
WRITE_OBJ                              1  0x00000001 (const dword)  (usage 3)
WRITE_STR                              2  0x00000002 (const dword)  (usage 6)
WRITE_STRU                             3  0x00000003 (const dword)  (usage 6)
WriteCmd                               0  0x00000000 (const dword)  (not used)
WriteObject                        16527  0x0000408f (User func) args[3] r=0  (usage 24)
X_MAX                                  0  0x00000000 (const dword)  (not used)
X_ORG                                  6  0x00000006 (const dword)  (not used)
X_ORIGIN                              30  0x0000001e (const dword)  (not used)
Y_MAX                                  1  0x00000001 (const dword)  (not used)
Y_ORG                                  7  0x00000007 (const dword)  (not used)
Y_ORIGIN                              31  0x0000001f (const dword)  (not used)
YELLOW                             65504  0x0000ffe0 (const dword)  (not used)
YELLOWGREEN                        40550  0x00009e66 (const dword)  (not used)
